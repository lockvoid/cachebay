(() => { // webpackBootstrap
var __webpack_modules__ = ({
"../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/areEqual.js": (function (module) {
"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var aStackPool = [];
var bStackPool = [];
/**
 * Checks if two values are equal. Values may be primitives, arrays, or objects.
 * Returns true if both arguments have the same keys and values.
 *
 * @see http://underscorejs.org
 * @copyright 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
 * @license MIT
 */

function areEqual(a, b) {
  var aStack = aStackPool.length ? aStackPool.pop() : [];
  var bStack = bStackPool.length ? bStackPool.pop() : [];
  var result = eq(a, b, aStack, bStack);
  aStack.length = 0;
  bStack.length = 0;
  aStackPool.push(aStack);
  bStackPool.push(bStack);
  return result;
}

function eq(a, b, aStack, bStack) {
  if (a === b) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    return a !== 0 || 1 / a == 1 / b;
  }

  if (a == null || b == null) {
    // a or b can be `null` or `undefined`
    return false;
  }

  if (typeof a != 'object' || typeof b != 'object') {
    return false;
  }

  var objToStr = Object.prototype.toString;
  var className = objToStr.call(a);

  if (className != objToStr.call(b)) {
    return false;
  }

  switch (className) {
    case '[object String]':
      return a == String(b);

    case '[object Number]':
      return isNaN(a) || isNaN(b) ? false : a == Number(b);

    case '[object Date]':
    case '[object Boolean]':
      return +a == +b;

    case '[object RegExp]':
      return a.source == b.source && a.global == b.global && a.multiline == b.multiline && a.ignoreCase == b.ignoreCase;
  } // Assume equality for cyclic structures.


  var length = aStack.length;

  while (length--) {
    if (aStack[length] == a) {
      return bStack[length] == b;
    }
  }

  aStack.push(a);
  bStack.push(b);
  var size = 0; // Recursively compare objects and arrays.

  if (className === '[object Array]') {
    size = a.length;

    if (size !== b.length) {
      return false;
    } // Deep compare the contents, ignoring non-numeric properties.


    while (size--) {
      if (!eq(a[size], b[size], aStack, bStack)) {
        return false;
      }
    }
  } else {
    if (a.constructor !== b.constructor) {
      return false;
    }

    if (a.hasOwnProperty('valueOf') && b.hasOwnProperty('valueOf')) {
      return a.valueOf() == b.valueOf();
    }

    var keys = Object.keys(a);

    if (keys.length != Object.keys(b).length) {
      return false;
    }

    for (var i = 0; i < keys.length; i++) {
      if (!eq(a[keys[i]], b[keys[i]], aStack, bStack)) {
        return false;
      }
    }
  }

  aStack.pop();
  bStack.pop();
  return true;
}

module.exports = areEqual;

}),
"../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/emptyFunction.js": (function (module) {
"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}
/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */


var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);

emptyFunction.thatReturnsThis = function () {
  return this;
};

emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

}),
"../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */


var emptyFunction = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/emptyFunction.js");
/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */


function printWarning(format) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  var argIndex = 0;
  var message = 'Warning: ' + format.replace(/%s/g, function () {
    return args[argIndex++];
  });

  if (typeof console !== 'undefined') {
    console.error(message);
  }

  try {
    // --- Welcome to debugging React ---
    // This error was thrown as a convenience so that you can use this stack
    // to find the callsite that caused this warning to fire.
    throw new Error(message);
  } catch (x) {}
}

var warning =  true ? function (condition, format) {
  if (format === undefined) {
    throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
  }

  if (!condition) {
    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    printWarning.apply(void 0, [format].concat(args));
  }
} : 0;
module.exports = warning;

}),
"../../node_modules/.pnpm/graphql-tag@2.12.6_graphql@16.11.0/node_modules/graphql-tag/lib/index.js": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": () => (__WEBPACK_DEFAULT_EXPORT__),
  disableExperimentalFragmentVariables: () => (disableExperimentalFragmentVariables),
  disableFragmentWarnings: () => (disableFragmentWarnings),
  enableExperimentalFragmentVariables: () => (enableExperimentalFragmentVariables),
  gql: () => (gql),
  resetCaches: () => (resetCaches)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/parser.mjs");


var docCache = new Map();
var fragmentSourceMap = new Map();
var printFragmentWarnings = true;
var experimentalFragmentVariables = false;
function normalize(string) {
    return string.replace(/[\s,]+/g, ' ').trim();
}
function cacheKeyFromLoc(loc) {
    return normalize(loc.source.body.substring(loc.start, loc.end));
}
function processFragments(ast) {
    var seenKeys = new Set();
    var definitions = [];
    ast.definitions.forEach(function (fragmentDefinition) {
        if (fragmentDefinition.kind === 'FragmentDefinition') {
            var fragmentName = fragmentDefinition.name.value;
            var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);
            var sourceKeySet = fragmentSourceMap.get(fragmentName);
            if (sourceKeySet && !sourceKeySet.has(sourceKey)) {
                if (printFragmentWarnings) {
                    console.warn("Warning: fragment with name " + fragmentName + " already exists.\n"
                        + "graphql-tag enforces all fragment names across your application to be unique; read more about\n"
                        + "this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
                }
            }
            else if (!sourceKeySet) {
                fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);
            }
            sourceKeySet.add(sourceKey);
            if (!seenKeys.has(sourceKey)) {
                seenKeys.add(sourceKey);
                definitions.push(fragmentDefinition);
            }
        }
        else {
            definitions.push(fragmentDefinition);
        }
    });
    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, ast), { definitions: definitions });
}
function stripLoc(doc) {
    var workSet = new Set(doc.definitions);
    workSet.forEach(function (node) {
        if (node.loc)
            delete node.loc;
        Object.keys(node).forEach(function (key) {
            var value = node[key];
            if (value && typeof value === 'object') {
                workSet.add(value);
            }
        });
    });
    var loc = doc.loc;
    if (loc) {
        delete loc.startToken;
        delete loc.endToken;
    }
    return doc;
}
function parseDocument(source) {
    var cacheKey = normalize(source);
    if (!docCache.has(cacheKey)) {
        var parsed = (0,graphql__WEBPACK_IMPORTED_MODULE_1__.parse)(source, {
            experimentalFragmentVariables: experimentalFragmentVariables,
            allowLegacyFragmentVariables: experimentalFragmentVariables
        });
        if (!parsed || parsed.kind !== 'Document') {
            throw new Error('Not a valid GraphQL document.');
        }
        docCache.set(cacheKey, stripLoc(processFragments(parsed)));
    }
    return docCache.get(cacheKey);
}
function gql(literals) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    if (typeof literals === 'string') {
        literals = [literals];
    }
    var result = literals[0];
    args.forEach(function (arg, i) {
        if (arg && arg.kind === 'Document') {
            result += arg.loc.source.body;
        }
        else {
            result += arg;
        }
        result += literals[i + 1];
    });
    return parseDocument(result);
}
function resetCaches() {
    docCache.clear();
    fragmentSourceMap.clear();
}
function disableFragmentWarnings() {
    printFragmentWarnings = false;
}
function enableExperimentalFragmentVariables() {
    experimentalFragmentVariables = true;
}
function disableExperimentalFragmentVariables() {
    experimentalFragmentVariables = false;
}
var extras = {
    gql: gql,
    resetCaches: resetCaches,
    disableFragmentWarnings: disableFragmentWarnings,
    enableExperimentalFragmentVariables: enableExperimentalFragmentVariables,
    disableExperimentalFragmentVariables: disableExperimentalFragmentVariables
};
(function (gql_1) {
    gql_1.gql = extras.gql, gql_1.resetCaches = extras.resetCaches, gql_1.disableFragmentWarnings = extras.disableFragmentWarnings, gql_1.enableExperimentalFragmentVariables = extras.enableExperimentalFragmentVariables, gql_1.disableExperimentalFragmentVariables = extras.disableExperimentalFragmentVariables;
})(gql || (gql = {}));
gql["default"] = gql;
/* ESM default export */ const __WEBPACK_DEFAULT_EXPORT__ = (gql);
//# sourceMappingURL=index.js.map

}),
"../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js": (function (module) {
"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var NODE_ENV = "development";

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;


}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/index.js": (function (module, __unused_webpack_exports, __webpack_require__) {
/**
 * Relay v16.2.0
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

module.exports = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/index.js");


}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/RelayDefaultHandlerProvider.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var ConnectionHandler = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js");
var MutationHandlers = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/connection/MutationHandlers.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function RelayDefaultHandlerProvider(handle) {
  switch (handle) {
    case 'connection':
      return ConnectionHandler;
    case 'deleteRecord':
      return MutationHandlers.DeleteRecordHandler;
    case 'deleteEdge':
      return MutationHandlers.DeleteEdgeHandler;
    case 'appendEdge':
      return MutationHandlers.AppendEdgeHandler;
    case 'prependEdge':
      return MutationHandlers.PrependEdgeHandler;
    case 'appendNode':
      return MutationHandlers.AppendNodeHandler;
    case 'prependNode':
      return MutationHandlers.PrependNodeHandler;
  }
   true ?  true ? invariant(false, 'RelayDefaultHandlerProvider: No handler provided for `%s`.', handle) : 0 : 0;
}
module.exports = RelayDefaultHandlerProvider;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ClientID.js"),
  generateClientID = _require.generateClientID;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  getStableStorageKey = _require2.getStableStorageKey;
var getRelayHandleKey = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getRelayHandleKey.js");
var ConnectionInterface = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/connection/ConnectionInterface.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
var CONNECTION = 'connection';
var NEXT_EDGE_INDEX = '__connection_next_edge_index';
function update(store, payload) {
  var record = store.get(payload.dataID);
  if (!record) {
    return;
  }
  var _ConnectionInterface$ = ConnectionInterface.get(),
    EDGES = _ConnectionInterface$.EDGES,
    END_CURSOR = _ConnectionInterface$.END_CURSOR,
    HAS_NEXT_PAGE = _ConnectionInterface$.HAS_NEXT_PAGE,
    HAS_PREV_PAGE = _ConnectionInterface$.HAS_PREV_PAGE,
    PAGE_INFO = _ConnectionInterface$.PAGE_INFO,
    PAGE_INFO_TYPE = _ConnectionInterface$.PAGE_INFO_TYPE,
    START_CURSOR = _ConnectionInterface$.START_CURSOR;
  var serverConnection = record.getLinkedRecord(payload.fieldKey);
  var serverPageInfo = serverConnection && serverConnection.getLinkedRecord(PAGE_INFO);
  if (!serverConnection) {
    record.setValue(null, payload.handleKey);
    return;
  }
  var clientConnectionID = generateClientID(record.getDataID(), payload.handleKey);
  var clientConnectionField = record.getLinkedRecord(payload.handleKey);
  var clientConnection = clientConnectionField !== null && clientConnectionField !== void 0 ? clientConnectionField : store.get(clientConnectionID);
  var clientPageInfo = clientConnection && clientConnection.getLinkedRecord(PAGE_INFO);
  if (!clientConnection) {
    var connection = store.create(clientConnectionID, serverConnection.getType());
    connection.setValue(0, NEXT_EDGE_INDEX);
    connection.copyFieldsFrom(serverConnection);
    var serverEdges = serverConnection.getLinkedRecords(EDGES);
    if (serverEdges) {
      serverEdges = serverEdges.map(function (edge) {
        return buildConnectionEdge(store, connection, edge);
      });
      connection.setLinkedRecords(serverEdges, EDGES);
    }
    record.setLinkedRecord(connection, payload.handleKey);
    clientPageInfo = store.create(generateClientID(connection.getDataID(), PAGE_INFO), PAGE_INFO_TYPE);
    clientPageInfo.setValue(false, HAS_NEXT_PAGE);
    clientPageInfo.setValue(false, HAS_PREV_PAGE);
    clientPageInfo.setValue(null, END_CURSOR);
    clientPageInfo.setValue(null, START_CURSOR);
    if (serverPageInfo) {
      clientPageInfo.copyFieldsFrom(serverPageInfo);
    }
    connection.setLinkedRecord(clientPageInfo, PAGE_INFO);
  } else {
    if (clientConnectionField == null) {
      record.setLinkedRecord(clientConnection, payload.handleKey);
    }
    var _connection = clientConnection;
    var _serverEdges = serverConnection.getLinkedRecords(EDGES);
    if (_serverEdges) {
      _serverEdges = _serverEdges.map(function (edge) {
        return buildConnectionEdge(store, _connection, edge);
      });
    }
    var prevEdges = _connection.getLinkedRecords(EDGES);
    var prevPageInfo = _connection.getLinkedRecord(PAGE_INFO);
    _connection.copyFieldsFrom(serverConnection);
    if (prevEdges) {
      _connection.setLinkedRecords(prevEdges, EDGES);
    }
    if (prevPageInfo) {
      _connection.setLinkedRecord(prevPageInfo, PAGE_INFO);
    }
    var nextEdges = [];
    var args = payload.args;
    if (prevEdges && _serverEdges) {
      if (args.after != null) {
        var _clientPageInfo;
        var clientEndCursor = (_clientPageInfo = clientPageInfo) === null || _clientPageInfo === void 0 ? void 0 : _clientPageInfo.getValue(END_CURSOR);
        var serverEndCursor = serverPageInfo === null || serverPageInfo === void 0 ? void 0 : serverPageInfo.getValue(END_CURSOR);
        var isAddingEdgesAfterCurrentPage = clientPageInfo && args.after === clientEndCursor;
        var isFillingOutCurrentPage = clientPageInfo && clientEndCursor === serverEndCursor;
        if (isAddingEdgesAfterCurrentPage || isFillingOutCurrentPage) {
          var nodeIDs = new Set();
          mergeEdges(prevEdges, nextEdges, nodeIDs);
          mergeEdges(_serverEdges, nextEdges, nodeIDs);
        } else {
           true ? warning(false, 'Relay: Unexpected after cursor `%s`, edges must ' + 'be fetched from the end of the list (`%s`).', args.after, clientPageInfo && clientPageInfo.getValue(END_CURSOR)) : 0;
          return;
        }
      } else if (args.before != null) {
        if (clientPageInfo && args.before === clientPageInfo.getValue(START_CURSOR)) {
          var _nodeIDs = new Set();
          mergeEdges(_serverEdges, nextEdges, _nodeIDs);
          mergeEdges(prevEdges, nextEdges, _nodeIDs);
        } else {
           true ? warning(false, 'Relay: Unexpected before cursor `%s`, edges must ' + 'be fetched from the beginning of the list (`%s`).', args.before, clientPageInfo && clientPageInfo.getValue(START_CURSOR)) : 0;
          return;
        }
      } else {
        nextEdges = _serverEdges;
      }
    } else if (_serverEdges) {
      nextEdges = _serverEdges;
    } else {
      nextEdges = prevEdges;
    }
    if (nextEdges != null && nextEdges !== prevEdges) {
      _connection.setLinkedRecords(nextEdges, EDGES);
    }
    if (clientPageInfo && serverPageInfo) {
      if (args.after == null && args.before == null) {
        clientPageInfo.copyFieldsFrom(serverPageInfo);
      } else if (args.before != null || args.after == null && args.last) {
        clientPageInfo.setValue(!!serverPageInfo.getValue(HAS_PREV_PAGE), HAS_PREV_PAGE);
        var startCursor = serverPageInfo.getValue(START_CURSOR);
        if (typeof startCursor === 'string') {
          clientPageInfo.setValue(startCursor, START_CURSOR);
        }
      } else if (args.after != null || args.before == null && args.first) {
        clientPageInfo.setValue(!!serverPageInfo.getValue(HAS_NEXT_PAGE), HAS_NEXT_PAGE);
        var endCursor = serverPageInfo.getValue(END_CURSOR);
        if (typeof endCursor === 'string') {
          clientPageInfo.setValue(endCursor, END_CURSOR);
        }
      }
    }
  }
}
function getConnection(record, key, filters) {
  var handleKey = getRelayHandleKey(CONNECTION, key, null);
  return record.getLinkedRecord(handleKey, filters);
}
function getConnectionID(recordID, key, filters) {
  var handleKey = getRelayHandleKey(CONNECTION, key, null);
  var storageKey = getStableStorageKey(handleKey, filters);
  return generateClientID(recordID, storageKey);
}
function insertEdgeAfter(record, newEdge, cursor) {
  var _ConnectionInterface$2 = ConnectionInterface.get(),
    CURSOR = _ConnectionInterface$2.CURSOR,
    EDGES = _ConnectionInterface$2.EDGES;
  var edges = record.getLinkedRecords(EDGES);
  if (!edges) {
    record.setLinkedRecords([newEdge], EDGES);
    return;
  }
  var nextEdges;
  if (cursor == null) {
    nextEdges = edges.concat(newEdge);
  } else {
    nextEdges = [];
    var foundCursor = false;
    for (var ii = 0; ii < edges.length; ii++) {
      var edge = edges[ii];
      nextEdges.push(edge);
      if (edge == null) {
        continue;
      }
      var edgeCursor = edge.getValue(CURSOR);
      if (cursor === edgeCursor) {
        nextEdges.push(newEdge);
        foundCursor = true;
      }
    }
    if (!foundCursor) {
      nextEdges.push(newEdge);
    }
  }
  record.setLinkedRecords(nextEdges, EDGES);
}
function createEdge(store, record, node, edgeType) {
  var _ConnectionInterface$3 = ConnectionInterface.get(),
    NODE = _ConnectionInterface$3.NODE;
  var edgeID = generateClientID(record.getDataID(), node.getDataID());
  var edge = store.get(edgeID);
  if (!edge) {
    edge = store.create(edgeID, edgeType);
  }
  edge.setLinkedRecord(node, NODE);
  if (edge.getValue('cursor') == null) {
    edge.setValue(null, 'cursor');
  }
  return edge;
}
function insertEdgeBefore(record, newEdge, cursor) {
  var _ConnectionInterface$4 = ConnectionInterface.get(),
    CURSOR = _ConnectionInterface$4.CURSOR,
    EDGES = _ConnectionInterface$4.EDGES;
  var edges = record.getLinkedRecords(EDGES);
  if (!edges) {
    record.setLinkedRecords([newEdge], EDGES);
    return;
  }
  var nextEdges;
  if (cursor == null) {
    nextEdges = [newEdge].concat(edges);
  } else {
    nextEdges = [];
    var foundCursor = false;
    for (var ii = 0; ii < edges.length; ii++) {
      var edge = edges[ii];
      if (edge != null) {
        var edgeCursor = edge.getValue(CURSOR);
        if (cursor === edgeCursor) {
          nextEdges.push(newEdge);
          foundCursor = true;
        }
      }
      nextEdges.push(edge);
    }
    if (!foundCursor) {
      nextEdges.unshift(newEdge);
    }
  }
  record.setLinkedRecords(nextEdges, EDGES);
}
function deleteNode(record, nodeID) {
  var _ConnectionInterface$5 = ConnectionInterface.get(),
    EDGES = _ConnectionInterface$5.EDGES,
    NODE = _ConnectionInterface$5.NODE;
  var edges = record.getLinkedRecords(EDGES);
  if (!edges) {
    return;
  }
  var nextEdges;
  for (var ii = 0; ii < edges.length; ii++) {
    var edge = edges[ii];
    var node = edge && edge.getLinkedRecord(NODE);
    if (node != null && node.getDataID() === nodeID) {
      if (nextEdges === undefined) {
        nextEdges = edges.slice(0, ii);
      }
    } else if (nextEdges !== undefined) {
      nextEdges.push(edge);
    }
  }
  if (nextEdges !== undefined) {
    record.setLinkedRecords(nextEdges, EDGES);
  }
}
function buildConnectionEdge(store, connection, edge) {
  if (edge == null) {
    return edge;
  }
  var _ConnectionInterface$6 = ConnectionInterface.get(),
    EDGES = _ConnectionInterface$6.EDGES;
  var edgeIndex = connection.getValue(NEXT_EDGE_INDEX);
  !(typeof edgeIndex === 'number') ?  true ? invariant(false, 'ConnectionHandler: Expected %s to be a number, got `%s`.', NEXT_EDGE_INDEX, edgeIndex) : 0 : void 0;
  var edgeID = generateClientID(connection.getDataID(), EDGES, edgeIndex);
  var connectionEdge = store.create(edgeID, edge.getType());
  connectionEdge.copyFieldsFrom(edge);
  if (connectionEdge.getValue('cursor') == null) {
    connectionEdge.setValue(null, 'cursor');
  }
  connection.setValue(edgeIndex + 1, NEXT_EDGE_INDEX);
  return connectionEdge;
}
function mergeEdges(sourceEdges, targetEdges, nodeIDs) {
  var _ConnectionInterface$7 = ConnectionInterface.get(),
    NODE = _ConnectionInterface$7.NODE;
  for (var ii = 0; ii < sourceEdges.length; ii++) {
    var edge = sourceEdges[ii];
    if (!edge) {
      continue;
    }
    var node = edge.getLinkedRecord(NODE);
    var nodeID = node && node.getDataID();
    if (nodeID) {
      if (nodeIDs.has(nodeID)) {
        continue;
      }
      nodeIDs.add(nodeID);
    }
    targetEdges.push(edge);
  }
}
module.exports = {
  buildConnectionEdge: buildConnectionEdge,
  createEdge: createEdge,
  deleteNode: deleteNode,
  getConnection: getConnection,
  getConnectionID: getConnectionID,
  insertEdgeAfter: insertEdgeAfter,
  insertEdgeBefore: insertEdgeBefore,
  update: update
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/connection/ConnectionInterface.js": (function (module) {
"use strict";


var CONNECTION_CALLS = {
  after: true,
  before: true,
  find: true,
  first: true,
  last: true,
  surrounds: true
};
var config = {
  CURSOR: 'cursor',
  EDGES: 'edges',
  END_CURSOR: 'endCursor',
  HAS_NEXT_PAGE: 'hasNextPage',
  HAS_PREV_PAGE: 'hasPreviousPage',
  NODE: 'node',
  PAGE_INFO_TYPE: 'PageInfo',
  PAGE_INFO: 'pageInfo',
  START_CURSOR: 'startCursor'
};
var ConnectionInterface = {
  inject: function inject(newConfig) {
    config = newConfig;
  },
  get: function get() {
    return config;
  },
  isConnectionCall: function isConnectionCall(call) {
    return CONNECTION_CALLS.hasOwnProperty(call.name);
  }
};
module.exports = ConnectionInterface;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/connection/MutationHandlers.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var ConnectionHandler = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js");
var ConnectionInterface = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/connection/ConnectionInterface.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
var DeleteRecordHandler = {
  update: function update(store, payload) {
    var record = store.get(payload.dataID);
    if (record != null) {
      var idOrIds = record.getValue(payload.fieldKey);
      if (typeof idOrIds === 'string') {
        store["delete"](idOrIds);
      } else if (Array.isArray(idOrIds)) {
        idOrIds.forEach(function (id) {
          if (typeof id === 'string') {
            store["delete"](id);
          }
        });
      }
    }
  }
};
var DeleteEdgeHandler = {
  update: function update(store, payload) {
    var record = store.get(payload.dataID);
    if (record == null) {
      return;
    }
    var connections = payload.handleArgs.connections;
    !(connections != null) ?  true ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : 0 : void 0;
    var idOrIds = record.getValue(payload.fieldKey);
    var idList = Array.isArray(idOrIds) ? idOrIds : [idOrIds];
    idList.forEach(function (id) {
      if (typeof id === 'string') {
        var _iterator = (0, _createForOfIteratorHelper2["default"])(connections),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var connectionID = _step.value;
            var connection = store.get(connectionID);
            if (connection == null) {
               true ? warning(false, "[Relay] The connection with id `%s` doesn't exist.", connectionID) : 0;
              continue;
            }
            ConnectionHandler.deleteNode(connection, id);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    });
  }
};
var AppendEdgeHandler = {
  update: edgeUpdater(ConnectionHandler.insertEdgeAfter)
};
var PrependEdgeHandler = {
  update: edgeUpdater(ConnectionHandler.insertEdgeBefore)
};
var AppendNodeHandler = {
  update: nodeUpdater(ConnectionHandler.insertEdgeAfter)
};
var PrependNodeHandler = {
  update: nodeUpdater(ConnectionHandler.insertEdgeBefore)
};
function edgeUpdater(insertFn) {
  return function (store, payload) {
    var _serverEdges;
    var record = store.get(payload.dataID);
    if (record == null) {
      return;
    }
    var connections = payload.handleArgs.connections;
    !(connections != null) ?  true ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : 0 : void 0;
    var singleServerEdge, serverEdges;
    try {
      singleServerEdge = record.getLinkedRecord(payload.fieldKey);
    } catch (_unused) {}
    if (!singleServerEdge) {
      try {
        serverEdges = record.getLinkedRecords(payload.fieldKey);
      } catch (_unused2) {}
    }
    if (singleServerEdge == null && serverEdges == null) {
       true ? warning(false, 'MutationHandlers: Expected the server edge to be non-null.') : 0;
      return;
    }
    var _ConnectionInterface$ = ConnectionInterface.get(),
      NODE = _ConnectionInterface$.NODE,
      EDGES = _ConnectionInterface$.EDGES;
    var serverEdgeList = (_serverEdges = serverEdges) !== null && _serverEdges !== void 0 ? _serverEdges : [singleServerEdge];
    var _iterator2 = (0, _createForOfIteratorHelper2["default"])(serverEdgeList),
      _step2;
    try {
      var _loop = function _loop() {
        var serverEdge = _step2.value;
        if (serverEdge == null) {
          return "continue";
        }
        var serverNode = serverEdge.getLinkedRecord('node');
        if (!serverNode) {
          return "continue";
        }
        var serverNodeId = serverNode.getDataID();
        var _iterator3 = (0, _createForOfIteratorHelper2["default"])(connections),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var connectionID = _step3.value;
            var connection = store.get(connectionID);
            if (connection == null) {
               true ? warning(false, "[Relay] The connection with id `%s` doesn't exist.", connectionID) : 0;
              continue;
            }
            var nodeAlreadyExistsInConnection = (_connection$getLinked = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked === void 0 ? void 0 : _connection$getLinked.some(function (edge) {
              var _edge$getLinkedRecord;
              return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord === void 0 ? void 0 : _edge$getLinkedRecord.getDataID()) === serverNodeId;
            });
            if (nodeAlreadyExistsInConnection) {
              continue;
            }
            var clientEdge = ConnectionHandler.buildConnectionEdge(store, connection, serverEdge);
            !(clientEdge != null) ?  true ? invariant(false, 'MutationHandlers: Failed to build the edge.') : 0 : void 0;
            insertFn(connection, clientEdge);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      };
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _connection$getLinked;
        var _ret = _loop();
        if (_ret === "continue") continue;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  };
}
function nodeUpdater(insertFn) {
  return function (store, payload) {
    var _serverNodes;
    var record = store.get(payload.dataID);
    if (record == null) {
      return;
    }
    var _payload$handleArgs = payload.handleArgs,
      connections = _payload$handleArgs.connections,
      edgeTypeName = _payload$handleArgs.edgeTypeName;
    !(connections != null) ?  true ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : 0 : void 0;
    !(edgeTypeName != null) ?  true ? invariant(false, 'MutationHandlers: Expected edge typename to be specified.') : 0 : void 0;
    var singleServerNode;
    var serverNodes;
    try {
      singleServerNode = record.getLinkedRecord(payload.fieldKey);
    } catch (_unused3) {}
    if (!singleServerNode) {
      try {
        serverNodes = record.getLinkedRecords(payload.fieldKey);
      } catch (_unused4) {}
    }
    if (singleServerNode == null && serverNodes == null) {
       true ? warning(false, 'MutationHandlers: Expected target node to exist.') : 0;
      return;
    }
    var _ConnectionInterface$2 = ConnectionInterface.get(),
      NODE = _ConnectionInterface$2.NODE,
      EDGES = _ConnectionInterface$2.EDGES;
    var serverNodeList = (_serverNodes = serverNodes) !== null && _serverNodes !== void 0 ? _serverNodes : [singleServerNode];
    var _iterator4 = (0, _createForOfIteratorHelper2["default"])(serverNodeList),
      _step4;
    try {
      var _loop2 = function _loop2() {
        var serverNode = _step4.value;
        if (serverNode == null) {
          return "continue";
        }
        var serverNodeId = serverNode.getDataID();
        var _iterator5 = (0, _createForOfIteratorHelper2["default"])(connections),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var connectionID = _step5.value;
            var connection = store.get(connectionID);
            if (connection == null) {
               true ? warning(false, "[Relay] The connection with id `%s` doesn't exist.", connectionID) : 0;
              continue;
            }
            var nodeAlreadyExistsInConnection = (_connection$getLinked2 = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked2 === void 0 ? void 0 : _connection$getLinked2.some(function (edge) {
              var _edge$getLinkedRecord2;
              return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord2 = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord2 === void 0 ? void 0 : _edge$getLinkedRecord2.getDataID()) === serverNodeId;
            });
            if (nodeAlreadyExistsInConnection) {
              continue;
            }
            var clientEdge = ConnectionHandler.createEdge(store, connection, serverNode, edgeTypeName);
            !(clientEdge != null) ?  true ? invariant(false, 'MutationHandlers: Failed to build the edge.') : 0 : void 0;
            insertFn(connection, clientEdge);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      };
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var _connection$getLinked2;
        var _ret2 = _loop2();
        if (_ret2 === "continue") continue;
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  };
}
module.exports = {
  AppendEdgeHandler: AppendEdgeHandler,
  DeleteRecordHandler: DeleteRecordHandler,
  PrependEdgeHandler: PrependEdgeHandler,
  AppendNodeHandler: AppendNodeHandler,
  PrependNodeHandler: PrependNodeHandler,
  DeleteEdgeHandler: DeleteEdgeHandler
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/index.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var ConnectionHandler = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js");
var ConnectionInterface = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/connection/ConnectionInterface.js");
var MutationHandlers = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/connection/MutationHandlers.js");
var RelayDefaultHandlerProvider = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/RelayDefaultHandlerProvider.js");
var applyOptimisticMutation = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/applyOptimisticMutation.js");
var commitLocalUpdate = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/commitLocalUpdate.js");
var commitMutation = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/commitMutation.js");
var RelayDeclarativeMutationConfig = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayDeclarativeMutationConfig.js");
var RelayNetwork = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/RelayNetwork.js");
var RelayObservable = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/RelayObservable.js");
var RelayQueryResponseCache = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/RelayQueryResponseCache.js");
var fetchQuery = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/fetchQuery.js");
var fetchQuery_DEPRECATED = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/fetchQuery_DEPRECATED.js");
var fetchQueryInternal = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/fetchQueryInternal.js");
var GraphQLTag = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/GraphQLTag.js");
var PreloadableQueryRegistry = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/PreloadableQueryRegistry.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ClientID.js"),
  generateClientID = _require.generateClientID,
  generateUniqueClientID = _require.generateUniqueClientID,
  isClientID = _require.isClientID;
var createFragmentSpecResolver = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/createFragmentSpecResolver.js");
var createRelayContext = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/createRelayContext.js");
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/experimental-live-resolvers/LiveResolverSuspenseSentinel.js"),
  isSuspenseSentinel = _require2.isSuspenseSentinel,
  suspenseSentinel = _require2.suspenseSentinel;
var isRelayModernEnvironment = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/isRelayModernEnvironment.js");
var normalizeResponse = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/normalizeResponse.js");
var readInlineData = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/readInlineData.js");
var RelayConcreteVariables = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js");
var RelayModernEnvironment = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernEnvironment.js");
var RelayModernOperationDescriptor = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js");
var RelayModernRecord = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js");
var RelayModernSelector = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernSelector.js");
var RelayModernStore = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernStore.js");
var RelayOperationTracker = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayOperationTracker.js");
var RelayRecordSource = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayRecordSource.js");
var RelayStoreUtils = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js");
var ResolverFragments = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ResolverFragments.js");
var ViewerPattern = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ViewerPattern.js");
var requestSubscription = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/subscription/requestSubscription.js");
var createPayloadFor3DField = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/createPayloadFor3DField.js");
var deepFreeze = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/deepFreeze.js");
var getFragmentIdentifier = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getFragmentIdentifier.js");
var getPaginationMetadata = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getPaginationMetadata.js");
var getPaginationVariables = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getPaginationVariables.js");
var getPendingOperationsForFragment = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getPendingOperationsForFragment.js");
var getRefetchMetadata = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getRefetchMetadata.js");
var getRelayHandleKey = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getRelayHandleKey.js");
var getRequestIdentifier = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getRequestIdentifier.js");
var getValueAtPath = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getValueAtPath.js");
var handlePotentialSnapshotErrors = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/handlePotentialSnapshotErrors.js");
var isPromise = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/isPromise.js");
var isScalarAndEqual = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/isScalarAndEqual.js");
var recycleNodesInto = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/recycleNodesInto.js");
var RelayConcreteNode = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js");
var RelayDefaultHandleKey = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayDefaultHandleKey.js");
var RelayError = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayError.js");
var RelayFeatureFlags = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js");
var RelayProfiler = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayProfiler.js");
var RelayReplaySubject = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayReplaySubject.js");
var stableCopy = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/stableCopy.js");
var withProvidedVariables = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/withProvidedVariables.js");
if (true) {
  var mapStr = typeof Map !== 'function' ? 'Map' : null;
  var setStr = typeof Set !== 'function' ? 'Set' : null;
  var promiseStr = typeof Promise !== 'function' ? 'Promise' : null;
  var objStr = typeof Object.assign !== 'function' ? 'Object.assign' : null;
  if (mapStr || setStr || promiseStr || objStr) {
    throw new Error("relay-runtime requires ".concat([mapStr, setStr, promiseStr, objStr].filter(Boolean).join(', and '), " to exist. ") + 'Use a polyfill to provide these for older browsers.');
  }
}
module.exports = {
  Environment: RelayModernEnvironment,
  Network: RelayNetwork,
  Observable: RelayObservable,
  QueryResponseCache: RelayQueryResponseCache,
  RecordSource: RelayRecordSource,
  Record: RelayModernRecord,
  ReplaySubject: RelayReplaySubject,
  Store: RelayModernStore,
  areEqualSelectors: RelayModernSelector.areEqualSelectors,
  createFragmentSpecResolver: createFragmentSpecResolver,
  createNormalizationSelector: RelayModernSelector.createNormalizationSelector,
  createOperationDescriptor: RelayModernOperationDescriptor.createOperationDescriptor,
  createReaderSelector: RelayModernSelector.createReaderSelector,
  createRequestDescriptor: RelayModernOperationDescriptor.createRequestDescriptor,
  getArgumentValues: RelayStoreUtils.getArgumentValues,
  getDataIDsFromFragment: RelayModernSelector.getDataIDsFromFragment,
  getDataIDsFromObject: RelayModernSelector.getDataIDsFromObject,
  getNode: GraphQLTag.getNode,
  getFragment: GraphQLTag.getFragment,
  getInlineDataFragment: GraphQLTag.getInlineDataFragment,
  getModuleComponentKey: RelayStoreUtils.getModuleComponentKey,
  getModuleOperationKey: RelayStoreUtils.getModuleOperationKey,
  getPaginationFragment: GraphQLTag.getPaginationFragment,
  getPluralSelector: RelayModernSelector.getPluralSelector,
  getRefetchableFragment: GraphQLTag.getRefetchableFragment,
  getRequest: GraphQLTag.getRequest,
  getRequestIdentifier: getRequestIdentifier,
  getSelector: RelayModernSelector.getSelector,
  getSelectorsFromObject: RelayModernSelector.getSelectorsFromObject,
  getSingularSelector: RelayModernSelector.getSingularSelector,
  getStorageKey: RelayStoreUtils.getStorageKey,
  getVariablesFromFragment: RelayModernSelector.getVariablesFromFragment,
  getVariablesFromObject: RelayModernSelector.getVariablesFromObject,
  getVariablesFromPluralFragment: RelayModernSelector.getVariablesFromPluralFragment,
  getVariablesFromSingularFragment: RelayModernSelector.getVariablesFromSingularFragment,
  handlePotentialSnapshotErrors: handlePotentialSnapshotErrors,
  graphql: GraphQLTag.graphql,
  isFragment: GraphQLTag.isFragment,
  isInlineDataFragment: GraphQLTag.isInlineDataFragment,
  isSuspenseSentinel: isSuspenseSentinel,
  suspenseSentinel: suspenseSentinel,
  isRequest: GraphQLTag.isRequest,
  readInlineData: readInlineData,
  MutationTypes: RelayDeclarativeMutationConfig.MutationTypes,
  RangeOperations: RelayDeclarativeMutationConfig.RangeOperations,
  DefaultHandlerProvider: RelayDefaultHandlerProvider,
  ConnectionHandler: ConnectionHandler,
  MutationHandlers: MutationHandlers,
  VIEWER_ID: ViewerPattern.VIEWER_ID,
  VIEWER_TYPE: ViewerPattern.VIEWER_TYPE,
  applyOptimisticMutation: applyOptimisticMutation,
  commitLocalUpdate: commitLocalUpdate,
  commitMutation: commitMutation,
  fetchQuery: fetchQuery,
  fetchQuery_DEPRECATED: fetchQuery_DEPRECATED,
  isRelayModernEnvironment: isRelayModernEnvironment,
  requestSubscription: requestSubscription,
  ConnectionInterface: ConnectionInterface,
  PreloadableQueryRegistry: PreloadableQueryRegistry,
  RelayProfiler: RelayProfiler,
  createPayloadFor3DField: createPayloadFor3DField,
  RelayConcreteNode: RelayConcreteNode,
  RelayError: RelayError,
  RelayFeatureFlags: RelayFeatureFlags,
  DEFAULT_HANDLE_KEY: RelayDefaultHandleKey.DEFAULT_HANDLE_KEY,
  FRAGMENTS_KEY: RelayStoreUtils.FRAGMENTS_KEY,
  FRAGMENT_OWNER_KEY: RelayStoreUtils.FRAGMENT_OWNER_KEY,
  ID_KEY: RelayStoreUtils.ID_KEY,
  REF_KEY: RelayStoreUtils.REF_KEY,
  REFS_KEY: RelayStoreUtils.REFS_KEY,
  ROOT_ID: RelayStoreUtils.ROOT_ID,
  ROOT_TYPE: RelayStoreUtils.ROOT_TYPE,
  TYPENAME_KEY: RelayStoreUtils.TYPENAME_KEY,
  deepFreeze: deepFreeze,
  generateClientID: generateClientID,
  generateUniqueClientID: generateUniqueClientID,
  getRelayHandleKey: getRelayHandleKey,
  isClientID: isClientID,
  isPromise: isPromise,
  isScalarAndEqual: isScalarAndEqual,
  recycleNodesInto: recycleNodesInto,
  stableCopy: stableCopy,
  getFragmentIdentifier: getFragmentIdentifier,
  getRefetchMetadata: getRefetchMetadata,
  getPaginationMetadata: getPaginationMetadata,
  getPaginationVariables: getPaginationVariables,
  getPendingOperationsForFragment: getPendingOperationsForFragment,
  getValueAtPath: getValueAtPath,
  __internal: {
    ResolverFragments: ResolverFragments,
    OperationTracker: RelayOperationTracker,
    createRelayContext: createRelayContext,
    getOperationVariables: RelayConcreteVariables.getOperationVariables,
    getLocalVariables: RelayConcreteVariables.getLocalVariables,
    fetchQuery: fetchQueryInternal.fetchQuery,
    fetchQueryDeduped: fetchQueryInternal.fetchQueryDeduped,
    getPromiseForActiveRequest: fetchQueryInternal.getPromiseForActiveRequest,
    getObservableForActiveRequest: fetchQueryInternal.getObservableForActiveRequest,
    normalizeResponse: normalizeResponse,
    withProvidedVariables: withProvidedVariables
  }
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/multi-actor-environment/ActorIdentifier.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = 'INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE';
function assertInternalActorIdentifier(actorIdentifier) {
  !(actorIdentifier === INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE) ?  true ? invariant(false, 'Expected to use only internal version of the `actorIdentifier`. "%s" was provided.', actorIdentifier) : 0 : void 0;
}
module.exports = {
  assertInternalActorIdentifier: assertInternalActorIdentifier,
  getActorIdentifier: function getActorIdentifier(actorID) {
    return actorID;
  },
  getDefaultActorIdentifier: function getDefaultActorIdentifier() {
    throw new Error('Not Implemented');
  },
  INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE: INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/multi-actor-environment/ActorUtils.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var ACTOR_IDENTIFIER_FIELD_NAME = 'actor_key';
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/multi-actor-environment/ActorIdentifier.js"),
  getActorIdentifier = _require.getActorIdentifier;
function getActorIdentifierFromPayload(payload) {
  if (payload != null && typeof payload === 'object' && typeof payload[ACTOR_IDENTIFIER_FIELD_NAME] === 'string') {
    return getActorIdentifier(payload[ACTOR_IDENTIFIER_FIELD_NAME]);
  }
}
module.exports = {
  ACTOR_IDENTIFIER_FIELD_NAME: ACTOR_IDENTIFIER_FIELD_NAME,
  getActorIdentifierFromPayload: getActorIdentifierFromPayload
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayDeclarativeMutationConfig.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var ConnectionHandler = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/connection/ConnectionHandler.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
var MutationTypes = Object.freeze({
  RANGE_ADD: 'RANGE_ADD',
  RANGE_DELETE: 'RANGE_DELETE',
  NODE_DELETE: 'NODE_DELETE'
});
var RangeOperations = Object.freeze({
  APPEND: 'append',
  PREPEND: 'prepend'
});
function convert(configs, request, optimisticUpdater, updater) {
  var configOptimisticUpdates = optimisticUpdater ? [optimisticUpdater] : [];
  var configUpdates = updater ? [updater] : [];
  configs.forEach(function (config) {
    switch (config.type) {
      case 'NODE_DELETE':
        var nodeDeleteResult = nodeDelete(config, request);
        if (nodeDeleteResult) {
          configOptimisticUpdates.push(nodeDeleteResult);
          configUpdates.push(nodeDeleteResult);
        }
        break;
      case 'RANGE_ADD':
        var rangeAddResult = rangeAdd(config, request);
        if (rangeAddResult) {
          configOptimisticUpdates.push(rangeAddResult);
          configUpdates.push(rangeAddResult);
        }
        break;
      case 'RANGE_DELETE':
        var rangeDeleteResult = rangeDelete(config, request);
        if (rangeDeleteResult) {
          configOptimisticUpdates.push(rangeDeleteResult);
          configUpdates.push(rangeDeleteResult);
        }
        break;
    }
  });
  return {
    optimisticUpdater: function optimisticUpdater(store, data) {
      configOptimisticUpdates.forEach(function (eachOptimisticUpdater) {
        eachOptimisticUpdater(store, data);
      });
    },
    updater: function updater(store, data) {
      configUpdates.forEach(function (eachUpdater) {
        eachUpdater(store, data);
      });
    }
  };
}
function nodeDelete(config, request) {
  var deletedIDFieldName = config.deletedIDFieldName;
  var rootField = getRootField(request);
  if (!rootField) {
    return null;
  }
  return function (store, data) {
    var payload = store.getRootField(rootField);
    if (!payload) {
      return;
    }
    var deleteID = payload.getValue(deletedIDFieldName);
    var deleteIDs = Array.isArray(deleteID) ? deleteID : [deleteID];
    deleteIDs.forEach(function (id) {
      if (id && typeof id === 'string') {
        store["delete"](id);
      }
    });
  };
}
function rangeAdd(config, request) {
  var parentID = config.parentID,
    connectionInfo = config.connectionInfo,
    edgeName = config.edgeName;
  if (!parentID) {
     true ? warning(false, 'RelayDeclarativeMutationConfig: For mutation config RANGE_ADD ' + 'to work you must include a parentID') : 0;
    return null;
  }
  var rootField = getRootField(request);
  if (!connectionInfo || !rootField) {
    return null;
  }
  return function (store, data) {
    var parent = store.get(parentID);
    if (!parent) {
      return;
    }
    var payload = store.getRootField(rootField);
    if (!payload) {
      return;
    }
    var serverEdge = payload.getLinkedRecord(edgeName);
    var _iterator = (0, _createForOfIteratorHelper2["default"])(connectionInfo),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var info = _step.value;
        if (!serverEdge) {
          continue;
        }
        var connection = ConnectionHandler.getConnection(parent, info.key, info.filters);
        if (!connection) {
          continue;
        }
        var clientEdge = ConnectionHandler.buildConnectionEdge(store, connection, serverEdge);
        if (!clientEdge) {
          continue;
        }
        switch (info.rangeBehavior) {
          case 'append':
            ConnectionHandler.insertEdgeAfter(connection, clientEdge);
            break;
          case 'prepend':
            ConnectionHandler.insertEdgeBefore(connection, clientEdge);
            break;
          default:
             true ? warning(false, 'RelayDeclarativeMutationConfig: RANGE_ADD range behavior `%s` ' + 'will not work as expected in RelayModern, supported range ' + "behaviors are 'append', 'prepend'.", info.rangeBehavior) : 0;
            break;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };
}
function rangeDelete(config, request) {
  var parentID = config.parentID,
    connectionKeys = config.connectionKeys,
    pathToConnection = config.pathToConnection,
    deletedIDFieldName = config.deletedIDFieldName;
  if (!parentID) {
     true ? warning(false, 'RelayDeclarativeMutationConfig: For mutation config RANGE_DELETE ' + 'to work you must include a parentID') : 0;
    return null;
  }
  var rootField = getRootField(request);
  if (!rootField) {
    return null;
  }
  return function (store, data) {
    if (!data) {
      return;
    }
    var deleteIDs = [];
    var deletedIDField = data[rootField];
    if (deletedIDField && Array.isArray(deletedIDFieldName)) {
      var _iterator2 = (0, _createForOfIteratorHelper2["default"])(deletedIDFieldName),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var eachField = _step2.value;
          if (deletedIDField && typeof deletedIDField === 'object') {
            deletedIDField = deletedIDField[eachField];
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      if (Array.isArray(deletedIDField)) {
        deletedIDField.forEach(function (idObject) {
          if (idObject && idObject.id && typeof idObject === 'object' && typeof idObject.id === 'string') {
            deleteIDs.push(idObject.id);
          }
        });
      } else if (deletedIDField && deletedIDField.id && typeof deletedIDField.id === 'string') {
        deleteIDs.push(deletedIDField.id);
      }
    } else if (deletedIDField && typeof deletedIDFieldName === 'string' && typeof deletedIDField === 'object') {
      deletedIDField = deletedIDField[deletedIDFieldName];
      if (typeof deletedIDField === 'string') {
        deleteIDs.push(deletedIDField);
      } else if (Array.isArray(deletedIDField)) {
        deletedIDField.forEach(function (id) {
          if (typeof id === 'string') {
            deleteIDs.push(id);
          }
        });
      }
    }
    deleteNode(parentID, connectionKeys, pathToConnection, store, deleteIDs);
  };
}
function deleteNode(parentID, connectionKeys, pathToConnection, store, deleteIDs) {
   true ? warning(connectionKeys != null, 'RelayDeclarativeMutationConfig: RANGE_DELETE must provide a ' + 'connectionKeys') : 0;
  var parent = store.get(parentID);
  if (!parent) {
    return;
  }
  if (pathToConnection.length < 2) {
     true ? warning(false, 'RelayDeclarativeMutationConfig: RANGE_DELETE ' + 'pathToConnection must include at least parent and connection') : 0;
    return;
  }
  var recordProxy = parent;
  for (var i = 1; i < pathToConnection.length - 1; i++) {
    if (recordProxy) {
      recordProxy = recordProxy.getLinkedRecord(pathToConnection[i]);
    }
  }
  if (!connectionKeys || !recordProxy) {
     true ? warning(false, 'RelayDeclarativeMutationConfig: RANGE_DELETE ' + 'pathToConnection is incorrect. Unable to find connection with ' + 'parentID: %s and path: %s', parentID, pathToConnection.toString()) : 0;
    return;
  }
  var _iterator3 = (0, _createForOfIteratorHelper2["default"])(connectionKeys),
    _step3;
  try {
    var _loop = function _loop() {
      var key = _step3.value;
      var connection = ConnectionHandler.getConnection(recordProxy, key.key, key.filters);
      if (connection) {
        deleteIDs.forEach(function (deleteID) {
          ConnectionHandler.deleteNode(connection, deleteID);
        });
      }
    };
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
}
function getRootField(request) {
  if (request.fragment.selections && request.fragment.selections.length > 0 && request.fragment.selections[0].kind === 'LinkedField') {
    return request.fragment.selections[0].name;
  }
  return null;
}
module.exports = {
  MutationTypes: MutationTypes,
  RangeOperations: RangeOperations,
  convert: convert
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayRecordProxy.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ClientID.js"),
  generateClientID = _require.generateClientID;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  getStableStorageKey = _require2.getStableStorageKey;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var RelayRecordProxy = /*#__PURE__*/function () {
  function RelayRecordProxy(source, mutator, dataID) {
    this._dataID = dataID;
    this._mutator = mutator;
    this._source = source;
  }
  var _proto = RelayRecordProxy.prototype;
  _proto.copyFieldsFrom = function copyFieldsFrom(source) {
    this._mutator.copyFields(source.getDataID(), this._dataID);
  };
  _proto.getDataID = function getDataID() {
    return this._dataID;
  };
  _proto.getType = function getType() {
    var type = this._mutator.getType(this._dataID);
    !(type != null) ?  true ? invariant(false, 'RelayRecordProxy: Cannot get the type of deleted record `%s`.', this._dataID) : 0 : void 0;
    return type;
  };
  _proto.getValue = function getValue(name, args) {
    var storageKey = getStableStorageKey(name, args);
    return this._mutator.getValue(this._dataID, storageKey);
  };
  _proto.setValue = function setValue(value, name, args) {
    !isValidLeafValue(value) ?  true ? invariant(false, 'RelayRecordProxy#setValue(): Expected a scalar or array of scalars, ' + 'got `%s`.', JSON.stringify(value)) : 0 : void 0;
    return this.setValue__UNSAFE(value, name, args);
  };
  _proto.setValue__UNSAFE = function setValue__UNSAFE(value, name, args) {
    var storageKey = getStableStorageKey(name, args);
    this._mutator.setValue(this._dataID, storageKey, value);
    return this;
  };
  _proto.getLinkedRecord = function getLinkedRecord(name, args) {
    var storageKey = getStableStorageKey(name, args);
    var linkedID = this._mutator.getLinkedRecordID(this._dataID, storageKey);
    return linkedID != null ? this._source.get(linkedID) : linkedID;
  };
  _proto.setLinkedRecord = function setLinkedRecord(record, name, args) {
    !(record instanceof RelayRecordProxy) ?  true ? invariant(false, 'RelayRecordProxy#setLinkedRecord(): Expected a record, got `%s`.', record) : 0 : void 0;
    var storageKey = getStableStorageKey(name, args);
    var linkedID = record.getDataID();
    this._mutator.setLinkedRecordID(this._dataID, storageKey, linkedID);
    return this;
  };
  _proto.getOrCreateLinkedRecord = function getOrCreateLinkedRecord(name, typeName, args) {
    var linkedRecord = this.getLinkedRecord(name, args);
    if (!linkedRecord) {
      var _this$_source$get;
      var storageKey = getStableStorageKey(name, args);
      var clientID = generateClientID(this.getDataID(), storageKey);
      linkedRecord = (_this$_source$get = this._source.get(clientID)) !== null && _this$_source$get !== void 0 ? _this$_source$get : this._source.create(clientID, typeName);
      this.setLinkedRecord(linkedRecord, name, args);
    }
    return linkedRecord;
  };
  _proto.getLinkedRecords = function getLinkedRecords(name, args) {
    var _this = this;
    var storageKey = getStableStorageKey(name, args);
    var linkedIDs = this._mutator.getLinkedRecordIDs(this._dataID, storageKey);
    if (linkedIDs == null) {
      return linkedIDs;
    }
    return linkedIDs.map(function (linkedID) {
      return linkedID != null ? _this._source.get(linkedID) : linkedID;
    });
  };
  _proto.setLinkedRecords = function setLinkedRecords(records, name, args) {
    !Array.isArray(records) ?  true ? invariant(false, 'RelayRecordProxy#setLinkedRecords(): Expected records to be an array, got `%s`.', records) : 0 : void 0;
    var storageKey = getStableStorageKey(name, args);
    var linkedIDs = records.map(function (record) {
      return record && record.getDataID();
    });
    this._mutator.setLinkedRecordIDs(this._dataID, storageKey, linkedIDs);
    return this;
  };
  _proto.invalidateRecord = function invalidateRecord() {
    this._source.markIDForInvalidation(this._dataID);
  };
  return RelayRecordProxy;
}();
function isValidLeafValue(value) {
  return value == null || typeof value !== 'object' || Array.isArray(value) && value.every(isValidLeafValue);
}
module.exports = RelayRecordProxy;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayRecordSourceMutator.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var RelayModernRecord = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayRecordState.js"),
  EXISTENT = _require.EXISTENT;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var RelayRecordSourceMutator = /*#__PURE__*/function () {
  function RelayRecordSourceMutator(base, sink) {
    this.__sources = [sink, base];
    this._base = base;
    this._sink = sink;
  }
  var _proto = RelayRecordSourceMutator.prototype;
  _proto.unstable_getRawRecordWithChanges = function unstable_getRawRecordWithChanges(dataID) {
    var baseRecord = this._base.get(dataID);
    var sinkRecord = this._sink.get(dataID);
    if (sinkRecord === undefined) {
      if (baseRecord == null) {
        return baseRecord;
      }
      var nextRecord = RelayModernRecord.clone(baseRecord);
      if (true) {
        RelayModernRecord.freeze(nextRecord);
      }
      return nextRecord;
    } else if (sinkRecord === null) {
      return null;
    } else if (baseRecord != null) {
      var _nextRecord = RelayModernRecord.update(baseRecord, sinkRecord);
      if (true) {
        if (_nextRecord !== baseRecord) {
          RelayModernRecord.freeze(_nextRecord);
        }
      }
      return _nextRecord;
    } else {
      var _nextRecord2 = RelayModernRecord.clone(sinkRecord);
      if (true) {
        RelayModernRecord.freeze(_nextRecord2);
      }
      return _nextRecord2;
    }
  };
  _proto._getSinkRecord = function _getSinkRecord(dataID) {
    var sinkRecord = this._sink.get(dataID);
    if (!sinkRecord) {
      var baseRecord = this._base.get(dataID);
      !baseRecord ?  true ? invariant(false, 'RelayRecordSourceMutator: Cannot modify non-existent record `%s`.', dataID) : 0 : void 0;
      sinkRecord = RelayModernRecord.create(dataID, RelayModernRecord.getType(baseRecord));
      this._sink.set(dataID, sinkRecord);
    }
    return sinkRecord;
  };
  _proto.copyFields = function copyFields(sourceID, sinkID) {
    var sinkSource = this._sink.get(sourceID);
    var baseSource = this._base.get(sourceID);
    !(sinkSource || baseSource) ?  true ? invariant(false, 'RelayRecordSourceMutator#copyFields(): Cannot copy fields from ' + 'non-existent record `%s`.', sourceID) : 0 : void 0;
    var sink = this._getSinkRecord(sinkID);
    if (baseSource) {
      RelayModernRecord.copyFields(baseSource, sink);
    }
    if (sinkSource) {
      RelayModernRecord.copyFields(sinkSource, sink);
    }
  };
  _proto.copyFieldsFromRecord = function copyFieldsFromRecord(record, sinkID) {
    var sink = this._getSinkRecord(sinkID);
    RelayModernRecord.copyFields(record, sink);
  };
  _proto.create = function create(dataID, typeName) {
    !(this._base.getStatus(dataID) !== EXISTENT && this._sink.getStatus(dataID) !== EXISTENT) ?  true ? invariant(false, 'RelayRecordSourceMutator#create(): Cannot create a record with id ' + '`%s`, this record already exists.', dataID) : 0 : void 0;
    var record = RelayModernRecord.create(dataID, typeName);
    this._sink.set(dataID, record);
  };
  _proto["delete"] = function _delete(dataID) {
    this._sink["delete"](dataID);
  };
  _proto.getStatus = function getStatus(dataID) {
    return this._sink.has(dataID) ? this._sink.getStatus(dataID) : this._base.getStatus(dataID);
  };
  _proto.getType = function getType(dataID) {
    for (var ii = 0; ii < this.__sources.length; ii++) {
      var record = this.__sources[ii].get(dataID);
      if (record) {
        return RelayModernRecord.getType(record);
      } else if (record === null) {
        return null;
      }
    }
  };
  _proto.getValue = function getValue(dataID, storageKey) {
    for (var ii = 0; ii < this.__sources.length; ii++) {
      var record = this.__sources[ii].get(dataID);
      if (record) {
        var value = RelayModernRecord.getValue(record, storageKey);
        if (value !== undefined) {
          return value;
        }
      } else if (record === null) {
        return null;
      }
    }
  };
  _proto.setValue = function setValue(dataID, storageKey, value) {
    var sinkRecord = this._getSinkRecord(dataID);
    RelayModernRecord.setValue(sinkRecord, storageKey, value);
  };
  _proto.getLinkedRecordID = function getLinkedRecordID(dataID, storageKey) {
    for (var ii = 0; ii < this.__sources.length; ii++) {
      var record = this.__sources[ii].get(dataID);
      if (record) {
        var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
        if (linkedID !== undefined) {
          return linkedID;
        }
      } else if (record === null) {
        return null;
      }
    }
  };
  _proto.setLinkedRecordID = function setLinkedRecordID(dataID, storageKey, linkedID) {
    var sinkRecord = this._getSinkRecord(dataID);
    RelayModernRecord.setLinkedRecordID(sinkRecord, storageKey, linkedID);
  };
  _proto.getLinkedRecordIDs = function getLinkedRecordIDs(dataID, storageKey) {
    for (var ii = 0; ii < this.__sources.length; ii++) {
      var record = this.__sources[ii].get(dataID);
      if (record) {
        var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
        if (linkedIDs !== undefined) {
          return linkedIDs;
        }
      } else if (record === null) {
        return null;
      }
    }
  };
  _proto.setLinkedRecordIDs = function setLinkedRecordIDs(dataID, storageKey, linkedIDs) {
    var sinkRecord = this._getSinkRecord(dataID);
    RelayModernRecord.setLinkedRecordIDs(sinkRecord, storageKey, linkedIDs);
  };
  return RelayRecordSourceMutator;
}();
module.exports = RelayRecordSourceMutator;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayRecordSourceProxy.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var RelayModernRecord = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayRecordState.js"),
  EXISTENT = _require.EXISTENT,
  NONEXISTENT = _require.NONEXISTENT;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  ROOT_ID = _require2.ROOT_ID,
  ROOT_TYPE = _require2.ROOT_TYPE;
var _require3 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/readUpdatableFragment.js"),
  _readUpdatableFragment = _require3.readUpdatableFragment;
var _require4 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/readUpdatableQuery.js"),
  _readUpdatableQuery = _require4.readUpdatableQuery;
var RelayRecordProxy = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayRecordProxy.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var RelayRecordSourceProxy = /*#__PURE__*/function () {
  function RelayRecordSourceProxy(mutator, getDataID, handlerProvider, missingFieldHandlers) {
    this.__mutator = mutator;
    this._handlerProvider = handlerProvider || null;
    this._proxies = {};
    this._getDataID = getDataID;
    this._invalidatedStore = false;
    this._idsMarkedForInvalidation = new Set();
    this._missingFieldHandlers = missingFieldHandlers;
  }
  var _proto = RelayRecordSourceProxy.prototype;
  _proto.publishSource = function publishSource(source, fieldPayloads) {
    var _this = this;
    var dataIDs = source.getRecordIDs();
    dataIDs.forEach(function (dataID) {
      var status = source.getStatus(dataID);
      if (status === EXISTENT) {
        var sourceRecord = source.get(dataID);
        if (sourceRecord) {
          if (_this.__mutator.getStatus(dataID) !== EXISTENT) {
            _this.create(dataID, RelayModernRecord.getType(sourceRecord));
          }
          _this.__mutator.copyFieldsFromRecord(sourceRecord, dataID);
        }
      } else if (status === NONEXISTENT) {
        _this["delete"](dataID);
      }
    });
    if (fieldPayloads && fieldPayloads.length) {
      fieldPayloads.forEach(function (fieldPayload) {
        var handler = _this._handlerProvider && _this._handlerProvider(fieldPayload.handle);
        !handler ?  true ? invariant(false, 'RelayModernEnvironment: Expected a handler to be provided for handle `%s`.', fieldPayload.handle) : 0 : void 0;
        handler.update(_this, fieldPayload);
      });
    }
  };
  _proto.create = function create(dataID, typeName) {
    this.__mutator.create(dataID, typeName);
    delete this._proxies[dataID];
    var record = this.get(dataID);
    !record ?  true ? invariant(false, 'RelayRecordSourceProxy#create(): Expected the created record to exist.') : 0 : void 0;
    return record;
  };
  _proto["delete"] = function _delete(dataID) {
    !(dataID !== ROOT_ID) ?  true ? invariant(false, 'RelayRecordSourceProxy#delete(): Cannot delete the root record.') : 0 : void 0;
    delete this._proxies[dataID];
    this.__mutator["delete"](dataID);
  };
  _proto.get = function get(dataID) {
    if (!this._proxies.hasOwnProperty(dataID)) {
      var status = this.__mutator.getStatus(dataID);
      if (status === EXISTENT) {
        this._proxies[dataID] = new RelayRecordProxy(this, this.__mutator, dataID);
      } else {
        this._proxies[dataID] = status === NONEXISTENT ? null : undefined;
      }
    }
    return this._proxies[dataID];
  };
  _proto.getRoot = function getRoot() {
    var root = this.get(ROOT_ID);
    if (!root) {
      root = this.create(ROOT_ID, ROOT_TYPE);
    }
    !(root && root.getType() === ROOT_TYPE) ?  true ? invariant(false, 'RelayRecordSourceProxy#getRoot(): Expected the source to contain a ' + 'root record, %s.', root == null ? 'no root record found' : "found a root record of type `".concat(root.getType(), "`")) : 0 : void 0;
    return root;
  };
  _proto.invalidateStore = function invalidateStore() {
    this._invalidatedStore = true;
  };
  _proto.isStoreMarkedForInvalidation = function isStoreMarkedForInvalidation() {
    return this._invalidatedStore;
  };
  _proto.markIDForInvalidation = function markIDForInvalidation(dataID) {
    this._idsMarkedForInvalidation.add(dataID);
  };
  _proto.getIDsMarkedForInvalidation = function getIDsMarkedForInvalidation() {
    return this._idsMarkedForInvalidation;
  };
  _proto.readUpdatableQuery = function readUpdatableQuery(query, variables) {
    return _readUpdatableQuery(query, variables, this, this._missingFieldHandlers);
  };
  _proto.readUpdatableFragment = function readUpdatableFragment(fragment, fragmentReference) {
    return _readUpdatableFragment(fragment, fragmentReference, this, this._missingFieldHandlers);
  };
  return RelayRecordSourceProxy;
}();
module.exports = RelayRecordSourceProxy;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayRecordSourceSelectorProxy.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  ROOT_TYPE = _require.ROOT_TYPE,
  getStorageKey = _require.getStorageKey;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/readUpdatableFragment.js"),
  _readUpdatableFragment = _require2.readUpdatableFragment;
var _require3 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/readUpdatableQuery.js"),
  _readUpdatableQuery = _require3.readUpdatableQuery;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var RelayRecordSourceSelectorProxy = /*#__PURE__*/function () {
  function RelayRecordSourceSelectorProxy(mutator, recordSource, readSelector, missingFieldHandlers) {
    this.__mutator = mutator;
    this.__recordSource = recordSource;
    this._readSelector = readSelector;
    this._missingFieldHandlers = missingFieldHandlers;
  }
  var _proto = RelayRecordSourceSelectorProxy.prototype;
  _proto.create = function create(dataID, typeName) {
    return this.__recordSource.create(dataID, typeName);
  };
  _proto["delete"] = function _delete(dataID) {
    this.__recordSource["delete"](dataID);
  };
  _proto.get = function get(dataID) {
    return this.__recordSource.get(dataID);
  };
  _proto.getRoot = function getRoot() {
    return this.__recordSource.getRoot();
  };
  _proto.getOperationRoot = function getOperationRoot() {
    var root = this.__recordSource.get(this._readSelector.dataID);
    if (!root) {
      root = this.__recordSource.create(this._readSelector.dataID, ROOT_TYPE);
    }
    return root;
  };
  _proto._getRootField = function _getRootField(selector, fieldName, plural) {
    var field = selector.node.selections.find(function (selection) {
      return selection.kind === 'LinkedField' && selection.name === fieldName || selection.kind === 'RequiredField' && selection.field.name === fieldName;
    });
    if (field && field.kind === 'RequiredField') {
      field = field.field;
    }
    !(field && field.kind === 'LinkedField') ?  true ? invariant(false, 'RelayRecordSourceSelectorProxy#getRootField(): Cannot find root ' + 'field `%s`, no such field is defined on GraphQL document `%s`.', fieldName, selector.node.name) : 0 : void 0;
    !(field.plural === plural) ?  true ? invariant(false, 'RelayRecordSourceSelectorProxy#getRootField(): Expected root field ' + '`%s` to be %s.', fieldName, plural ? 'plural' : 'singular') : 0 : void 0;
    return field;
  };
  _proto.getRootField = function getRootField(fieldName) {
    var field = this._getRootField(this._readSelector, fieldName, false);
    var storageKey = getStorageKey(field, this._readSelector.variables);
    return this.getOperationRoot().getLinkedRecord(storageKey);
  };
  _proto.getPluralRootField = function getPluralRootField(fieldName) {
    var field = this._getRootField(this._readSelector, fieldName, true);
    var storageKey = getStorageKey(field, this._readSelector.variables);
    return this.getOperationRoot().getLinkedRecords(storageKey);
  };
  _proto.invalidateStore = function invalidateStore() {
    this.__recordSource.invalidateStore();
  };
  _proto.readUpdatableQuery = function readUpdatableQuery(query, variables) {
    return _readUpdatableQuery(query, variables, this, this._missingFieldHandlers);
  };
  _proto.readUpdatableFragment = function readUpdatableFragment(fragment, fragmentReference) {
    return _readUpdatableFragment(fragment, fragmentReference, this, this._missingFieldHandlers);
  };
  return RelayRecordSourceSelectorProxy;
}();
module.exports = RelayRecordSourceSelectorProxy;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/applyOptimisticMutation.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/GraphQLTag.js"),
  getRequest = _require.getRequest;
var isRelayModernEnvironment = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/isRelayModernEnvironment.js");
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js"),
  createOperationDescriptor = _require2.createOperationDescriptor;
var RelayDeclarativeMutationConfig = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayDeclarativeMutationConfig.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function applyOptimisticMutation(environment, config) {
  !isRelayModernEnvironment(environment) ?  true ? invariant(false, 'commitMutation: expected `environment` to be an instance of ' + '`RelayModernEnvironment`.') : 0 : void 0;
  var mutation = getRequest(config.mutation);
  if (mutation.params.operationKind !== 'mutation') {
    throw new Error('commitMutation: Expected mutation operation');
  }
  var optimisticUpdater = config.optimisticUpdater;
  var configs = config.configs,
    optimisticResponse = config.optimisticResponse,
    variables = config.variables;
  var operation = createOperationDescriptor(mutation, variables);
  if (configs) {
    var _RelayDeclarativeMuta = RelayDeclarativeMutationConfig.convert(configs, mutation, optimisticUpdater);
    optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;
  }
  return environment.applyMutation({
    operation: operation,
    response: optimisticResponse,
    updater: optimisticUpdater
  });
}
module.exports = applyOptimisticMutation;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/commitLocalUpdate.js": (function (module) {
"use strict";


function commitLocalUpdate(environment, updater) {
  environment.commitUpdate(updater);
}
module.exports = commitLocalUpdate;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/commitMutation.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _toConsumableArray2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/toConsumableArray.js"));
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/GraphQLTag.js"),
  getRequest = _require.getRequest;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ClientID.js"),
  generateUniqueClientID = _require2.generateUniqueClientID;
var isRelayModernEnvironment = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/isRelayModernEnvironment.js");
var _require3 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js"),
  createOperationDescriptor = _require3.createOperationDescriptor;
var RelayDeclarativeMutationConfig = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayDeclarativeMutationConfig.js");
var validateMutation = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/validateMutation.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
function commitMutation(environment, config) {
  !isRelayModernEnvironment(environment) ?  true ? invariant(false, 'commitMutation: expected `environment` to be an instance of ' + '`RelayModernEnvironment`.') : 0 : void 0;
  var mutation = getRequest(config.mutation);
  if (mutation.params.operationKind !== 'mutation') {
    throw new Error('commitMutation: Expected mutation operation');
  }
  if (mutation.kind !== 'Request') {
    throw new Error('commitMutation: Expected mutation to be of type request');
  }
  var optimisticResponse = config.optimisticResponse,
    optimisticUpdater = config.optimisticUpdater,
    updater = config.updater;
  var configs = config.configs,
    cacheConfig = config.cacheConfig,
    onError = config.onError,
    onUnsubscribe = config.onUnsubscribe,
    variables = config.variables,
    uploadables = config.uploadables;
  var operation = createOperationDescriptor(mutation, variables, cacheConfig, generateUniqueClientID());
  if (typeof optimisticResponse === 'function') {
    optimisticResponse = optimisticResponse();
     true ? warning(false, 'commitMutation: Expected `optimisticResponse` to be an object, ' + 'received a function.') : 0;
  }
  if (true) {
    if (optimisticResponse instanceof Object) {
      validateMutation(optimisticResponse, mutation, variables);
    }
  }
  if (configs) {
    var _RelayDeclarativeMuta = RelayDeclarativeMutationConfig.convert(configs, mutation, optimisticUpdater, updater);
    optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;
    updater = _RelayDeclarativeMuta.updater;
  }
  var errors = [];
  var subscription = environment.executeMutation({
    operation: operation,
    optimisticResponse: optimisticResponse,
    optimisticUpdater: optimisticUpdater,
    updater: updater,
    uploadables: uploadables
  }).subscribe({
    next: function next(payload) {
      var _config$onNext;
      if (Array.isArray(payload)) {
        payload.forEach(function (item) {
          if (item.errors) {
            errors.push.apply(errors, (0, _toConsumableArray2["default"])(item.errors));
          }
        });
      } else {
        if (payload.errors) {
          errors.push.apply(errors, (0, _toConsumableArray2["default"])(payload.errors));
        }
      }
      (_config$onNext = config.onNext) === null || _config$onNext === void 0 ? void 0 : _config$onNext.call(config);
    },
    complete: function complete() {
      var onCompleted = config.onCompleted;
      if (onCompleted) {
        var snapshot = environment.lookup(operation.fragment);
        onCompleted(snapshot.data, errors.length !== 0 ? errors : null);
      }
    },
    error: onError,
    unsubscribe: onUnsubscribe
  });
  return {
    dispose: subscription.unsubscribe
  };
}
module.exports = commitMutation;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/createUpdatableProxy.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  getArgumentValues = _require.getArgumentValues;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js"),
  ACTOR_CHANGE = _require2.ACTOR_CHANGE,
  ALIASED_FRAGMENT_SPREAD = _require2.ALIASED_FRAGMENT_SPREAD,
  ALIASED_INLINE_FRAGMENT_SPREAD = _require2.ALIASED_INLINE_FRAGMENT_SPREAD,
  CLIENT_EDGE_TO_CLIENT_OBJECT = _require2.CLIENT_EDGE_TO_CLIENT_OBJECT,
  CLIENT_EDGE_TO_SERVER_OBJECT = _require2.CLIENT_EDGE_TO_SERVER_OBJECT,
  CLIENT_EXTENSION = _require2.CLIENT_EXTENSION,
  CONDITION = _require2.CONDITION,
  DEFER = _require2.DEFER,
  FRAGMENT_SPREAD = _require2.FRAGMENT_SPREAD,
  INLINE_DATA_FRAGMENT_SPREAD = _require2.INLINE_DATA_FRAGMENT_SPREAD,
  INLINE_FRAGMENT = _require2.INLINE_FRAGMENT,
  LINKED_FIELD = _require2.LINKED_FIELD,
  MODULE_IMPORT = _require2.MODULE_IMPORT,
  RELAY_LIVE_RESOLVER = _require2.RELAY_LIVE_RESOLVER,
  RELAY_RESOLVER = _require2.RELAY_RESOLVER,
  REQUIRED_FIELD = _require2.REQUIRED_FIELD,
  SCALAR_FIELD = _require2.SCALAR_FIELD,
  STREAM = _require2.STREAM;
var nonUpdatableKeys = ['id', '__id', '__typename', 'js'];
function createUpdatableProxy(updatableProxyRootRecord, variables, selections, recordSourceProxy, missingFieldHandlers) {
  var mutableUpdatableProxy = {};
  updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selections, recordSourceProxy, missingFieldHandlers);
  if (true) {
    Object.freeze(mutableUpdatableProxy);
  }
  return mutableUpdatableProxy;
}
function updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selections, recordSourceProxy, missingFieldHandlers) {
  var _selection$alias3;
  var _iterator = (0, _createForOfIteratorHelper2["default"])(selections),
    _step;
  try {
    var _loop = function _loop() {
      var selection = _step.value;
      switch (selection.kind) {
        case LINKED_FIELD:
          if (selection.plural) {
            Object.defineProperty(mutableUpdatableProxy, (_selection$alias = selection.alias) !== null && _selection$alias !== void 0 ? _selection$alias : selection.name, {
              get: createGetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers),
              set: createSetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy)
            });
          } else {
            Object.defineProperty(mutableUpdatableProxy, (_selection$alias2 = selection.alias) !== null && _selection$alias2 !== void 0 ? _selection$alias2 : selection.name, {
              get: createGetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers),
              set: createSetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy)
            });
          }
          break;
        case SCALAR_FIELD:
          var scalarFieldName = (_selection$alias3 = selection.alias) !== null && _selection$alias3 !== void 0 ? _selection$alias3 : selection.name;
          Object.defineProperty(mutableUpdatableProxy, scalarFieldName, {
            get: function get() {
              var _selection$args;
              var newVariables = getArgumentValues((_selection$args = selection.args) !== null && _selection$args !== void 0 ? _selection$args : [], variables);
              var value = updatableProxyRootRecord.getValue(selection.name, newVariables);
              if (value == null) {
                value = getScalarUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers);
              }
              return value;
            },
            set: nonUpdatableKeys.includes(selection.name) ? undefined : function (newValue) {
              var _selection$args2;
              var newVariables = getArgumentValues((_selection$args2 = selection.args) !== null && _selection$args2 !== void 0 ? _selection$args2 : [], variables);
              updatableProxyRootRecord.setValue__UNSAFE(newValue, selection.name, newVariables);
            }
          });
          break;
        case INLINE_FRAGMENT:
          if (updatableProxyRootRecord.getType() === selection.type) {
            updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selection.selections, recordSourceProxy, missingFieldHandlers);
          }
          break;
        case CLIENT_EXTENSION:
          updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selection.selections, recordSourceProxy, missingFieldHandlers);
          break;
        case FRAGMENT_SPREAD:
          break;
        case CONDITION:
        case ACTOR_CHANGE:
        case ALIASED_FRAGMENT_SPREAD:
        case INLINE_DATA_FRAGMENT_SPREAD:
        case ALIASED_INLINE_FRAGMENT_SPREAD:
        case CLIENT_EDGE_TO_CLIENT_OBJECT:
        case CLIENT_EDGE_TO_SERVER_OBJECT:
        case DEFER:
        case MODULE_IMPORT:
        case RELAY_LIVE_RESOLVER:
        case REQUIRED_FIELD:
        case STREAM:
        case RELAY_RESOLVER:
          throw new Error('Encountered an unexpected ReaderSelection variant in RelayRecordSourceProxy. This indicates a bug in Relay.');
        default:
          selection.kind;
          throw new Error('Encountered an unexpected ReaderSelection variant in RelayRecordSourceProxy. This indicates a bug in Relay.');
      }
    };
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _selection$alias;
      var _selection$alias2;
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
function createSetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {
  return function set(newValue) {
    var _selection$args3;
    var newVariables = getArgumentValues((_selection$args3 = selection.args) !== null && _selection$args3 !== void 0 ? _selection$args3 : [], variables);
    if (newValue == null) {
      throw new Error('Do not assign null to plural linked fields; assign an empty array instead.');
    } else {
      var recordProxies = newValue.map(function (item) {
        if (item == null) {
          throw new Error('When assigning an array of items, none of the items should be null or undefined.');
        }
        var __id = item.__id;
        if (__id == null) {
          throw new Error('The __id field must be present on each item passed to the setter. This indicates a bug in Relay.');
        }
        var newValueRecord = recordSourceProxy.get(__id);
        if (newValueRecord == null) {
          throw new Error("Did not find item with data id ".concat(__id, " in the store."));
        }
        return newValueRecord;
      });
      updatableProxyRootRecord.setLinkedRecords(recordProxies, selection.name, newVariables);
    }
  };
}
function createSetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {
  return function set(newValue) {
    var _selection$args4;
    var newVariables = getArgumentValues((_selection$args4 = selection.args) !== null && _selection$args4 !== void 0 ? _selection$args4 : [], variables);
    if (newValue == null) {
      updatableProxyRootRecord.setValue(newValue, selection.name, newVariables);
    } else {
      var __id = newValue.__id;
      if (__id == null) {
        throw new Error('The __id field must be present on the argument. This indicates a bug in Relay.');
      }
      var newValueRecord = recordSourceProxy.get(__id);
      if (newValueRecord == null) {
        throw new Error("Did not find item with data id ".concat(__id, " in the store."));
      }
      updatableProxyRootRecord.setLinkedRecord(newValueRecord, selection.name, newVariables);
    }
  };
}
function createGetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
  return function () {
    var _selection$args5;
    var newVariables = getArgumentValues((_selection$args5 = selection.args) !== null && _selection$args5 !== void 0 ? _selection$args5 : [], variables);
    var linkedRecords = updatableProxyRootRecord.getLinkedRecords(selection.name, newVariables);
    if (linkedRecords === undefined) {
      linkedRecords = getPluralLinkedRecordUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers);
    }
    if (linkedRecords != null) {
      return linkedRecords.map(function (linkedRecord) {
        if (linkedRecord != null) {
          var updatableProxy = {};
          updateProxyFromSelections(updatableProxy, linkedRecord, variables, selection.selections, recordSourceProxy, missingFieldHandlers);
          if (true) {
            Object.freeze(updatableProxy);
          }
          return updatableProxy;
        } else {
          return linkedRecord;
        }
      });
    } else {
      return linkedRecords;
    }
  };
}
function createGetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
  return function () {
    var _selection$args6;
    var newVariables = getArgumentValues((_selection$args6 = selection.args) !== null && _selection$args6 !== void 0 ? _selection$args6 : [], variables);
    var linkedRecord = updatableProxyRootRecord.getLinkedRecord(selection.name, newVariables);
    if (linkedRecord === undefined) {
      linkedRecord = getLinkedRecordUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers);
    }
    if (linkedRecord != null) {
      var updatableProxy = {};
      updateProxyFromSelections(updatableProxy, linkedRecord, variables, selection.selections, recordSourceProxy, missingFieldHandlers);
      if (true) {
        Object.freeze(updatableProxy);
      }
      return updatableProxy;
    } else {
      return linkedRecord;
    }
  };
}
function getLinkedRecordUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
  var _iterator2 = (0, _createForOfIteratorHelper2["default"])(missingFieldHandlers),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var handler = _step2.value;
      if (handler.kind === 'linked') {
        var newId = handler.handle(selection, updatableProxyRootRecord, newVariables, recordSourceProxy);
        if (newId != null) {
          return recordSourceProxy.get(newId);
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}
function getPluralLinkedRecordUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
  var _iterator3 = (0, _createForOfIteratorHelper2["default"])(missingFieldHandlers),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var handler = _step3.value;
      if (handler.kind === 'pluralLinked') {
        var newIds = handler.handle(selection, updatableProxyRootRecord, newVariables, recordSourceProxy);
        if (newIds != null) {
          return newIds.map(function (newId) {
            if (newId != null) {
              return recordSourceProxy.get(newId);
            }
          });
        }
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
}
function getScalarUsingMissingFieldHandlers(selection, newVariables, updatableProxyRootRecord, recordSourceProxy, missingFieldHandlers) {
  var _iterator4 = (0, _createForOfIteratorHelper2["default"])(missingFieldHandlers),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var handler = _step4.value;
      if (handler.kind === 'scalar') {
        var value = handler.handle(selection, updatableProxyRootRecord, newVariables, recordSourceProxy);
        if (value !== undefined) {
          return value;
        }
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
}
module.exports = {
  createUpdatableProxy: createUpdatableProxy
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/readUpdatableFragment.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/GraphQLTag.js"),
  getFragment = _require.getFragment;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernSelector.js"),
  getVariablesFromFragment = _require2.getVariablesFromFragment;
var _require3 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  ID_KEY = _require3.ID_KEY;
var _require4 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/createUpdatableProxy.js"),
  createUpdatableProxy = _require4.createUpdatableProxy;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function readUpdatableFragment(fragment, fragmentReference, proxy, missingFieldHandlers) {
  var updatableFragment = getFragment(fragment);
  var fragmentVariables = getVariablesFromFragment(updatableFragment, fragmentReference);
  var id = fragmentReference[ID_KEY];
  var fragmentRoot = proxy.get(id);
  !(fragmentRoot != null) ?  true ? invariant(false, "No record with ".concat(id, " was found. This likely indicates a problem with Relay.")) : 0 : void 0;
  return {
    updatableData: createUpdatableProxy(fragmentRoot, fragmentVariables, updatableFragment.selections, proxy, missingFieldHandlers)
  };
}
module.exports = {
  readUpdatableFragment: readUpdatableFragment
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/readUpdatableQuery.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/GraphQLTag.js"),
  getUpdatableQuery = _require.getUpdatableQuery;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/createUpdatableProxy.js"),
  createUpdatableProxy = _require2.createUpdatableProxy;
function readUpdatableQuery(query, variables, proxy, missingFieldHandlers) {
  var updatableQuery = getUpdatableQuery(query);
  return {
    updatableData: createUpdatableProxy(proxy.getRoot(), variables, updatableQuery.fragment.selections, proxy, missingFieldHandlers)
  };
}
module.exports = {
  readUpdatableQuery: readUpdatableQuery
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/validateMutation.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js"));
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js"),
  ACTOR_CHANGE = _require.ACTOR_CHANGE,
  CLIENT_COMPONENT = _require.CLIENT_COMPONENT,
  CLIENT_EDGE_TO_CLIENT_OBJECT = _require.CLIENT_EDGE_TO_CLIENT_OBJECT,
  CLIENT_EXTENSION = _require.CLIENT_EXTENSION,
  CONDITION = _require.CONDITION,
  DEFER = _require.DEFER,
  FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD,
  INLINE_FRAGMENT = _require.INLINE_FRAGMENT,
  LINKED_FIELD = _require.LINKED_FIELD,
  LINKED_HANDLE = _require.LINKED_HANDLE,
  MODULE_IMPORT = _require.MODULE_IMPORT,
  RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER,
  RELAY_RESOLVER = _require.RELAY_RESOLVER,
  SCALAR_FIELD = _require.SCALAR_FIELD,
  SCALAR_HANDLE = _require.SCALAR_HANDLE,
  STREAM = _require.STREAM,
  TYPE_DISCRIMINATOR = _require.TYPE_DISCRIMINATOR;
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
var hasOwnProperty = Object.prototype.hasOwnProperty;
var validateMutation = function validateMutation() {};
if (true) {
  var addFieldToDiff = function addFieldToDiff(path, diff, isScalar) {
    var deepLoc = diff;
    path.split('.').forEach(function (key, index, arr) {
      if (deepLoc[key] == null) {
        deepLoc[key] = {};
      }
      if (isScalar && index === arr.length - 1) {
        deepLoc[key] = '<scalar>';
      }
      deepLoc = deepLoc[key];
    });
  };
  validateMutation = function validateMutation(optimisticResponse, mutation, variables) {
    var operationName = mutation.operation.name;
    var context = {
      path: 'ROOT',
      visitedPaths: new Set(),
      variables: variables || {},
      missingDiff: {},
      extraDiff: {},
      moduleImportPaths: new Set()
    };
    validateSelections(optimisticResponse, mutation.operation.selections, context);
    validateOptimisticResponse(optimisticResponse, context);
     true ? warning(context.missingDiff.ROOT == null, 'Expected `optimisticResponse` to match structure of server response for mutation `%s`, please define fields for all of\n%s', operationName, JSON.stringify(context.missingDiff.ROOT, null, 2)) : 0;
     true ? warning(context.extraDiff.ROOT == null, 'Expected `optimisticResponse` to match structure of server response for mutation `%s`, please remove all fields of\n%s', operationName, JSON.stringify(context.extraDiff.ROOT, null, 2)) : 0;
  };
  var validateSelections = function validateSelections(optimisticResponse, selections, context) {
    selections.forEach(function (selection) {
      return validateSelection(optimisticResponse, selection, context);
    });
  };
  var validateSelection = function validateSelection(optimisticResponse, selection, context) {
    switch (selection.kind) {
      case CONDITION:
        validateSelections(optimisticResponse, selection.selections, context);
        return;
      case CLIENT_COMPONENT:
      case FRAGMENT_SPREAD:
        validateSelections(optimisticResponse, selection.fragment.selections, context);
        return;
      case SCALAR_FIELD:
      case LINKED_FIELD:
        return validateField(optimisticResponse, selection, context);
      case ACTOR_CHANGE:
        return validateField(optimisticResponse, selection.linkedField, context);
      case INLINE_FRAGMENT:
        var type = selection.type;
        var isConcreteType = selection.abstractKey == null;
        validateAbstractKey(context, selection.abstractKey);
        selection.selections.forEach(function (subselection) {
          if (isConcreteType && optimisticResponse.__typename !== type) {
            return;
          }
          validateSelection(optimisticResponse, subselection, context);
        });
        return;
      case CLIENT_EXTENSION:
        selection.selections.forEach(function (subselection) {
          validateSelection(optimisticResponse, subselection, context);
        });
        return;
      case MODULE_IMPORT:
        return validateModuleImport(context);
      case TYPE_DISCRIMINATOR:
        return validateAbstractKey(context, selection.abstractKey);
      case RELAY_RESOLVER:
      case RELAY_LIVE_RESOLVER:
      case CLIENT_EDGE_TO_CLIENT_OBJECT:
      case LINKED_HANDLE:
      case SCALAR_HANDLE:
      case DEFER:
      case STREAM:
        {
          return;
        }
      default:
        selection;
        return;
    }
  };
  var validateModuleImport = function validateModuleImport(context) {
    context.moduleImportPaths.add(context.path);
  };
  var validateAbstractKey = function validateAbstractKey(context, abstractKey) {
    if (abstractKey != null) {
      var path = "".concat(context.path, ".").concat(abstractKey);
      context.visitedPaths.add(path);
    }
  };
  var validateField = function validateField(optimisticResponse, field, context) {
    var fieldName = field.alias || field.name;
    var path = "".concat(context.path, ".").concat(fieldName);
    context.visitedPaths.add(path);
    switch (field.kind) {
      case SCALAR_FIELD:
        if (hasOwnProperty.call(optimisticResponse, fieldName) === false) {
          addFieldToDiff(path, context.missingDiff, true);
        }
        return;
      case LINKED_FIELD:
        var selections = field.selections;
        if (optimisticResponse[fieldName] === null || hasOwnProperty.call(optimisticResponse, fieldName) && optimisticResponse[fieldName] === undefined) {
          return;
        }
        if (field.plural) {
          if (Array.isArray(optimisticResponse[fieldName])) {
            optimisticResponse[fieldName].forEach(function (r) {
              if (r !== null) {
                validateSelections(r, selections, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, context), {}, {
                  path: path
                }));
              }
            });
            return;
          } else {
            addFieldToDiff(path, context.missingDiff);
            return;
          }
        } else {
          if (optimisticResponse[fieldName] instanceof Object) {
            validateSelections(optimisticResponse[fieldName], selections, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, context), {}, {
              path: path
            }));
            return;
          } else {
            addFieldToDiff(path, context.missingDiff);
            return;
          }
        }
    }
  };
  var validateOptimisticResponse = function validateOptimisticResponse(optimisticResponse, context) {
    if (Array.isArray(optimisticResponse)) {
      optimisticResponse.forEach(function (r) {
        if (r instanceof Object) {
          validateOptimisticResponse(r, context);
        }
      });
      return;
    }
    Object.keys(optimisticResponse).forEach(function (key) {
      var value = optimisticResponse[key];
      var path = "".concat(context.path, ".").concat(key);
      if (context.moduleImportPaths.has(path)) {
        return;
      }
      if (!context.visitedPaths.has(path)) {
        addFieldToDiff(path, context.extraDiff);
        return;
      }
      if (value instanceof Object) {
        validateOptimisticResponse(value, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, context), {}, {
          path: path
        }));
      }
    });
  };
}
module.exports = validateMutation;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/ConvertToExecuteFunction.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var RelayObservable = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/RelayObservable.js");
function convertFetch(fn) {
  return function fetch(request, variables, cacheConfig, uploadables, logRequestInfo) {
    var result = fn(request, variables, cacheConfig, uploadables, logRequestInfo);
    if (result instanceof Error) {
      return RelayObservable.create(function (sink) {
        return sink.error(result);
      });
    }
    return RelayObservable.from(result);
  };
}
module.exports = {
  convertFetch: convertFetch
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/RelayNetwork.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var withProvidedVariables = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/withProvidedVariables.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/ConvertToExecuteFunction.js"),
  convertFetch = _require.convertFetch;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function create(fetchFn, subscribe) {
  var observeFetch = convertFetch(fetchFn);
  function execute(request, variables, cacheConfig, uploadables, logRequestInfo) {
    var operationVariables = withProvidedVariables(variables, request.providedVariables);
    if (request.operationKind === 'subscription') {
      !subscribe ?  true ? invariant(false, 'RelayNetwork: This network layer does not support Subscriptions. ' + 'To use Subscriptions, provide a custom network layer.') : 0 : void 0;
      !!uploadables ?  true ? invariant(false, 'RelayNetwork: Cannot provide uploadables while subscribing.') : 0 : void 0;
      return subscribe(request, operationVariables, cacheConfig);
    }
    var pollInterval = cacheConfig.poll;
    if (pollInterval != null) {
      !!uploadables ?  true ? invariant(false, 'RelayNetwork: Cannot provide uploadables while polling.') : 0 : void 0;
      return observeFetch(request, operationVariables, {
        force: true
      }).poll(pollInterval);
    }
    return observeFetch(request, operationVariables, cacheConfig, uploadables, logRequestInfo);
  }
  return {
    execute: execute
  };
}
module.exports = {
  create: create
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/RelayObservable.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var isPromise = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/isPromise.js");
var hostReportError = swallowError;
var RelayObservable = /*#__PURE__*/function () {
  RelayObservable.create = function create(source) {
    return new RelayObservable(source);
  };
  function RelayObservable(source) {
    if (true) {
      if (!source || typeof source !== 'function') {
        throw new Error('Source must be a Function: ' + String(source));
      }
    }
    this._source = source;
  }
  RelayObservable.onUnhandledError = function onUnhandledError(callback) {
    hostReportError = callback;
  };
  RelayObservable.from = function from(obj) {
    return isObservable(obj) ? fromObservable(obj) : isPromise(obj) ? fromPromise(obj) : fromValue(obj);
  };
  var _proto = RelayObservable.prototype;
  _proto["catch"] = function _catch(fn) {
    var _this = this;
    return RelayObservable.create(function (sink) {
      var subscription;
      _this.subscribe({
        start: function start(sub) {
          subscription = sub;
        },
        next: sink.next,
        complete: sink.complete,
        error: function error(_error2) {
          try {
            fn(_error2).subscribe({
              start: function start(sub) {
                subscription = sub;
              },
              next: sink.next,
              complete: sink.complete,
              error: sink.error
            });
          } catch (error2) {
            sink.error(error2, true);
          }
        }
      });
      return function () {
        return subscription.unsubscribe();
      };
    });
  };
  _proto.concat = function concat(next) {
    var _this2 = this;
    return RelayObservable.create(function (sink) {
      var current;
      _this2.subscribe({
        start: function start(subscription) {
          current = subscription;
        },
        next: sink.next,
        error: sink.error,
        complete: function complete() {
          current = next.subscribe(sink);
        }
      });
      return function () {
        current && current.unsubscribe();
      };
    });
  };
  _proto["do"] = function _do(observer) {
    var _this3 = this;
    return RelayObservable.create(function (sink) {
      var both = function both(action) {
        return function () {
          try {
            observer[action] && observer[action].apply(observer, arguments);
          } catch (error) {
            hostReportError(error, true);
          }
          sink[action] && sink[action].apply(sink, arguments);
        };
      };
      return _this3.subscribe({
        start: both('start'),
        next: both('next'),
        error: both('error'),
        complete: both('complete'),
        unsubscribe: both('unsubscribe')
      });
    });
  };
  _proto["finally"] = function _finally(fn) {
    var _this4 = this;
    return RelayObservable.create(function (sink) {
      var subscription = _this4.subscribe(sink);
      return function () {
        subscription.unsubscribe();
        fn();
      };
    });
  };
  _proto.ifEmpty = function ifEmpty(alternate) {
    var _this5 = this;
    return RelayObservable.create(function (sink) {
      var hasValue = false;
      var current;
      current = _this5.subscribe({
        next: function next(value) {
          hasValue = true;
          sink.next(value);
        },
        error: sink.error,
        complete: function complete() {
          if (hasValue) {
            sink.complete();
          } else {
            current = alternate.subscribe(sink);
          }
        }
      });
      return function () {
        current && current.unsubscribe();
      };
    });
  };
  _proto.subscribe = function subscribe(observer) {
    if (true) {
      if (!observer || typeof observer !== 'object') {
        throw new Error('Observer must be an Object with callbacks: ' + String(observer));
      }
    }
    return _subscribe(this._source, observer);
  };
  _proto.map = function map(fn) {
    var _this6 = this;
    return RelayObservable.create(function (sink) {
      var subscription = _this6.subscribe({
        complete: sink.complete,
        error: sink.error,
        next: function next(value) {
          try {
            var mapValue = fn(value);
            sink.next(mapValue);
          } catch (error) {
            sink.error(error, true);
          }
        }
      });
      return function () {
        subscription.unsubscribe();
      };
    });
  };
  _proto.mergeMap = function mergeMap(fn) {
    var _this7 = this;
    return RelayObservable.create(function (sink) {
      var subscriptions = [];
      function start(subscription) {
        this._sub = subscription;
        subscriptions.push(subscription);
      }
      function complete() {
        subscriptions.splice(subscriptions.indexOf(this._sub), 1);
        if (subscriptions.length === 0) {
          sink.complete();
        }
      }
      _this7.subscribe({
        start: start,
        next: function next(value) {
          try {
            if (!sink.closed) {
              RelayObservable.from(fn(value)).subscribe({
                start: start,
                next: sink.next,
                error: sink.error,
                complete: complete
              });
            }
          } catch (error) {
            sink.error(error, true);
          }
        },
        error: sink.error,
        complete: complete
      });
      return function () {
        subscriptions.forEach(function (sub) {
          return sub.unsubscribe();
        });
        subscriptions.length = 0;
      };
    });
  };
  _proto.poll = function poll(pollInterval) {
    var _this8 = this;
    if (true) {
      if (typeof pollInterval !== 'number' || pollInterval <= 0) {
        throw new Error('RelayObservable: Expected pollInterval to be positive, got: ' + pollInterval);
      }
    }
    return RelayObservable.create(function (sink) {
      var subscription;
      var timeout;
      var poll = function poll() {
        subscription = _this8.subscribe({
          next: sink.next,
          error: sink.error,
          complete: function complete() {
            timeout = setTimeout(poll, pollInterval);
          }
        });
      };
      poll();
      return function () {
        clearTimeout(timeout);
        subscription.unsubscribe();
      };
    });
  };
  _proto.toPromise = function toPromise() {
    var _this9 = this;
    return new Promise(function (resolve, reject) {
      var resolved = false;
      _this9.subscribe({
        next: function next(val) {
          if (!resolved) {
            resolved = true;
            resolve(val);
          }
        },
        error: reject,
        complete: resolve
      });
    });
  };
  return RelayObservable;
}();
function isObservable(obj) {
  return typeof obj === 'object' && obj !== null && typeof obj.subscribe === 'function';
}
function fromObservable(obj) {
  return obj instanceof RelayObservable ? obj : RelayObservable.create(function (sink) {
    return obj.subscribe(sink);
  });
}
function fromPromise(promise) {
  return RelayObservable.create(function (sink) {
    promise.then(function (value) {
      sink.next(value);
      sink.complete();
    }, sink.error);
  });
}
function fromValue(value) {
  return RelayObservable.create(function (sink) {
    sink.next(value);
    sink.complete();
  });
}
function _subscribe(source, observer) {
  var closed = false;
  var cleanup;
  var withClosed = function withClosed(obj) {
    return Object.defineProperty(obj, 'closed', {
      get: function get() {
        return closed;
      }
    });
  };
  function doCleanup() {
    if (cleanup) {
      if (cleanup.unsubscribe) {
        cleanup.unsubscribe();
      } else {
        try {
          cleanup();
        } catch (error) {
          hostReportError(error, true);
        }
      }
      cleanup = undefined;
    }
  }
  var subscription = withClosed({
    unsubscribe: function unsubscribe() {
      if (!closed) {
        closed = true;
        try {
          observer.unsubscribe && observer.unsubscribe(subscription);
        } catch (error) {
          hostReportError(error, true);
        } finally {
          doCleanup();
        }
      }
    }
  });
  try {
    observer.start && observer.start(subscription);
  } catch (error) {
    hostReportError(error, true);
  }
  if (closed) {
    return subscription;
  }
  var sink = withClosed({
    next: function next(value) {
      if (!closed && observer.next) {
        try {
          observer.next(value);
        } catch (error) {
          hostReportError(error, true);
        }
      }
    },
    error: function error(_error3, isUncaughtThrownError) {
      if (closed || !observer.error) {
        closed = true;
        hostReportError(_error3, isUncaughtThrownError || false);
        doCleanup();
      } else {
        closed = true;
        try {
          observer.error(_error3);
        } catch (error2) {
          hostReportError(error2, true);
        } finally {
          doCleanup();
        }
      }
    },
    complete: function complete() {
      if (!closed) {
        closed = true;
        try {
          observer.complete && observer.complete();
        } catch (error) {
          hostReportError(error, true);
        } finally {
          doCleanup();
        }
      }
    }
  });
  try {
    cleanup = source(sink);
  } catch (error) {
    sink.error(error, true);
  }
  if (true) {
    if (cleanup !== undefined && typeof cleanup !== 'function' && (!cleanup || typeof cleanup.unsubscribe !== 'function')) {
      throw new Error('Returned cleanup function which cannot be called: ' + String(cleanup));
    }
  }
  if (closed) {
    doCleanup();
  }
  return subscription;
}
function swallowError(_error, _isUncaughtThrownError) {}
if (true) {
  RelayObservable.onUnhandledError(function (error, isUncaughtThrownError) {
    if (typeof fail === 'function') {
      fail(String(error));
    } else if (isUncaughtThrownError) {
      setTimeout(function () {
        throw error;
      });
    } else if (typeof console !== 'undefined') {
      console.error('RelayObservable: Unhandled Error', error);
    }
  });
}
module.exports = RelayObservable;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/RelayQueryResponseCache.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js"));
var stableCopy = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/stableCopy.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var RelayQueryResponseCache = /*#__PURE__*/function () {
  function RelayQueryResponseCache(_ref) {
    var size = _ref.size,
      ttl = _ref.ttl;
    !(size > 0) ?  true ? invariant(false, 'RelayQueryResponseCache: Expected the max cache size to be > 0, got ' + '`%s`.', size) : 0 : void 0;
    !(ttl > 0) ?  true ? invariant(false, 'RelayQueryResponseCache: Expected the max ttl to be > 0, got `%s`.', ttl) : 0 : void 0;
    this._responses = new Map();
    this._size = size;
    this._ttl = ttl;
  }
  var _proto = RelayQueryResponseCache.prototype;
  _proto.clear = function clear() {
    this._responses.clear();
  };
  _proto.get = function get(queryID, variables) {
    var _this = this;
    var cacheKey = getCacheKey(queryID, variables);
    this._responses.forEach(function (response, key) {
      if (!isCurrent(response.fetchTime, _this._ttl)) {
        _this._responses["delete"](key);
      }
    });
    var response = this._responses.get(cacheKey);
    if (response == null) {
      return null;
    }
    if (Array.isArray(response.payload)) {
      return response.payload.map(function (payload) {
        return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, payload), {}, {
          extensions: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, payload.extensions), {}, {
            cacheTimestamp: response.fetchTime
          })
        });
      });
    }
    return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, response.payload), {}, {
      extensions: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, response.payload.extensions), {}, {
        cacheTimestamp: response.fetchTime
      })
    });
  };
  _proto.set = function set(queryID, variables, payload) {
    var fetchTime = Date.now();
    var cacheKey = getCacheKey(queryID, variables);
    this._responses["delete"](cacheKey);
    this._responses.set(cacheKey, {
      fetchTime: fetchTime,
      payload: payload
    });
    if (this._responses.size > this._size) {
      var firstKey = this._responses.keys().next();
      if (!firstKey.done) {
        this._responses["delete"](firstKey.value);
      }
    }
  };
  return RelayQueryResponseCache;
}();
function getCacheKey(queryID, variables) {
  return JSON.stringify(stableCopy({
    queryID: queryID,
    variables: variables
  }));
}
function isCurrent(fetchTime, ttl) {
  return fetchTime + ttl >= Date.now();
}
module.exports = RelayQueryResponseCache;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/wrapNetworkWithLogObserver.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var generateID = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/generateID.js");
function wrapNetworkWithLogObserver(env, network) {
  return {
    execute: function execute(params, variables, cacheConfig, uploadables) {
      var networkRequestId = generateID();
      var logObserver = {
        start: function start(subscription) {
          env.__log({
            name: 'network.start',
            networkRequestId: networkRequestId,
            params: params,
            variables: variables,
            cacheConfig: cacheConfig
          });
        },
        next: function next(response) {
          env.__log({
            name: 'network.next',
            networkRequestId: networkRequestId,
            response: response
          });
        },
        error: function error(_error) {
          env.__log({
            name: 'network.error',
            networkRequestId: networkRequestId,
            error: _error
          });
        },
        complete: function complete() {
          env.__log({
            name: 'network.complete',
            networkRequestId: networkRequestId
          });
        },
        unsubscribe: function unsubscribe() {
          env.__log({
            name: 'network.unsubscribe',
            networkRequestId: networkRequestId
          });
        }
      };
      var logRequestInfo = function logRequestInfo(info) {
        env.__log({
          name: 'network.info',
          networkRequestId: networkRequestId,
          info: info
        });
      };
      return network.execute(params, variables, cacheConfig, uploadables, logRequestInfo)["do"](logObserver);
    }
  };
}
module.exports = wrapNetworkWithLogObserver;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/GraphQLTag.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var RelayConcreteNode = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
function graphql(strings) {
   true ?  true ? invariant(false, 'graphql: Unexpected invocation at runtime. Either the Babel transform ' + 'was not set up, or it failed to identify this call site. Make sure it ' + 'is being used verbatim as `graphql`. Note also that there cannot be ' + 'a space between graphql and the backtick that follows.') : 0 : 0;
}
function getNode(taggedNode) {
  var node = taggedNode;
  if (typeof node === 'function') {
    node = node();
     true ? warning(false, 'RelayGraphQLTag: node `%s` unexpectedly wrapped in a function.', node.kind === 'Fragment' ? node.name : node.operation.name) : 0;
  } else if (node["default"]) {
    node = node["default"];
  }
  return node;
}
function isFragment(node) {
  var fragment = getNode(node);
  return typeof fragment === 'object' && fragment !== null && fragment.kind === RelayConcreteNode.FRAGMENT;
}
function isRequest(node) {
  var request = getNode(node);
  return typeof request === 'object' && request !== null && request.kind === RelayConcreteNode.REQUEST;
}
function isUpdatableQuery(node) {
  var updatableQuery = getNode(node);
  return typeof updatableQuery === 'object' && updatableQuery !== null && updatableQuery.kind === RelayConcreteNode.UPDATABLE_QUERY;
}
function isInlineDataFragment(node) {
  var fragment = getNode(node);
  return typeof fragment === 'object' && fragment !== null && fragment.kind === RelayConcreteNode.INLINE_DATA_FRAGMENT;
}
function getFragment(taggedNode) {
  var fragment = getNode(taggedNode);
  !isFragment(fragment) ?  true ? invariant(false, 'GraphQLTag: Expected a fragment, got `%s`.', JSON.stringify(fragment)) : 0 : void 0;
  return fragment;
}
function getPaginationFragment(taggedNode) {
  var _fragment$metadata;
  var fragment = getFragment(taggedNode);
  var refetch = (_fragment$metadata = fragment.metadata) === null || _fragment$metadata === void 0 ? void 0 : _fragment$metadata.refetch;
  var connection = refetch === null || refetch === void 0 ? void 0 : refetch.connection;
  if (refetch === null || typeof refetch !== 'object' || connection === null || typeof connection !== 'object') {
    return null;
  }
  return fragment;
}
function getRefetchableFragment(taggedNode) {
  var _fragment$metadata2;
  var fragment = getFragment(taggedNode);
  var refetch = (_fragment$metadata2 = fragment.metadata) === null || _fragment$metadata2 === void 0 ? void 0 : _fragment$metadata2.refetch;
  if (refetch === null || typeof refetch !== 'object') {
    return null;
  }
  return fragment;
}
function getRequest(taggedNode) {
  var request = getNode(taggedNode);
  !isRequest(request) ?  true ? invariant(false, 'GraphQLTag: Expected a request, got `%s`.', JSON.stringify(request)) : 0 : void 0;
  return request;
}
function getUpdatableQuery(taggedNode) {
  var updatableQuery = getNode(taggedNode);
  !isUpdatableQuery(updatableQuery) ?  true ? invariant(false, 'GraphQLTag: Expected a request, got `%s`.', JSON.stringify(updatableQuery)) : 0 : void 0;
  return updatableQuery;
}
function getInlineDataFragment(taggedNode) {
  var fragment = getNode(taggedNode);
  !isInlineDataFragment(fragment) ?  true ? invariant(false, 'GraphQLTag: Expected an inline data fragment, got `%s`.', JSON.stringify(fragment)) : 0 : void 0;
  return fragment;
}
module.exports = {
  getFragment: getFragment,
  getNode: getNode,
  getPaginationFragment: getPaginationFragment,
  getRefetchableFragment: getRefetchableFragment,
  getRequest: getRequest,
  getUpdatableQuery: getUpdatableQuery,
  getInlineDataFragment: getInlineDataFragment,
  graphql: graphql,
  isFragment: isFragment,
  isRequest: isRequest,
  isUpdatableQuery: isUpdatableQuery,
  isInlineDataFragment: isInlineDataFragment
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/PreloadableQueryRegistry.js": (function (module) {
"use strict";


var PreloadableQueryRegistry = /*#__PURE__*/function () {
  function PreloadableQueryRegistry() {
    this._preloadableQueries = new Map();
    this._callbacks = new Map();
  }
  var _proto = PreloadableQueryRegistry.prototype;
  _proto.set = function set(key, value) {
    this._preloadableQueries.set(key, value);
    var callbacks = this._callbacks.get(key);
    if (callbacks != null) {
      callbacks.forEach(function (cb) {
        try {
          cb(value);
        } catch (e) {
          setTimeout(function () {
            throw e;
          }, 0);
        }
      });
    }
  };
  _proto.get = function get(key) {
    return this._preloadableQueries.get(key);
  };
  _proto.onLoad = function onLoad(key, callback) {
    var _this$_callbacks$get;
    var callbacks = (_this$_callbacks$get = this._callbacks.get(key)) !== null && _this$_callbacks$get !== void 0 ? _this$_callbacks$get : new Set();
    callbacks.add(callback);
    var dispose = function dispose() {
      callbacks["delete"](callback);
    };
    this._callbacks.set(key, callbacks);
    return {
      dispose: dispose
    };
  };
  _proto.clear = function clear() {
    this._preloadableQueries.clear();
  };
  return PreloadableQueryRegistry;
}();
var preloadableQueryRegistry = new PreloadableQueryRegistry();
module.exports = preloadableQueryRegistry;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/fetchQuery.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js"));
var RelayObservable = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/RelayObservable.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js"),
  createOperationDescriptor = _require.createOperationDescriptor;
var handlePotentialSnapshotErrors = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/handlePotentialSnapshotErrors.js");
var fetchQueryInternal = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/fetchQueryInternal.js");
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/GraphQLTag.js"),
  getRequest = _require2.getRequest;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function fetchQuery(environment, query, variables, options) {
  var _options$fetchPolicy;
  var queryNode = getRequest(query);
  !(queryNode.params.operationKind === 'query') ?  true ? invariant(false, 'fetchQuery: Expected query operation') : 0 : void 0;
  var networkCacheConfig = (0, _objectSpread2["default"])({
    force: true
  }, options === null || options === void 0 ? void 0 : options.networkCacheConfig);
  var operation = createOperationDescriptor(queryNode, variables, networkCacheConfig);
  var fetchPolicy = (_options$fetchPolicy = options === null || options === void 0 ? void 0 : options.fetchPolicy) !== null && _options$fetchPolicy !== void 0 ? _options$fetchPolicy : 'network-only';
  function readData(snapshot) {
    handlePotentialSnapshotErrors(environment, snapshot.missingRequiredFields, snapshot.relayResolverErrors, snapshot.errorResponseFields);
    return snapshot.data;
  }
  switch (fetchPolicy) {
    case 'network-only':
      {
        return getNetworkObservable(environment, operation).map(readData);
      }
    case 'store-or-network':
      {
        if (environment.check(operation).status === 'available') {
          return RelayObservable.from(environment.lookup(operation.fragment)).map(readData);
        }
        return getNetworkObservable(environment, operation).map(readData);
      }
    default:
      fetchPolicy;
      throw new Error('fetchQuery: Invalid fetchPolicy ' + fetchPolicy);
  }
}
function getNetworkObservable(environment, operation) {
  return fetchQueryInternal.fetchQuery(environment, operation).map(function () {
    return environment.lookup(operation.fragment);
  });
}
module.exports = fetchQuery;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/fetchQueryInternal.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var Observable = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/RelayObservable.js");
var RelayReplaySubject = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayReplaySubject.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var WEAKMAP_SUPPORTED = typeof WeakMap === 'function';
var requestCachesByEnvironment = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();
function fetchQuery(environment, operation) {
  return fetchQueryDeduped(environment, operation.request.identifier, function () {
    return environment.execute({
      operation: operation
    });
  });
}
function fetchQueryDeduped(environment, identifier, fetchFn) {
  return Observable.create(function (sink) {
    var requestCache = getRequestCache(environment);
    var cachedRequest = requestCache.get(identifier);
    if (!cachedRequest) {
      fetchFn()["finally"](function () {
        return requestCache["delete"](identifier);
      }).subscribe({
        start: function start(subscription) {
          cachedRequest = {
            identifier: identifier,
            subject: new RelayReplaySubject(),
            subjectForInFlightStatus: new RelayReplaySubject(),
            subscription: subscription,
            promise: null
          };
          requestCache.set(identifier, cachedRequest);
        },
        next: function next(response) {
          var cachedReq = getCachedRequest(requestCache, identifier);
          cachedReq.subject.next(response);
          cachedReq.subjectForInFlightStatus.next(response);
        },
        error: function error(_error) {
          var cachedReq = getCachedRequest(requestCache, identifier);
          cachedReq.subject.error(_error);
          cachedReq.subjectForInFlightStatus.error(_error);
        },
        complete: function complete() {
          var cachedReq = getCachedRequest(requestCache, identifier);
          cachedReq.subject.complete();
          cachedReq.subjectForInFlightStatus.complete();
        },
        unsubscribe: function unsubscribe(subscription) {
          var cachedReq = getCachedRequest(requestCache, identifier);
          cachedReq.subject.unsubscribe();
          cachedReq.subjectForInFlightStatus.unsubscribe();
        }
      });
    }
    !(cachedRequest != null) ?  true ? invariant(false, '[fetchQueryInternal] fetchQueryDeduped: Expected `start` to be ' + 'called synchronously') : 0 : void 0;
    return getObservableForCachedRequest(requestCache, cachedRequest).subscribe(sink);
  });
}
function getObservableForCachedRequest(requestCache, cachedRequest) {
  return Observable.create(function (sink) {
    var subscription = cachedRequest.subject.subscribe(sink);
    return function () {
      subscription.unsubscribe();
      var cachedRequestInstance = requestCache.get(cachedRequest.identifier);
      if (cachedRequestInstance) {
        var requestSubscription = cachedRequestInstance.subscription;
        if (requestSubscription != null && cachedRequestInstance.subject.getObserverCount() === 0) {
          requestSubscription.unsubscribe();
          requestCache["delete"](cachedRequest.identifier);
        }
      }
    };
  });
}
function getActiveStatusObservableForCachedRequest(environment, requestCache, cachedRequest) {
  return Observable.create(function (sink) {
    var subscription = cachedRequest.subjectForInFlightStatus.subscribe({
      error: sink.error,
      next: function next(response) {
        if (!environment.isRequestActive(cachedRequest.identifier)) {
          sink.complete();
          return;
        }
        sink.next();
      },
      complete: sink.complete,
      unsubscribe: sink.complete
    });
    return function () {
      subscription.unsubscribe();
    };
  });
}
function getPromiseForActiveRequest(environment, request) {
  var requestCache = getRequestCache(environment);
  var cachedRequest = requestCache.get(request.identifier);
  if (!cachedRequest) {
    return null;
  }
  if (!environment.isRequestActive(cachedRequest.identifier)) {
    return null;
  }
  var promise = new Promise(function (resolve, reject) {
    var resolveOnNext = false;
    getActiveStatusObservableForCachedRequest(environment, requestCache, cachedRequest).subscribe({
      complete: resolve,
      error: reject,
      next: function next(response) {
        if (resolveOnNext) {
          resolve(response);
        }
      }
    });
    resolveOnNext = true;
  });
  return promise;
}
function getObservableForActiveRequest(environment, request) {
  var requestCache = getRequestCache(environment);
  var cachedRequest = requestCache.get(request.identifier);
  if (!cachedRequest) {
    return null;
  }
  if (!environment.isRequestActive(cachedRequest.identifier)) {
    return null;
  }
  return getActiveStatusObservableForCachedRequest(environment, requestCache, cachedRequest);
}
function getRequestCache(environment) {
  var cached = requestCachesByEnvironment.get(environment);
  if (cached != null) {
    return cached;
  }
  var requestCache = new Map();
  requestCachesByEnvironment.set(environment, requestCache);
  return requestCache;
}
function getCachedRequest(requestCache, identifier) {
  var cached = requestCache.get(identifier);
  !(cached != null) ?  true ? invariant(false, '[fetchQueryInternal] getCachedRequest: Expected request to be cached') : 0 : void 0;
  return cached;
}
module.exports = {
  fetchQuery: fetchQuery,
  fetchQueryDeduped: fetchQueryDeduped,
  getPromiseForActiveRequest: getPromiseForActiveRequest,
  getObservableForActiveRequest: getObservableForActiveRequest
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/fetchQuery_DEPRECATED.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js"),
  createOperationDescriptor = _require.createOperationDescriptor;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/GraphQLTag.js"),
  getRequest = _require2.getRequest;
function fetchQuery_DEPRECATED(environment, taggedNode, variables, cacheConfig) {
  var query = getRequest(taggedNode);
  if (query.params.operationKind !== 'query') {
    throw new Error('fetchQuery: Expected query operation');
  }
  var operation = createOperationDescriptor(query, variables, cacheConfig);
  return environment.execute({
    operation: operation
  }).map(function () {
    return environment.lookup(operation.fragment).data;
  }).toPromise();
}
module.exports = fetchQuery_DEPRECATED;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ClientID.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var RelayFeatureFlags = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/StringInterner.js"),
  intern = _require.intern;
var PREFIX = 'client:';
function generateClientID(id, storageKey, index) {
  var internedId = RelayFeatureFlags.STRING_INTERN_LEVEL <= 0 ? id : intern(id, RelayFeatureFlags.MAX_DATA_ID_LENGTH);
  var key = internedId + ':' + storageKey;
  if (index != null) {
    key += ':' + index;
  }
  if (key.indexOf(PREFIX) !== 0) {
    key = PREFIX + key;
  }
  return key;
}
function isClientID(id) {
  return id.indexOf(PREFIX) === 0;
}
var localID = 0;
function generateUniqueClientID() {
  return "".concat(PREFIX, "local:").concat(localID++);
}
function generateClientObjectClientID(typename, localId, index) {
  var key = "".concat(PREFIX).concat(typename, ":").concat(localId);
  if (index != null) {
    key += ':' + index;
  }
  return key;
}
module.exports = {
  generateClientID: generateClientID,
  generateClientObjectClientID: generateClientObjectClientID,
  generateUniqueClientID: generateUniqueClientID,
  isClientID: isClientID
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/DataChecker.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var RelayRecordSourceMutator = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayRecordSourceMutator.js");
var RelayRecordSourceProxy = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayRecordSourceProxy.js");
var getOperation = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getOperation.js");
var RelayConcreteNode = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ClientID.js"),
  isClientID = _require.isClientID;
var cloneRelayHandleSourceField = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/cloneRelayHandleSourceField.js");
var cloneRelayScalarHandleSourceField = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/cloneRelayScalarHandleSourceField.js");
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js"),
  getLocalVariables = _require2.getLocalVariables;
var RelayModernRecord = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js");
var _require3 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayRecordState.js"),
  EXISTENT = _require3.EXISTENT,
  UNKNOWN = _require3.UNKNOWN;
var RelayStoreUtils = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js");
var _require4 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/TypeID.js"),
  TYPE_SCHEMA_TYPE = _require4.TYPE_SCHEMA_TYPE,
  generateTypeID = _require4.generateTypeID;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE,
  CONDITION = RelayConcreteNode.CONDITION,
  CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT,
  CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,
  CLIENT_EDGE_TO_CLIENT_OBJECT = RelayConcreteNode.CLIENT_EDGE_TO_CLIENT_OBJECT,
  DEFER = RelayConcreteNode.DEFER,
  FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,
  INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,
  LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,
  LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,
  MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,
  RELAY_RESOLVER = RelayConcreteNode.RELAY_RESOLVER,
  RELAY_LIVE_RESOLVER = RelayConcreteNode.RELAY_LIVE_RESOLVER,
  SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,
  SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,
  STREAM = RelayConcreteNode.STREAM,
  TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR;
var getModuleOperationKey = RelayStoreUtils.getModuleOperationKey,
  getStorageKey = RelayStoreUtils.getStorageKey,
  getArgumentValues = RelayStoreUtils.getArgumentValues;
function check(getSourceForActor, getTargetForActor, defaultActorIdentifier, selector, handlers, operationLoader, getDataID, shouldProcessClientComponents) {
  var dataID = selector.dataID,
    node = selector.node,
    variables = selector.variables;
  var checker = new DataChecker(getSourceForActor, getTargetForActor, defaultActorIdentifier, variables, handlers, operationLoader, getDataID, shouldProcessClientComponents);
  return checker.check(node, dataID);
}
var DataChecker = /*#__PURE__*/function () {
  function DataChecker(getSourceForActor, getTargetForActor, defaultActorIdentifier, variables, handlers, operationLoader, getDataID, shouldProcessClientComponents) {
    this._getSourceForActor = getSourceForActor;
    this._getTargetForActor = getTargetForActor;
    this._getDataID = getDataID;
    this._source = getSourceForActor(defaultActorIdentifier);
    this._mutatorRecordSourceProxyCache = new Map();
    var _this$_getMutatorAndR = this._getMutatorAndRecordProxyForActor(defaultActorIdentifier),
      mutator = _this$_getMutatorAndR[0],
      recordSourceProxy = _this$_getMutatorAndR[1];
    this._mostRecentlyInvalidatedAt = null;
    this._handlers = handlers;
    this._mutator = mutator;
    this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;
    this._recordSourceProxy = recordSourceProxy;
    this._recordWasMissing = false;
    this._variables = variables;
    this._shouldProcessClientComponents = shouldProcessClientComponents;
  }
  var _proto = DataChecker.prototype;
  _proto._getMutatorAndRecordProxyForActor = function _getMutatorAndRecordProxyForActor(actorIdentifier) {
    var tuple = this._mutatorRecordSourceProxyCache.get(actorIdentifier);
    if (tuple == null) {
      var target = this._getTargetForActor(actorIdentifier);
      var mutator = new RelayRecordSourceMutator(this._getSourceForActor(actorIdentifier), target);
      var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, undefined, this._handlers);
      tuple = [mutator, recordSourceProxy];
      this._mutatorRecordSourceProxyCache.set(actorIdentifier, tuple);
    }
    return tuple;
  };
  _proto.check = function check(node, dataID) {
    this._assignClientAbstractTypes(node);
    this._traverse(node, dataID);
    return this._recordWasMissing === true ? {
      status: 'missing',
      mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt
    } : {
      status: 'available',
      mostRecentlyInvalidatedAt: this._mostRecentlyInvalidatedAt
    };
  };
  _proto._getVariableValue = function _getVariableValue(name) {
    !this._variables.hasOwnProperty(name) ?  true ? invariant(false, 'RelayAsyncLoader(): Undefined variable `%s`.', name) : 0 : void 0;
    return this._variables[name];
  };
  _proto._handleMissing = function _handleMissing() {
    this._recordWasMissing = true;
  };
  _proto._handleMissingScalarField = function _handleMissingScalarField(field, dataID) {
    if (field.name === 'id' && field.alias == null && isClientID(dataID)) {
      return undefined;
    }
    var args = field.args != undefined ? getArgumentValues(field.args, this._variables) : {};
    var _iterator = (0, _createForOfIteratorHelper2["default"])(this._handlers),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var handler = _step.value;
        if (handler.kind === 'scalar') {
          var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);
          if (newValue !== undefined) {
            return newValue;
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    this._handleMissing();
  };
  _proto._handleMissingLinkField = function _handleMissingLinkField(field, dataID) {
    var args = field.args != undefined ? getArgumentValues(field.args, this._variables) : {};
    var _iterator2 = (0, _createForOfIteratorHelper2["default"])(this._handlers),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var handler = _step2.value;
        if (handler.kind === 'linked') {
          var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);
          if (newValue !== undefined && (newValue === null || this._mutator.getStatus(newValue) === EXISTENT)) {
            return newValue;
          }
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    this._handleMissing();
  };
  _proto._handleMissingPluralLinkField = function _handleMissingPluralLinkField(field, dataID) {
    var _this = this;
    var args = field.args != undefined ? getArgumentValues(field.args, this._variables) : {};
    var _iterator3 = (0, _createForOfIteratorHelper2["default"])(this._handlers),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var handler = _step3.value;
        if (handler.kind === 'pluralLinked') {
          var newValue = handler.handle(field, this._recordSourceProxy.get(dataID), args, this._recordSourceProxy);
          if (newValue != null) {
            var allItemsKnown = newValue.every(function (linkedID) {
              return linkedID != null && _this._mutator.getStatus(linkedID) === EXISTENT;
            });
            if (allItemsKnown) {
              return newValue;
            }
          } else if (newValue === null) {
            return null;
          }
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    this._handleMissing();
  };
  _proto._traverse = function _traverse(node, dataID) {
    var status = this._mutator.getStatus(dataID);
    if (status === UNKNOWN) {
      this._handleMissing();
    }
    if (status === EXISTENT) {
      var record = this._source.get(dataID);
      var invalidatedAt = RelayModernRecord.getInvalidationEpoch(record);
      if (invalidatedAt != null) {
        this._mostRecentlyInvalidatedAt = this._mostRecentlyInvalidatedAt != null ? Math.max(this._mostRecentlyInvalidatedAt, invalidatedAt) : invalidatedAt;
      }
      this._traverseSelections(node.selections, dataID);
    }
  };
  _proto._traverseSelections = function _traverseSelections(selections, dataID) {
    var _this2 = this;
    selections.forEach(function (selection) {
      switch (selection.kind) {
        case SCALAR_FIELD:
          _this2._checkScalar(selection, dataID);
          break;
        case LINKED_FIELD:
          if (selection.plural) {
            _this2._checkPluralLink(selection, dataID);
          } else {
            _this2._checkLink(selection, dataID);
          }
          break;
        case ACTOR_CHANGE:
          _this2._checkActorChange(selection.linkedField, dataID);
          break;
        case CONDITION:
          var conditionValue = Boolean(_this2._getVariableValue(selection.condition));
          if (conditionValue === selection.passingValue) {
            _this2._traverseSelections(selection.selections, dataID);
          }
          break;
        case INLINE_FRAGMENT:
          {
            var _abstractKey = selection.abstractKey;
            if (_abstractKey == null) {
              var typeName = _this2._mutator.getType(dataID);
              if (typeName === selection.type) {
                _this2._traverseSelections(selection.selections, dataID);
              }
            } else {
              var _recordType = _this2._mutator.getType(dataID);
              !(_recordType != null) ?  true ? invariant(false, 'DataChecker: Expected record `%s` to have a known type', dataID) : 0 : void 0;
              var _typeID = generateTypeID(_recordType);
              var _implementsInterface = _this2._mutator.getValue(_typeID, _abstractKey);
              if (_implementsInterface === true) {
                _this2._traverseSelections(selection.selections, dataID);
              } else if (_implementsInterface == null) {
                _this2._handleMissing();
              }
            }
            break;
          }
        case LINKED_HANDLE:
          {
            var handleField = cloneRelayHandleSourceField(selection, selections, _this2._variables);
            if (handleField.plural) {
              _this2._checkPluralLink(handleField, dataID);
            } else {
              _this2._checkLink(handleField, dataID);
            }
            break;
          }
        case SCALAR_HANDLE:
          {
            var _handleField = cloneRelayScalarHandleSourceField(selection, selections, _this2._variables);
            _this2._checkScalar(_handleField, dataID);
            break;
          }
        case MODULE_IMPORT:
          _this2._checkModuleImport(selection, dataID);
          break;
        case DEFER:
        case STREAM:
          _this2._traverseSelections(selection.selections, dataID);
          break;
        case FRAGMENT_SPREAD:
          var prevVariables = _this2._variables;
          _this2._variables = getLocalVariables(_this2._variables, selection.fragment.argumentDefinitions, selection.args);
          _this2._traverseSelections(selection.fragment.selections, dataID);
          _this2._variables = prevVariables;
          break;
        case CLIENT_EXTENSION:
          var recordWasMissing = _this2._recordWasMissing;
          _this2._traverseSelections(selection.selections, dataID);
          _this2._recordWasMissing = recordWasMissing;
          break;
        case TYPE_DISCRIMINATOR:
          var abstractKey = selection.abstractKey;
          var recordType = _this2._mutator.getType(dataID);
          !(recordType != null) ?  true ? invariant(false, 'DataChecker: Expected record `%s` to have a known type', dataID) : 0 : void 0;
          var typeID = generateTypeID(recordType);
          var implementsInterface = _this2._mutator.getValue(typeID, abstractKey);
          if (implementsInterface == null) {
            _this2._handleMissing();
          }
          break;
        case CLIENT_COMPONENT:
          if (_this2._shouldProcessClientComponents === false) {
            break;
          }
          _this2._traverseSelections(selection.fragment.selections, dataID);
          break;
        case RELAY_RESOLVER:
          _this2._checkResolver(selection, dataID);
          break;
        case RELAY_LIVE_RESOLVER:
          _this2._checkResolver(selection, dataID);
          break;
        case CLIENT_EDGE_TO_CLIENT_OBJECT:
          _this2._checkResolver(selection.backingField, dataID);
          break;
        default:
          selection;
           true ?  true ? invariant(false, 'RelayAsyncLoader(): Unexpected ast kind `%s`.', selection.kind) : 0 : 0;
      }
    });
  };
  _proto._checkResolver = function _checkResolver(resolver, dataID) {
    if (resolver.fragment) {
      this._traverseSelections([resolver.fragment], dataID);
    }
  };
  _proto._checkModuleImport = function _checkModuleImport(moduleImport, dataID) {
    var operationLoader = this._operationLoader;
    !(operationLoader !== null) ?  true ? invariant(false, 'DataChecker: Expected an operationLoader to be configured when using `@module`.') : 0 : void 0;
    var operationKey = getModuleOperationKey(moduleImport.documentName);
    var operationReference = this._mutator.getValue(dataID, operationKey);
    if (operationReference == null) {
      if (operationReference === undefined) {
        this._handleMissing();
      }
      return;
    }
    var normalizationRootNode = operationLoader.get(operationReference);
    if (normalizationRootNode != null) {
      var operation = getOperation(normalizationRootNode);
      var prevVariables = this._variables;
      this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);
      this._traverse(operation, dataID);
      this._variables = prevVariables;
    } else {
      this._handleMissing();
    }
  };
  _proto._checkScalar = function _checkScalar(field, dataID) {
    var storageKey = getStorageKey(field, this._variables);
    var fieldValue = this._mutator.getValue(dataID, storageKey);
    if (fieldValue === undefined) {
      fieldValue = this._handleMissingScalarField(field, dataID);
      if (fieldValue !== undefined) {
        this._mutator.setValue(dataID, storageKey, fieldValue);
      }
    }
  };
  _proto._checkLink = function _checkLink(field, dataID) {
    var storageKey = getStorageKey(field, this._variables);
    var linkedID = this._mutator.getLinkedRecordID(dataID, storageKey);
    if (linkedID === undefined) {
      linkedID = this._handleMissingLinkField(field, dataID);
      if (linkedID != null) {
        this._mutator.setLinkedRecordID(dataID, storageKey, linkedID);
      } else if (linkedID === null) {
        this._mutator.setValue(dataID, storageKey, null);
      }
    }
    if (linkedID != null) {
      this._traverse(field, linkedID);
    }
  };
  _proto._checkPluralLink = function _checkPluralLink(field, dataID) {
    var _this3 = this;
    var storageKey = getStorageKey(field, this._variables);
    var linkedIDs = this._mutator.getLinkedRecordIDs(dataID, storageKey);
    if (linkedIDs === undefined) {
      linkedIDs = this._handleMissingPluralLinkField(field, dataID);
      if (linkedIDs != null) {
        this._mutator.setLinkedRecordIDs(dataID, storageKey, linkedIDs);
      } else if (linkedIDs === null) {
        this._mutator.setValue(dataID, storageKey, null);
      }
    }
    if (linkedIDs) {
      linkedIDs.forEach(function (linkedID) {
        if (linkedID != null) {
          _this3._traverse(field, linkedID);
        }
      });
    }
  };
  _proto._checkActorChange = function _checkActorChange(field, dataID) {
    var storageKey = getStorageKey(field, this._variables);
    var record = this._source.get(dataID);
    var tuple = record != null ? RelayModernRecord.getActorLinkedRecordID(record, storageKey) : record;
    if (tuple == null) {
      if (tuple === undefined) {
        this._handleMissing();
      }
    } else {
      var actorIdentifier = tuple[0],
        linkedID = tuple[1];
      var prevSource = this._source;
      var prevMutator = this._mutator;
      var prevRecordSourceProxy = this._recordSourceProxy;
      var _this$_getMutatorAndR2 = this._getMutatorAndRecordProxyForActor(actorIdentifier),
        mutator = _this$_getMutatorAndR2[0],
        recordSourceProxy = _this$_getMutatorAndR2[1];
      this._source = this._getSourceForActor(actorIdentifier);
      this._mutator = mutator;
      this._recordSourceProxy = recordSourceProxy;
      this._assignClientAbstractTypes(field);
      this._traverse(field, linkedID);
      this._source = prevSource;
      this._mutator = prevMutator;
      this._recordSourceProxy = prevRecordSourceProxy;
    }
  };
  _proto._assignClientAbstractTypes = function _assignClientAbstractTypes(node) {
    var clientAbstractTypes = node.clientAbstractTypes;
    if (clientAbstractTypes != null) {
      for (var _i = 0, _Object$keys = Object.keys(clientAbstractTypes); _i < _Object$keys.length; _i++) {
        var abstractType = _Object$keys[_i];
        var _iterator4 = (0, _createForOfIteratorHelper2["default"])(clientAbstractTypes[abstractType]),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var concreteType = _step4.value;
            var typeID = generateTypeID(concreteType);
            if (this._source.get(typeID) == null) {
              this._mutator.create(typeID, TYPE_SCHEMA_TYPE);
            }
            if (this._mutator.getValue(typeID, abstractType) == null) {
              this._mutator.setValue(typeID, abstractType, true);
            }
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }
  };
  return DataChecker;
}();
module.exports = {
  check: check
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/OperationExecutor.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var _toConsumableArray2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/toConsumableArray.js"));
var RelayObservable = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/RelayObservable.js");
var generateID = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/generateID.js");
var getOperation = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getOperation.js");
var RelayError = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayError.js");
var RelayFeatureFlags = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js");
var stableCopy = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/stableCopy.js");
var withDuration = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/withDuration.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ClientID.js"),
  generateClientID = _require.generateClientID,
  generateUniqueClientID = _require.generateUniqueClientID;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js"),
  getLocalVariables = _require2.getLocalVariables;
var RelayModernRecord = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js");
var _require3 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernSelector.js"),
  createNormalizationSelector = _require3.createNormalizationSelector,
  createReaderSelector = _require3.createReaderSelector;
var RelayRecordSource = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayRecordSource.js");
var _require4 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  ROOT_TYPE = _require4.ROOT_TYPE,
  TYPENAME_KEY = _require4.TYPENAME_KEY,
  getStorageKey = _require4.getStorageKey;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
function execute(config) {
  return new Executor(config);
}
var Executor = /*#__PURE__*/function () {
  function Executor(_ref2) {
    var _this = this;
    var actorIdentifier = _ref2.actorIdentifier,
      getDataID = _ref2.getDataID,
      getPublishQueue = _ref2.getPublishQueue,
      getStore = _ref2.getStore,
      isClientPayload = _ref2.isClientPayload,
      operation = _ref2.operation,
      operationExecutions = _ref2.operationExecutions,
      operationLoader = _ref2.operationLoader,
      operationTracker = _ref2.operationTracker,
      optimisticConfig = _ref2.optimisticConfig,
      scheduler = _ref2.scheduler,
      shouldProcessClientComponents = _ref2.shouldProcessClientComponents,
      sink = _ref2.sink,
      source = _ref2.source,
      treatMissingFieldsAsNull = _ref2.treatMissingFieldsAsNull,
      updater = _ref2.updater,
      log = _ref2.log,
      normalizeResponse = _ref2.normalizeResponse;
    this._actorIdentifier = actorIdentifier;
    this._getDataID = getDataID;
    this._treatMissingFieldsAsNull = treatMissingFieldsAsNull;
    this._incrementalPayloadsPending = false;
    this._incrementalResults = new Map();
    this._log = log;
    this._executeId = generateID();
    this._nextSubscriptionId = 0;
    this._operation = operation;
    this._operationExecutions = operationExecutions;
    this._operationLoader = operationLoader;
    this._operationTracker = operationTracker;
    this._operationUpdateEpochs = new Map();
    this._optimisticUpdates = null;
    this._pendingModulePayloadsCount = 0;
    this._getPublishQueue = getPublishQueue;
    this._scheduler = scheduler;
    this._sink = sink;
    this._source = new Map();
    this._state = 'started';
    this._getStore = getStore;
    this._subscriptions = new Map();
    this._updater = updater;
    this._isClientPayload = isClientPayload === true;
    this._isSubscriptionOperation = this._operation.request.node.params.operationKind === 'subscription';
    this._shouldProcessClientComponents = shouldProcessClientComponents;
    this._retainDisposables = new Map();
    this._seenActors = new Set();
    this._completeFns = [];
    this._normalizeResponse = normalizeResponse;
    var id = this._nextSubscriptionId++;
    source.subscribe({
      complete: function complete() {
        return _this._complete(id);
      },
      error: function error(_error2) {
        return _this._error(_error2);
      },
      next: function next(response) {
        try {
          _this._next(id, response);
        } catch (error) {
          sink.error(error);
        }
      },
      start: function start(subscription) {
        var _this$_operation$requ;
        _this._start(id, subscription);
        _this._log({
          name: 'execute.start',
          executeId: _this._executeId,
          params: _this._operation.request.node.params,
          variables: _this._operation.request.variables,
          cacheConfig: (_this$_operation$requ = _this._operation.request.cacheConfig) !== null && _this$_operation$requ !== void 0 ? _this$_operation$requ : {}
        });
      }
    });
    if (optimisticConfig != null) {
      this._processOptimisticResponse(optimisticConfig.response != null ? {
        data: optimisticConfig.response
      } : null, optimisticConfig.updater, false);
    }
  }
  var _proto = Executor.prototype;
  _proto.cancel = function cancel() {
    var _this2 = this;
    if (this._state === 'completed') {
      return;
    }
    this._state = 'completed';
    this._operationExecutions["delete"](this._operation.request.identifier);
    if (this._subscriptions.size !== 0) {
      this._subscriptions.forEach(function (sub) {
        return sub.unsubscribe();
      });
      this._subscriptions.clear();
    }
    var optimisticUpdates = this._optimisticUpdates;
    if (optimisticUpdates !== null) {
      this._optimisticUpdates = null;
      optimisticUpdates.forEach(function (update) {
        return _this2._getPublishQueueAndSaveActor().revertUpdate(update);
      });
      this._runPublishQueue();
    }
    this._incrementalResults.clear();
    if (this._asyncStoreUpdateDisposable != null) {
      this._asyncStoreUpdateDisposable.dispose();
      this._asyncStoreUpdateDisposable = null;
    }
    this._completeFns = [];
    this._completeOperationTracker();
    this._disposeRetainedData();
  };
  _proto._updateActiveState = function _updateActiveState() {
    var activeState;
    switch (this._state) {
      case 'started':
        {
          activeState = 'active';
          break;
        }
      case 'loading_incremental':
        {
          activeState = 'active';
          break;
        }
      case 'completed':
        {
          activeState = 'inactive';
          break;
        }
      case 'loading_final':
        {
          activeState = this._pendingModulePayloadsCount > 0 ? 'active' : 'inactive';
          break;
        }
      default:
        this._state;
         true ?  true ? invariant(false, 'OperationExecutor: invalid executor state.') : 0 : 0;
    }
    this._operationExecutions.set(this._operation.request.identifier, activeState);
  };
  _proto._schedule = function _schedule(task) {
    var _this3 = this;
    var scheduler = this._scheduler;
    if (scheduler != null) {
      var id = this._nextSubscriptionId++;
      RelayObservable.create(function (sink) {
        var cancellationToken = scheduler.schedule(function () {
          try {
            task();
            sink.complete();
          } catch (error) {
            sink.error(error);
          }
        });
        return function () {
          return scheduler.cancel(cancellationToken);
        };
      }).subscribe({
        complete: function complete() {
          return _this3._complete(id);
        },
        error: function error(_error3) {
          return _this3._error(_error3);
        },
        start: function start(subscription) {
          return _this3._start(id, subscription);
        }
      });
    } else {
      task();
    }
  };
  _proto._complete = function _complete(id) {
    this._subscriptions["delete"](id);
    if (this._subscriptions.size === 0) {
      this.cancel();
      this._sink.complete();
      this._log({
        name: 'execute.complete',
        executeId: this._executeId
      });
    }
  };
  _proto._error = function _error(error) {
    this.cancel();
    this._sink.error(error);
    this._log({
      name: 'execute.error',
      executeId: this._executeId,
      error: error
    });
  };
  _proto._start = function _start(id, subscription) {
    this._subscriptions.set(id, subscription);
    this._updateActiveState();
  };
  _proto._next = function _next(_id, response) {
    var _this4 = this;
    this._schedule(function () {
      var _withDuration = withDuration(function () {
          _this4._handleNext(response);
          _this4._maybeCompleteSubscriptionOperationTracking();
        }),
        duration = _withDuration[0];
      _this4._log({
        name: 'execute.next',
        executeId: _this4._executeId,
        response: response,
        duration: duration
      });
    });
  };
  _proto._handleErrorResponse = function _handleErrorResponse(responses) {
    var _this5 = this;
    var results = [];
    responses.forEach(function (response) {
      if (response.data === null && response.extensions != null && !response.hasOwnProperty('errors')) {
        return;
      } else if (response.data == null) {
        var errors = response.hasOwnProperty('errors') && response.errors != null ? response.errors : null;
        var messages = errors ? errors.map(function (_ref3) {
          var message = _ref3.message;
          return message;
        }).join('\n') : '(No errors)';
        var error = RelayError.create('RelayNetwork', 'No data returned for operation `' + _this5._operation.request.node.params.name + '`, got error(s):\n' + messages + '\n\nSee the error `source` property for more information.');
        error.source = {
          errors: errors,
          operation: _this5._operation.request.node,
          variables: _this5._operation.request.variables
        };
        error.stack;
        throw error;
      } else {
        var responseWithData = response;
        results.push(responseWithData);
      }
    });
    return results;
  };
  _proto._handleOptimisticResponses = function _handleOptimisticResponses(responses) {
    var _response$extensions;
    if (responses.length > 1) {
      if (responses.some(function (responsePart) {
        var _responsePart$extensi;
        return ((_responsePart$extensi = responsePart.extensions) === null || _responsePart$extensi === void 0 ? void 0 : _responsePart$extensi.isOptimistic) === true;
      })) {
         true ?  true ? invariant(false, 'OperationExecutor: Optimistic responses cannot be batched.') : 0 : 0;
      }
      return false;
    }
    var response = responses[0];
    var isOptimistic = ((_response$extensions = response.extensions) === null || _response$extensions === void 0 ? void 0 : _response$extensions.isOptimistic) === true;
    if (isOptimistic && this._state !== 'started') {
       true ?  true ? invariant(false, 'OperationExecutor: optimistic payload received after server payload.') : 0 : 0;
    }
    if (isOptimistic) {
      this._processOptimisticResponse(response, null, this._treatMissingFieldsAsNull);
      this._sink.next(response);
      return true;
    }
    return false;
  };
  _proto._handleNext = function _handleNext(response) {
    if (this._state === 'completed') {
      return;
    }
    this._seenActors.clear();
    var responses = Array.isArray(response) ? response : [response];
    var responsesWithData = this._handleErrorResponse(responses);
    if (responsesWithData.length === 0) {
      var isFinal = responses.some(function (x) {
        var _x$extensions;
        return ((_x$extensions = x.extensions) === null || _x$extensions === void 0 ? void 0 : _x$extensions.is_final) === true;
      });
      if (isFinal) {
        this._state = 'loading_final';
        this._updateActiveState();
        this._incrementalPayloadsPending = false;
      }
      this._sink.next(response);
      return;
    }
    var isOptimistic = this._handleOptimisticResponses(responsesWithData);
    if (isOptimistic) {
      return;
    }
    var _partitionGraphQLResp = partitionGraphQLResponses(responsesWithData),
      nonIncrementalResponses = _partitionGraphQLResp[0],
      incrementalResponses = _partitionGraphQLResp[1];
    var hasNonIncrementalResponses = nonIncrementalResponses.length > 0;
    if (hasNonIncrementalResponses) {
      if (this._isSubscriptionOperation) {
        var nextID = generateUniqueClientID();
        this._operation = {
          request: this._operation.request,
          fragment: createReaderSelector(this._operation.fragment.node, nextID, this._operation.fragment.variables, this._operation.fragment.owner),
          root: createNormalizationSelector(this._operation.root.node, nextID, this._operation.root.variables)
        };
      }
      var payloadFollowups = this._processResponses(nonIncrementalResponses);
      this._processPayloadFollowups(payloadFollowups);
    }
    if (incrementalResponses.length > 0) {
      var _payloadFollowups = this._processIncrementalResponses(incrementalResponses);
      this._processPayloadFollowups(_payloadFollowups);
    }
    if (this._isSubscriptionOperation) {
      if (responsesWithData[0].extensions == null) {
        responsesWithData[0].extensions = {
          __relay_subscription_root_id: this._operation.fragment.dataID
        };
      } else {
        responsesWithData[0].extensions.__relay_subscription_root_id = this._operation.fragment.dataID;
      }
    }
    var updatedOwners = this._runPublishQueue(hasNonIncrementalResponses ? this._operation : undefined);
    if (hasNonIncrementalResponses) {
      if (this._incrementalPayloadsPending) {
        this._retainData();
      }
    }
    this._updateOperationTracker(updatedOwners);
    this._sink.next(response);
  };
  _proto._processOptimisticResponse = function _processOptimisticResponse(response, updater, treatMissingFieldsAsNull) {
    var _this6 = this;
    !(this._optimisticUpdates === null) ?  true ? invariant(false, 'OperationExecutor: environment.execute: only support one optimistic response per ' + 'execute.') : 0 : void 0;
    if (response == null && updater == null) {
      return;
    }
    var optimisticUpdates = [];
    if (response) {
      var payload = this._normalizeResponse(response, this._operation.root, ROOT_TYPE, {
        actorIdentifier: this._actorIdentifier,
        getDataID: this._getDataID,
        path: [],
        shouldProcessClientComponents: this._shouldProcessClientComponents,
        treatMissingFieldsAsNull: treatMissingFieldsAsNull
      });
      validateOptimisticResponsePayload(payload);
      optimisticUpdates.push({
        operation: this._operation,
        payload: payload,
        updater: updater
      });
      this._processOptimisticFollowups(payload, optimisticUpdates);
    } else if (updater) {
      optimisticUpdates.push({
        operation: this._operation,
        payload: {
          errors: null,
          fieldPayloads: null,
          incrementalPlaceholders: null,
          followupPayloads: null,
          source: RelayRecordSource.create(),
          isFinal: false
        },
        updater: updater
      });
    }
    this._optimisticUpdates = optimisticUpdates;
    optimisticUpdates.forEach(function (update) {
      return _this6._getPublishQueueAndSaveActor().applyUpdate(update);
    });
    var updatedOwners = this._runPublishQueue();
    if (RelayFeatureFlags.ENABLE_OPERATION_TRACKER_OPTIMISTIC_UPDATES) {
      this._updateOperationTracker(updatedOwners);
    }
  };
  _proto._processOptimisticFollowups = function _processOptimisticFollowups(payload, optimisticUpdates) {
    if (payload.followupPayloads && payload.followupPayloads.length) {
      var followupPayloads = payload.followupPayloads;
      var _iterator = (0, _createForOfIteratorHelper2["default"])(followupPayloads),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var followupPayload = _step.value;
          switch (followupPayload.kind) {
            case 'ModuleImportPayload':
              var operationLoader = this._expectOperationLoader();
              var operation = operationLoader.get(followupPayload.operationReference);
              if (operation == null) {
                this._processAsyncOptimisticModuleImport(followupPayload);
              } else {
                var moduleImportOptimisticUpdates = this._processOptimisticModuleImport(operation, followupPayload);
                optimisticUpdates.push.apply(optimisticUpdates, (0, _toConsumableArray2["default"])(moduleImportOptimisticUpdates));
              }
              break;
            case 'ActorPayload':
               true ? warning(false, 'OperationExecutor: Unexpected optimistic ActorPayload. These updates are not supported.') : 0;
              break;
            default:
              followupPayload;
               true ?  true ? invariant(false, 'OperationExecutor: Unexpected followup kind `%s`. when processing optimistic updates.', followupPayload.kind) : 0 : 0;
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  };
  _proto._normalizeFollowupPayload = function _normalizeFollowupPayload(followupPayload, normalizationNode) {
    var variables;
    if (normalizationNode.kind === 'SplitOperation' && followupPayload.kind === 'ModuleImportPayload') {
      variables = getLocalVariables(followupPayload.variables, normalizationNode.argumentDefinitions, followupPayload.args);
    } else {
      variables = followupPayload.variables;
    }
    var selector = createNormalizationSelector(normalizationNode, followupPayload.dataID, variables);
    return this._normalizeResponse({
      data: followupPayload.data
    }, selector, followupPayload.typeName, {
      actorIdentifier: this._actorIdentifier,
      getDataID: this._getDataID,
      path: followupPayload.path,
      treatMissingFieldsAsNull: this._treatMissingFieldsAsNull,
      shouldProcessClientComponents: this._shouldProcessClientComponents
    });
  };
  _proto._processOptimisticModuleImport = function _processOptimisticModuleImport(normalizationRootNode, moduleImportPayload) {
    var operation = getOperation(normalizationRootNode);
    var optimisticUpdates = [];
    var modulePayload = this._normalizeFollowupPayload(moduleImportPayload, operation);
    validateOptimisticResponsePayload(modulePayload);
    optimisticUpdates.push({
      operation: this._operation,
      payload: modulePayload,
      updater: null
    });
    this._processOptimisticFollowups(modulePayload, optimisticUpdates);
    return optimisticUpdates;
  };
  _proto._processAsyncOptimisticModuleImport = function _processAsyncOptimisticModuleImport(moduleImportPayload) {
    var _this7 = this;
    this._expectOperationLoader().load(moduleImportPayload.operationReference).then(function (operation) {
      if (operation == null || _this7._state !== 'started') {
        return;
      }
      var moduleImportOptimisticUpdates = _this7._processOptimisticModuleImport(operation, moduleImportPayload);
      moduleImportOptimisticUpdates.forEach(function (update) {
        return _this7._getPublishQueueAndSaveActor().applyUpdate(update);
      });
      if (_this7._optimisticUpdates == null) {
         true ? warning(false, 'OperationExecutor: Unexpected ModuleImport optimistic ' + 'update in operation %s.' + _this7._operation.request.node.params.name) : 0;
      } else {
        var _this$_optimisticUpda;
        (_this$_optimisticUpda = _this7._optimisticUpdates).push.apply(_this$_optimisticUpda, (0, _toConsumableArray2["default"])(moduleImportOptimisticUpdates));
        _this7._runPublishQueue();
      }
    });
  };
  _proto._processResponses = function _processResponses(responses) {
    var _this8 = this;
    if (this._optimisticUpdates !== null) {
      this._optimisticUpdates.forEach(function (update) {
        _this8._getPublishQueueAndSaveActor().revertUpdate(update);
      });
      this._optimisticUpdates = null;
    }
    this._incrementalPayloadsPending = false;
    this._incrementalResults.clear();
    this._source.clear();
    return responses.map(function (payloadPart) {
      var relayPayload = _this8._normalizeResponse(payloadPart, _this8._operation.root, ROOT_TYPE, {
        actorIdentifier: _this8._actorIdentifier,
        getDataID: _this8._getDataID,
        path: [],
        treatMissingFieldsAsNull: _this8._treatMissingFieldsAsNull,
        shouldProcessClientComponents: _this8._shouldProcessClientComponents
      });
      _this8._getPublishQueueAndSaveActor().commitPayload(_this8._operation, relayPayload, _this8._updater);
      return relayPayload;
    });
  };
  _proto._processPayloadFollowups = function _processPayloadFollowups(payloads) {
    var _this9 = this;
    if (this._state === 'completed') {
      return;
    }
    payloads.forEach(function (payload) {
      var incrementalPlaceholders = payload.incrementalPlaceholders,
        followupPayloads = payload.followupPayloads,
        isFinal = payload.isFinal;
      _this9._state = isFinal ? 'loading_final' : 'loading_incremental';
      _this9._updateActiveState();
      if (isFinal) {
        _this9._incrementalPayloadsPending = false;
      }
      if (followupPayloads && followupPayloads.length !== 0) {
        followupPayloads.forEach(function (followupPayload) {
          var _followupPayload$acto;
          var prevActorIdentifier = _this9._actorIdentifier;
          _this9._actorIdentifier = (_followupPayload$acto = followupPayload.actorIdentifier) !== null && _followupPayload$acto !== void 0 ? _followupPayload$acto : _this9._actorIdentifier;
          _this9._processFollowupPayload(followupPayload);
          _this9._actorIdentifier = prevActorIdentifier;
        });
      }
      if (incrementalPlaceholders && incrementalPlaceholders.length !== 0) {
        _this9._incrementalPayloadsPending = _this9._state !== 'loading_final';
        incrementalPlaceholders.forEach(function (incrementalPlaceholder) {
          var _incrementalPlacehold;
          var prevActorIdentifier = _this9._actorIdentifier;
          _this9._actorIdentifier = (_incrementalPlacehold = incrementalPlaceholder.actorIdentifier) !== null && _incrementalPlacehold !== void 0 ? _incrementalPlacehold : _this9._actorIdentifier;
          _this9._processIncrementalPlaceholder(payload, incrementalPlaceholder);
          _this9._actorIdentifier = prevActorIdentifier;
        });
        if (_this9._isClientPayload || _this9._state === 'loading_final') {
           true ? warning(_this9._isClientPayload, 'RelayModernEnvironment: Operation `%s` contains @defer/@stream ' + 'directives but was executed in non-streaming mode. See ' + 'https://fburl.com/relay-incremental-delivery-non-streaming-warning.', _this9._operation.request.node.params.name) : 0;
          var relayPayloads = [];
          incrementalPlaceholders.forEach(function (placeholder) {
            if (placeholder.kind === 'defer') {
              relayPayloads.push(_this9._processDeferResponse(placeholder.label, placeholder.path, placeholder, {
                data: placeholder.data
              }));
            }
          });
          if (relayPayloads.length > 0) {
            _this9._processPayloadFollowups(relayPayloads);
          }
        }
      }
    });
  };
  _proto._maybeCompleteSubscriptionOperationTracking = function _maybeCompleteSubscriptionOperationTracking() {
    if (!this._isSubscriptionOperation) {
      return;
    }
    if (this._pendingModulePayloadsCount === 0 && this._incrementalPayloadsPending === false) {
      this._completeOperationTracker();
    }
  };
  _proto._processFollowupPayload = function _processFollowupPayload(followupPayload) {
    var _this10 = this;
    switch (followupPayload.kind) {
      case 'ModuleImportPayload':
        var operationLoader = this._expectOperationLoader();
        var node = operationLoader.get(followupPayload.operationReference);
        if (node != null) {
          this._processFollowupPayloadWithNormalizationNode(followupPayload, getOperation(node));
        } else {
          var id = this._nextSubscriptionId++;
          this._pendingModulePayloadsCount++;
          var decrementPendingCount = function decrementPendingCount() {
            _this10._pendingModulePayloadsCount--;
            _this10._maybeCompleteSubscriptionOperationTracking();
          };
          var networkObservable = RelayObservable.from(new Promise(function (resolve, reject) {
            operationLoader.load(followupPayload.operationReference).then(resolve, reject);
          }));
          RelayObservable.create(function (sink) {
            var cancellationToken;
            var subscription = networkObservable.subscribe({
              next: function next(loadedNode) {
                if (loadedNode != null) {
                  var publishModuleImportPayload = function publishModuleImportPayload() {
                    try {
                      var operation = getOperation(loadedNode);
                      var batchAsyncModuleUpdatesFN = RelayFeatureFlags.BATCH_ASYNC_MODULE_UPDATES_FN;
                      var shouldScheduleAsyncStoreUpdate = batchAsyncModuleUpdatesFN != null && _this10._pendingModulePayloadsCount > 1;
                      var _withDuration2 = withDuration(function () {
                          _this10._handleFollowupPayload(followupPayload, operation);
                          if (shouldScheduleAsyncStoreUpdate) {
                            _this10._scheduleAsyncStoreUpdate(batchAsyncModuleUpdatesFN, sink.complete);
                          } else {
                            var updatedOwners = _this10._runPublishQueue();
                            _this10._updateOperationTracker(updatedOwners);
                          }
                        }),
                        duration = _withDuration2[0];
                      _this10._log({
                        name: 'execute.async.module',
                        executeId: _this10._executeId,
                        operationName: operation.name,
                        duration: duration
                      });
                      if (!shouldScheduleAsyncStoreUpdate) {
                        sink.complete();
                      }
                    } catch (error) {
                      sink.error(error);
                    }
                  };
                  var scheduler = _this10._scheduler;
                  if (scheduler == null) {
                    publishModuleImportPayload();
                  } else {
                    cancellationToken = scheduler.schedule(publishModuleImportPayload);
                  }
                } else {
                  sink.complete();
                }
              },
              error: sink.error
            });
            return function () {
              subscription.unsubscribe();
              if (_this10._scheduler != null && cancellationToken != null) {
                _this10._scheduler.cancel(cancellationToken);
              }
            };
          }).subscribe({
            complete: function complete() {
              _this10._complete(id);
              decrementPendingCount();
            },
            error: function error(_error4) {
              _this10._error(_error4);
              decrementPendingCount();
            },
            start: function start(subscription) {
              return _this10._start(id, subscription);
            }
          });
        }
        break;
      case 'ActorPayload':
        this._processFollowupPayloadWithNormalizationNode(followupPayload, followupPayload.node);
        break;
      default:
        followupPayload;
         true ?  true ? invariant(false, 'OperationExecutor: Unexpected followup kind `%s`.', followupPayload.kind) : 0 : 0;
    }
  };
  _proto._processFollowupPayloadWithNormalizationNode = function _processFollowupPayloadWithNormalizationNode(followupPayload, normalizationNode) {
    this._handleFollowupPayload(followupPayload, normalizationNode);
    this._maybeCompleteSubscriptionOperationTracking();
  };
  _proto._handleFollowupPayload = function _handleFollowupPayload(followupPayload, normalizationNode) {
    var relayPayload = this._normalizeFollowupPayload(followupPayload, normalizationNode);
    this._getPublishQueueAndSaveActor().commitPayload(this._operation, relayPayload);
    this._processPayloadFollowups([relayPayload]);
  };
  _proto._processIncrementalPlaceholder = function _processIncrementalPlaceholder(relayPayload, placeholder) {
    var _relayPayload$fieldPa;
    var label = placeholder.label,
      path = placeholder.path;
    var pathKey = path.map(String).join('.');
    var resultForLabel = this._incrementalResults.get(label);
    if (resultForLabel == null) {
      resultForLabel = new Map();
      this._incrementalResults.set(label, resultForLabel);
    }
    var resultForPath = resultForLabel.get(pathKey);
    var pendingResponses = resultForPath != null && resultForPath.kind === 'response' ? resultForPath.responses : null;
    resultForLabel.set(pathKey, {
      kind: 'placeholder',
      placeholder: placeholder
    });
    var parentID;
    if (placeholder.kind === 'stream') {
      parentID = placeholder.parentID;
    } else if (placeholder.kind === 'defer') {
      parentID = placeholder.selector.dataID;
    } else {
      placeholder;
       true ?  true ? invariant(false, 'OperationExecutor: Unsupported incremental placeholder kind `%s`.', placeholder.kind) : 0 : 0;
    }
    var parentRecord = relayPayload.source.get(parentID);
    var parentPayloads = ((_relayPayload$fieldPa = relayPayload.fieldPayloads) !== null && _relayPayload$fieldPa !== void 0 ? _relayPayload$fieldPa : []).filter(function (fieldPayload) {
      var fieldID = generateClientID(fieldPayload.dataID, fieldPayload.fieldKey);
      return fieldPayload.dataID === parentID || fieldID === parentID;
    });
    !(parentRecord != null) ?  true ? invariant(false, 'OperationExecutor: Expected record `%s` to exist.', parentID) : 0 : void 0;
    var nextParentRecord;
    var nextParentPayloads;
    var previousParentEntry = this._source.get(parentID);
    if (previousParentEntry != null) {
      nextParentRecord = RelayModernRecord.update(previousParentEntry.record, parentRecord);
      var handlePayloads = new Map();
      var dedupePayload = function dedupePayload(payload) {
        var key = stableStringify(payload);
        handlePayloads.set(key, payload);
      };
      previousParentEntry.fieldPayloads.forEach(dedupePayload);
      parentPayloads.forEach(dedupePayload);
      nextParentPayloads = Array.from(handlePayloads.values());
    } else {
      nextParentRecord = parentRecord;
      nextParentPayloads = parentPayloads;
    }
    this._source.set(parentID, {
      record: nextParentRecord,
      fieldPayloads: nextParentPayloads
    });
    if (pendingResponses != null) {
      var payloadFollowups = this._processIncrementalResponses(pendingResponses);
      this._processPayloadFollowups(payloadFollowups);
    }
  };
  _proto._processIncrementalResponses = function _processIncrementalResponses(incrementalResponses) {
    var _this11 = this;
    var relayPayloads = [];
    incrementalResponses.forEach(function (incrementalResponse) {
      var label = incrementalResponse.label,
        path = incrementalResponse.path,
        response = incrementalResponse.response;
      var resultForLabel = _this11._incrementalResults.get(label);
      if (resultForLabel == null) {
        resultForLabel = new Map();
        _this11._incrementalResults.set(label, resultForLabel);
      }
      if (label.indexOf('$defer$') !== -1) {
        var pathKey = path.map(String).join('.');
        var resultForPath = resultForLabel.get(pathKey);
        if (resultForPath == null) {
          resultForPath = {
            kind: 'response',
            responses: [incrementalResponse]
          };
          resultForLabel.set(pathKey, resultForPath);
          return;
        } else if (resultForPath.kind === 'response') {
          resultForPath.responses.push(incrementalResponse);
          return;
        }
        var placeholder = resultForPath.placeholder;
        !(placeholder.kind === 'defer') ?  true ? invariant(false, 'OperationExecutor: Expected data for path `%s` for label `%s` ' + 'to be data for @defer, was `@%s`.', pathKey, label, placeholder.kind) : 0 : void 0;
        relayPayloads.push(_this11._processDeferResponse(label, path, placeholder, response));
      } else {
        var _pathKey = path.slice(0, -2).map(String).join('.');
        var _resultForPath = resultForLabel.get(_pathKey);
        if (_resultForPath == null) {
          _resultForPath = {
            kind: 'response',
            responses: [incrementalResponse]
          };
          resultForLabel.set(_pathKey, _resultForPath);
          return;
        } else if (_resultForPath.kind === 'response') {
          _resultForPath.responses.push(incrementalResponse);
          return;
        }
        var _placeholder = _resultForPath.placeholder;
        !(_placeholder.kind === 'stream') ?  true ? invariant(false, 'OperationExecutor: Expected data for path `%s` for label `%s` ' + 'to be data for @stream, was `@%s`.', _pathKey, label, _placeholder.kind) : 0 : void 0;
        relayPayloads.push(_this11._processStreamResponse(label, path, _placeholder, response));
      }
    });
    return relayPayloads;
  };
  _proto._processDeferResponse = function _processDeferResponse(label, path, placeholder, response) {
    var _placeholder$actorIde;
    var parentID = placeholder.selector.dataID;
    var prevActorIdentifier = this._actorIdentifier;
    this._actorIdentifier = (_placeholder$actorIde = placeholder.actorIdentifier) !== null && _placeholder$actorIde !== void 0 ? _placeholder$actorIde : this._actorIdentifier;
    var relayPayload = this._normalizeResponse(response, placeholder.selector, placeholder.typeName, {
      actorIdentifier: this._actorIdentifier,
      getDataID: this._getDataID,
      path: placeholder.path,
      treatMissingFieldsAsNull: this._treatMissingFieldsAsNull,
      shouldProcessClientComponents: this._shouldProcessClientComponents
    });
    this._getPublishQueueAndSaveActor().commitPayload(this._operation, relayPayload);
    var parentEntry = this._source.get(parentID);
    !(parentEntry != null) ?  true ? invariant(false, 'OperationExecutor: Expected the parent record `%s` for @defer ' + 'data to exist.', parentID) : 0 : void 0;
    var fieldPayloads = parentEntry.fieldPayloads;
    if (fieldPayloads.length !== 0) {
      var _response$extensions2;
      var handleFieldsRelayPayload = {
        errors: null,
        fieldPayloads: fieldPayloads,
        incrementalPlaceholders: null,
        followupPayloads: null,
        source: RelayRecordSource.create(),
        isFinal: ((_response$extensions2 = response.extensions) === null || _response$extensions2 === void 0 ? void 0 : _response$extensions2.is_final) === true
      };
      this._getPublishQueueAndSaveActor().commitPayload(this._operation, handleFieldsRelayPayload);
    }
    this._actorIdentifier = prevActorIdentifier;
    return relayPayload;
  };
  _proto._processStreamResponse = function _processStreamResponse(label, path, placeholder, response) {
    var parentID = placeholder.parentID,
      node = placeholder.node,
      variables = placeholder.variables,
      actorIdentifier = placeholder.actorIdentifier;
    var prevActorIdentifier = this._actorIdentifier;
    this._actorIdentifier = actorIdentifier !== null && actorIdentifier !== void 0 ? actorIdentifier : this._actorIdentifier;
    var field = node.selections[0];
    !(field != null && field.kind === 'LinkedField' && field.plural === true) ?  true ? invariant(false, 'OperationExecutor: Expected @stream to be used on a plural field.') : 0 : void 0;
    var _this$_normalizeStrea = this._normalizeStreamItem(response, parentID, field, variables, path, placeholder.path),
      fieldPayloads = _this$_normalizeStrea.fieldPayloads,
      itemID = _this$_normalizeStrea.itemID,
      itemIndex = _this$_normalizeStrea.itemIndex,
      prevIDs = _this$_normalizeStrea.prevIDs,
      relayPayload = _this$_normalizeStrea.relayPayload,
      storageKey = _this$_normalizeStrea.storageKey;
    this._getPublishQueueAndSaveActor().commitPayload(this._operation, relayPayload, function (store) {
      var currentParentRecord = store.get(parentID);
      if (currentParentRecord == null) {
        return;
      }
      var currentItems = currentParentRecord.getLinkedRecords(storageKey);
      if (currentItems == null) {
        return;
      }
      if (currentItems.length !== prevIDs.length || currentItems.some(function (currentItem, index) {
        return prevIDs[index] !== (currentItem && currentItem.getDataID());
      })) {
        return;
      }
      var nextItems = (0, _toConsumableArray2["default"])(currentItems);
      nextItems[itemIndex] = store.get(itemID);
      currentParentRecord.setLinkedRecords(nextItems, storageKey);
    });
    if (fieldPayloads.length !== 0) {
      var handleFieldsRelayPayload = {
        errors: null,
        fieldPayloads: fieldPayloads,
        incrementalPlaceholders: null,
        followupPayloads: null,
        source: RelayRecordSource.create(),
        isFinal: false
      };
      this._getPublishQueueAndSaveActor().commitPayload(this._operation, handleFieldsRelayPayload);
    }
    this._actorIdentifier = prevActorIdentifier;
    return relayPayload;
  };
  _proto._normalizeStreamItem = function _normalizeStreamItem(response, parentID, field, variables, path, normalizationPath) {
    var _field$alias, _field$concreteType, _ref, _this$_getDataID;
    var data = response.data;
    !(typeof data === 'object') ?  true ? invariant(false, 'OperationExecutor: Expected the GraphQL @stream payload `data` ' + 'value to be an object.') : 0 : void 0;
    var responseKey = (_field$alias = field.alias) !== null && _field$alias !== void 0 ? _field$alias : field.name;
    var storageKey = getStorageKey(field, variables);
    var parentEntry = this._source.get(parentID);
    !(parentEntry != null) ?  true ? invariant(false, 'OperationExecutor: Expected the parent record `%s` for @stream ' + 'data to exist.', parentID) : 0 : void 0;
    var parentRecord = parentEntry.record,
      fieldPayloads = parentEntry.fieldPayloads;
    var prevIDs = RelayModernRecord.getLinkedRecordIDs(parentRecord, storageKey);
    !(prevIDs != null) ?  true ? invariant(false, 'OperationExecutor: Expected record `%s` to have fetched field ' + '`%s` with @stream.', parentID, field.name) : 0 : void 0;
    var finalPathEntry = path[path.length - 1];
    var itemIndex = parseInt(finalPathEntry, 10);
    !(itemIndex === finalPathEntry && itemIndex >= 0) ?  true ? invariant(false, 'OperationExecutor: Expected path for @stream to end in a ' + 'positive integer index, got `%s`', finalPathEntry) : 0 : void 0;
    var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : data[TYPENAME_KEY];
    !(typeof typeName === 'string') ?  true ? invariant(false, 'OperationExecutor: Expected @stream field `%s` to have a ' + '__typename.', field.name) : 0 : void 0;
    var itemID = (_ref = (_this$_getDataID = this._getDataID(data, typeName)) !== null && _this$_getDataID !== void 0 ? _this$_getDataID : prevIDs === null || prevIDs === void 0 ? void 0 : prevIDs[itemIndex]) !== null && _ref !== void 0 ? _ref : generateClientID(parentID, storageKey, itemIndex);
    !(typeof itemID === 'string') ?  true ? invariant(false, 'OperationExecutor: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : 0 : void 0;
    var selector = createNormalizationSelector(field, itemID, variables);
    var nextParentRecord = RelayModernRecord.clone(parentRecord);
    var nextIDs = (0, _toConsumableArray2["default"])(prevIDs);
    nextIDs[itemIndex] = itemID;
    RelayModernRecord.setLinkedRecordIDs(nextParentRecord, storageKey, nextIDs);
    this._source.set(parentID, {
      record: nextParentRecord,
      fieldPayloads: fieldPayloads
    });
    var relayPayload = this._normalizeResponse(response, selector, typeName, {
      actorIdentifier: this._actorIdentifier,
      getDataID: this._getDataID,
      path: [].concat((0, _toConsumableArray2["default"])(normalizationPath), [responseKey, String(itemIndex)]),
      treatMissingFieldsAsNull: this._treatMissingFieldsAsNull,
      shouldProcessClientComponents: this._shouldProcessClientComponents
    });
    return {
      fieldPayloads: fieldPayloads,
      itemID: itemID,
      itemIndex: itemIndex,
      prevIDs: prevIDs,
      relayPayload: relayPayload,
      storageKey: storageKey
    };
  };
  _proto._scheduleAsyncStoreUpdate = function _scheduleAsyncStoreUpdate(scheduleFn, completeFn) {
    var _this12 = this;
    this._completeFns.push(completeFn);
    if (this._asyncStoreUpdateDisposable != null) {
      return;
    }
    this._asyncStoreUpdateDisposable = scheduleFn(function () {
      _this12._asyncStoreUpdateDisposable = null;
      var updatedOwners = _this12._runPublishQueue();
      _this12._updateOperationTracker(updatedOwners);
      var _iterator2 = (0, _createForOfIteratorHelper2["default"])(_this12._completeFns),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var complete = _step2.value;
          complete();
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      _this12._completeFns = [];
    });
  };
  _proto._updateOperationTracker = function _updateOperationTracker(updatedOwners) {
    if (updatedOwners != null && updatedOwners.length > 0) {
      this._operationTracker.update(this._operation.request, new Set(updatedOwners));
    }
  };
  _proto._completeOperationTracker = function _completeOperationTracker() {
    this._operationTracker.complete(this._operation.request);
  };
  _proto._getPublishQueueAndSaveActor = function _getPublishQueueAndSaveActor() {
    this._seenActors.add(this._actorIdentifier);
    return this._getPublishQueue(this._actorIdentifier);
  };
  _proto._getActorsToVisit = function _getActorsToVisit() {
    if (this._seenActors.size === 0) {
      return new Set([this._actorIdentifier]);
    } else {
      return this._seenActors;
    }
  };
  _proto._runPublishQueue = function _runPublishQueue(operation) {
    var updatedOwners = new Set();
    var _iterator3 = (0, _createForOfIteratorHelper2["default"])(this._getActorsToVisit()),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var actorIdentifier = _step3.value;
        var owners = this._getPublishQueue(actorIdentifier).run(operation);
        owners.forEach(function (owner) {
          return updatedOwners.add(owner);
        });
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    return Array.from(updatedOwners);
  };
  _proto._retainData = function _retainData() {
    var _iterator4 = (0, _createForOfIteratorHelper2["default"])(this._getActorsToVisit()),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var actorIdentifier = _step4.value;
        if (!this._retainDisposables.has(actorIdentifier)) {
          this._retainDisposables.set(actorIdentifier, this._getStore(actorIdentifier).retain(this._operation));
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  };
  _proto._disposeRetainedData = function _disposeRetainedData() {
    var _iterator5 = (0, _createForOfIteratorHelper2["default"])(this._retainDisposables.values()),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var disposable = _step5.value;
        disposable.dispose();
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
    this._retainDisposables.clear();
  };
  _proto._expectOperationLoader = function _expectOperationLoader() {
    var operationLoader = this._operationLoader;
    !operationLoader ?  true ? invariant(false, 'OperationExecutor: Expected an operationLoader to be ' + 'configured when using `@match`.') : 0 : void 0;
    return operationLoader;
  };
  return Executor;
}();
function partitionGraphQLResponses(responses) {
  var nonIncrementalResponses = [];
  var incrementalResponses = [];
  responses.forEach(function (response) {
    if (response.path != null || response.label != null) {
      var label = response.label,
        path = response.path;
      if (label == null || path == null) {
         true ?  true ? invariant(false, 'OperationExecutor: invalid incremental payload, expected ' + '`path` and `label` to either both be null/undefined, or ' + '`path` to be an `Array<string | number>` and `label` to be a ' + '`string`.') : 0 : 0;
      }
      incrementalResponses.push({
        label: label,
        path: path,
        response: response
      });
    } else {
      nonIncrementalResponses.push(response);
    }
  });
  return [nonIncrementalResponses, incrementalResponses];
}
function stableStringify(value) {
  var _JSON$stringify;
  return (_JSON$stringify = JSON.stringify(stableCopy(value))) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : '';
}
function validateOptimisticResponsePayload(payload) {
  var incrementalPlaceholders = payload.incrementalPlaceholders;
  if (incrementalPlaceholders != null && incrementalPlaceholders.length !== 0) {
     true ?  true ? invariant(false, 'OperationExecutor: optimistic responses cannot be returned ' + 'for operations that use incremental data delivery (@defer, ' + '@stream, and @stream_connection).') : 0 : 0;
  }
}
module.exports = {
  execute: execute
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js"));
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  getArgumentValues = _require.getArgumentValues;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function getFragmentVariables(fragment, rootVariables, argumentVariables) {
  if (fragment.argumentDefinitions == null) {
    return argumentVariables;
  }
  var variables;
  fragment.argumentDefinitions.forEach(function (definition) {
    if (argumentVariables.hasOwnProperty(definition.name)) {
      return;
    }
    variables = variables || (0, _objectSpread2["default"])({}, argumentVariables);
    switch (definition.kind) {
      case 'LocalArgument':
        variables[definition.name] = definition.defaultValue;
        break;
      case 'RootArgument':
        if (!rootVariables.hasOwnProperty(definition.name)) {
          variables[definition.name] = undefined;
          break;
        }
        variables[definition.name] = rootVariables[definition.name];
        break;
      default:
        definition;
         true ?  true ? invariant(false, 'RelayConcreteVariables: Unexpected node kind `%s` in fragment `%s`.', definition.kind, fragment.name) : 0 : 0;
    }
  });
  return variables || argumentVariables;
}
function getOperationVariables(operation, providedVariables, variables) {
  var operationVariables = {};
  operation.argumentDefinitions.forEach(function (def) {
    var value = def.defaultValue;
    if (variables[def.name] != null) {
      value = variables[def.name];
    }
    operationVariables[def.name] = value;
  });
  if (providedVariables != null) {
    Object.keys(providedVariables).forEach(function (varName) {
      operationVariables[varName] = providedVariables[varName].get();
    });
  }
  return operationVariables;
}
function getLocalVariables(currentVariables, argumentDefinitions, args) {
  if (argumentDefinitions == null) {
    return currentVariables;
  }
  var nextVariables = (0, _objectSpread2["default"])({}, currentVariables);
  var nextArgs = args ? getArgumentValues(args, currentVariables) : {};
  argumentDefinitions.forEach(function (def) {
    var _nextArgs$def$name;
    var value = (_nextArgs$def$name = nextArgs[def.name]) !== null && _nextArgs$def$name !== void 0 ? _nextArgs$def$name : def.defaultValue;
    nextVariables[def.name] = value;
  });
  return nextVariables;
}
module.exports = {
  getLocalVariables: getLocalVariables,
  getFragmentVariables: getFragmentVariables,
  getOperationVariables: getOperationVariables
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayErrorTrie.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"));
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var _inheritsLoose2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/inheritsLoose.js"));
var _wrapNativeSuper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/wrapNativeSuper.js"));
var _toConsumableArray2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/toConsumableArray.js"));
var _excluded = ["path", "locations"];
var RelayFeatureFlags = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js");
var SELF = Symbol('$SELF');
var RelayFieldError = /*#__PURE__*/function (_Error) {
  (0, _inheritsLoose2["default"])(RelayFieldError, _Error);
  function RelayFieldError(message) {
    var _this;
    var errors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    _this = _Error.call(this, message) || this;
    _this.name = 'RelayFieldError';
    _this.message = message;
    _this.errors = errors;
    return _this;
  }
  return RelayFieldError;
}( /*#__PURE__*/(0, _wrapNativeSuper2["default"])(Error));
function buildErrorTrie(errors) {
  if (errors == null) {
    return null;
  }
  if (!RelayFeatureFlags.ENABLE_FIELD_ERROR_HANDLING) {
    return null;
  }
  var trie = new Map();
  var _iterator = (0, _createForOfIteratorHelper2["default"])(errors),
    _step;
  try {
    ERRORS: for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _step.value,
        path = _step$value.path,
        _ = _step$value.locations,
        error = (0, _objectWithoutPropertiesLoose2["default"])(_step$value, _excluded);
      if (path == null) {
        continue;
      }
      var length = path.length;
      if (length === 0) {
        continue;
      }
      var lastIndex = length - 1;
      var currentTrie = trie;
      for (var index = 0; index < lastIndex; index++) {
        var key = path[index];
        var existingValue = currentTrie.get(key);
        if (existingValue instanceof Map) {
          currentTrie = existingValue;
          continue;
        }
        var newValue = new Map();
        if (Array.isArray(existingValue)) {
          newValue.set(SELF, existingValue);
        }
        currentTrie.set(key, newValue);
        currentTrie = newValue;
      }
      var lastKey = path[lastIndex];
      var container = currentTrie.get(lastKey);
      if (container instanceof Map) {
        currentTrie = container;
        container = currentTrie.get(lastKey);
        lastKey = SELF;
      }
      if (Array.isArray(container)) {
        container.push(error);
      } else {
        currentTrie.set(lastKey, [error]);
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return trie;
}
function getErrorsByKey(trie, key) {
  var value = trie.get(key);
  if (value == null) {
    return null;
  }
  if (Array.isArray(value)) {
    return value;
  }
  var errors = [];
  recursivelyCopyErrorsIntoArray(value, errors);
  return errors;
}
function recursivelyCopyErrorsIntoArray(trieOrSet, errors) {
  var _iterator2 = (0, _createForOfIteratorHelper2["default"])(trieOrSet),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var _step2$value = _step2.value,
        childKey = _step2$value[0],
        value = _step2$value[1];
      var oldLength = errors.length;
      if (Array.isArray(value)) {
        errors.push.apply(errors, (0, _toConsumableArray2["default"])(value));
      } else {
        recursivelyCopyErrorsIntoArray(value, errors);
      }
      if (childKey === SELF) {
        continue;
      }
      var newLength = errors.length;
      for (var index = oldLength; index < newLength; index++) {
        var error = errors[index];
        if (error.path == null) {
          errors[index] = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, error), {}, {
            path: [childKey]
          });
        } else {
          error.path.unshift(childKey);
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}
function getNestedErrorTrieByKey(trie, key) {
  var value = trie.get(key);
  if (value instanceof Map) {
    return value;
  }
  return null;
}
module.exports = {
  SELF: SELF,
  buildErrorTrie: buildErrorTrie,
  getNestedErrorTrieByKey: getNestedErrorTrieByKey,
  getErrorsByKey: getErrorsByKey,
  RelayFieldError: RelayFieldError
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernEnvironment.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js"));
var RelayDefaultHandlerProvider = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/handlers/RelayDefaultHandlerProvider.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/multi-actor-environment/ActorIdentifier.js"),
  INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = _require.INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,
  assertInternalActorIdentifier = _require.assertInternalActorIdentifier;
var RelayObservable = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/RelayObservable.js");
var wrapNetworkWithLogObserver = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/wrapNetworkWithLogObserver.js");
var RelayOperationTracker = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayOperationTracker.js");
var registerEnvironmentWithDevTools = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/registerEnvironmentWithDevTools.js");
var defaultGetDataID = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/defaultGetDataID.js");
var defaultRelayFieldLogger = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/defaultRelayFieldLogger.js");
var normalizeResponse = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/normalizeResponse.js");
var OperationExecutor = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/OperationExecutor.js");
var RelayPublishQueue = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayPublishQueue.js");
var RelayRecordSource = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayRecordSource.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var RelayModernEnvironment = /*#__PURE__*/function () {
  function RelayModernEnvironment(config) {
    var _this = this;
    var _config$log, _config$relayFieldLog, _config$UNSTABLE_defa, _config$getDataID, _config$missingFieldH, _config$handlerProvid, _config$scheduler, _config$isServer, _config$normalizeResp, _config$operationTrac;
    this.configName = config.configName;
    this._treatMissingFieldsAsNull = config.treatMissingFieldsAsNull === true;
    var operationLoader = config.operationLoader;
    if (true) {
      if (operationLoader != null) {
        !(typeof operationLoader === 'object' && typeof operationLoader.get === 'function' && typeof operationLoader.load === 'function') ?  true ? invariant(false, 'RelayModernEnvironment: Expected `operationLoader` to be an object ' + 'with get() and load() functions, got `%s`.', operationLoader) : 0 : void 0;
      }
    }
    this.__log = (_config$log = config.log) !== null && _config$log !== void 0 ? _config$log : emptyFunction;
    this.relayFieldLogger = (_config$relayFieldLog = config.relayFieldLogger) !== null && _config$relayFieldLog !== void 0 ? _config$relayFieldLog : defaultRelayFieldLogger;
    this._defaultRenderPolicy = (_config$UNSTABLE_defa = config.UNSTABLE_defaultRenderPolicy) !== null && _config$UNSTABLE_defa !== void 0 ? _config$UNSTABLE_defa : 'partial';
    this._operationLoader = operationLoader;
    this._operationExecutions = new Map();
    this._network = wrapNetworkWithLogObserver(this, config.network);
    this._getDataID = (_config$getDataID = config.getDataID) !== null && _config$getDataID !== void 0 ? _config$getDataID : defaultGetDataID;
    this._missingFieldHandlers = (_config$missingFieldH = config.missingFieldHandlers) !== null && _config$missingFieldH !== void 0 ? _config$missingFieldH : [];
    this._publishQueue = new RelayPublishQueue(config.store, (_config$handlerProvid = config.handlerProvider) !== null && _config$handlerProvid !== void 0 ? _config$handlerProvid : RelayDefaultHandlerProvider, this._getDataID, this._missingFieldHandlers);
    this._scheduler = (_config$scheduler = config.scheduler) !== null && _config$scheduler !== void 0 ? _config$scheduler : null;
    this._store = config.store;
    this.options = config.options;
    this._isServer = (_config$isServer = config.isServer) !== null && _config$isServer !== void 0 ? _config$isServer : false;
    this._normalizeResponse = (_config$normalizeResp = config.normalizeResponse) !== null && _config$normalizeResp !== void 0 ? _config$normalizeResp : normalizeResponse;
    this.__setNet = function (newNet) {
      return _this._network = wrapNetworkWithLogObserver(_this, newNet);
    };
    if (true) {
      var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/StoreInspector.js"),
        inspect = _require2.inspect;
      this.DEBUG_inspect = function (dataID) {
        return inspect(_this, dataID);
      };
    }
    this._operationTracker = (_config$operationTrac = config.operationTracker) !== null && _config$operationTrac !== void 0 ? _config$operationTrac : new RelayOperationTracker();
    this._shouldProcessClientComponents = config.shouldProcessClientComponents;
    registerEnvironmentWithDevTools(this);
  }
  var _proto = RelayModernEnvironment.prototype;
  _proto.getStore = function getStore() {
    return this._store;
  };
  _proto.getNetwork = function getNetwork() {
    return this._network;
  };
  _proto.getOperationTracker = function getOperationTracker() {
    return this._operationTracker;
  };
  _proto.getScheduler = function getScheduler() {
    return this._scheduler;
  };
  _proto.isRequestActive = function isRequestActive(requestIdentifier) {
    var activeState = this._operationExecutions.get(requestIdentifier);
    return activeState === 'active';
  };
  _proto.UNSTABLE_getDefaultRenderPolicy = function UNSTABLE_getDefaultRenderPolicy() {
    return this._defaultRenderPolicy;
  };
  _proto.applyUpdate = function applyUpdate(optimisticUpdate) {
    var _this2 = this;
    var dispose = function dispose() {
      _this2._scheduleUpdates(function () {
        _this2._publishQueue.revertUpdate(optimisticUpdate);
        _this2._publishQueue.run();
      });
    };
    this._scheduleUpdates(function () {
      _this2._publishQueue.applyUpdate(optimisticUpdate);
      _this2._publishQueue.run();
    });
    return {
      dispose: dispose
    };
  };
  _proto.revertUpdate = function revertUpdate(update) {
    var _this3 = this;
    this._scheduleUpdates(function () {
      _this3._publishQueue.revertUpdate(update);
      _this3._publishQueue.run();
    });
  };
  _proto.replaceUpdate = function replaceUpdate(update, newUpdate) {
    var _this4 = this;
    this._scheduleUpdates(function () {
      _this4._publishQueue.revertUpdate(update);
      _this4._publishQueue.applyUpdate(newUpdate);
      _this4._publishQueue.run();
    });
  };
  _proto.applyMutation = function applyMutation(optimisticConfig) {
    var subscription = this._execute({
      createSource: function createSource() {
        return RelayObservable.create(function (_sink) {});
      },
      isClientPayload: false,
      operation: optimisticConfig.operation,
      optimisticConfig: optimisticConfig,
      updater: null
    }).subscribe({});
    return {
      dispose: function dispose() {
        return subscription.unsubscribe();
      }
    };
  };
  _proto.check = function check(operation) {
    if (this._missingFieldHandlers.length === 0 && !operationHasClientAbstractTypes(operation)) {
      return this._store.check(operation);
    }
    return this._checkSelectorAndHandleMissingFields(operation, this._missingFieldHandlers);
  };
  _proto.commitPayload = function commitPayload(operation, payload) {
    this._execute({
      createSource: function createSource() {
        return RelayObservable.from({
          data: payload
        });
      },
      isClientPayload: true,
      operation: operation,
      optimisticConfig: null,
      updater: null
    }).subscribe({});
  };
  _proto.commitUpdate = function commitUpdate(updater) {
    var _this5 = this;
    this._scheduleUpdates(function () {
      _this5._publishQueue.commitUpdate(updater);
      _this5._publishQueue.run();
    });
  };
  _proto.lookup = function lookup(readSelector) {
    return this._store.lookup(readSelector);
  };
  _proto.subscribe = function subscribe(snapshot, callback) {
    return this._store.subscribe(snapshot, callback);
  };
  _proto.retain = function retain(operation) {
    return this._store.retain(operation);
  };
  _proto.isServer = function isServer() {
    return this._isServer;
  };
  _proto._checkSelectorAndHandleMissingFields = function _checkSelectorAndHandleMissingFields(operation, handlers) {
    var _this6 = this;
    var target = RelayRecordSource.create();
    var source = this._store.getSource();
    var result = this._store.check(operation, {
      handlers: handlers,
      defaultActorIdentifier: INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,
      getSourceForActor: function getSourceForActor(actorIdentifier) {
        assertInternalActorIdentifier(actorIdentifier);
        return source;
      },
      getTargetForActor: function getTargetForActor(actorIdentifier) {
        assertInternalActorIdentifier(actorIdentifier);
        return target;
      }
    });
    if (target.size() > 0) {
      this._scheduleUpdates(function () {
        _this6._publishQueue.commitSource(target);
        _this6._publishQueue.run();
      });
    }
    return result;
  };
  _proto._scheduleUpdates = function _scheduleUpdates(task) {
    var scheduler = this._scheduler;
    if (scheduler != null) {
      scheduler.schedule(task);
    } else {
      task();
    }
  };
  _proto.execute = function execute(_ref) {
    var _this7 = this;
    var operation = _ref.operation;
    return this._execute({
      createSource: function createSource() {
        return _this7.getNetwork().execute(operation.request.node.params, operation.request.variables, operation.request.cacheConfig || {}, null);
      },
      isClientPayload: false,
      operation: operation,
      optimisticConfig: null,
      updater: null
    });
  };
  _proto.executeSubscription = function executeSubscription(_ref2) {
    var _this8 = this;
    var operation = _ref2.operation,
      updater = _ref2.updater;
    return this._execute({
      createSource: function createSource() {
        return _this8.getNetwork().execute(operation.request.node.params, operation.request.variables, operation.request.cacheConfig || {}, null);
      },
      isClientPayload: false,
      operation: operation,
      optimisticConfig: null,
      updater: updater
    });
  };
  _proto.executeMutation = function executeMutation(_ref3) {
    var _this9 = this;
    var operation = _ref3.operation,
      optimisticResponse = _ref3.optimisticResponse,
      optimisticUpdater = _ref3.optimisticUpdater,
      updater = _ref3.updater,
      uploadables = _ref3.uploadables;
    var optimisticConfig;
    if (optimisticResponse || optimisticUpdater) {
      optimisticConfig = {
        operation: operation,
        response: optimisticResponse,
        updater: optimisticUpdater
      };
    }
    return this._execute({
      createSource: function createSource() {
        return _this9.getNetwork().execute(operation.request.node.params, operation.request.variables, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, operation.request.cacheConfig), {}, {
          force: true
        }), uploadables);
      },
      isClientPayload: false,
      operation: operation,
      optimisticConfig: optimisticConfig,
      updater: updater
    });
  };
  _proto.executeWithSource = function executeWithSource(_ref4) {
    var operation = _ref4.operation,
      source = _ref4.source;
    return this._execute({
      createSource: function createSource() {
        return source;
      },
      isClientPayload: false,
      operation: operation,
      optimisticConfig: null,
      updater: null
    });
  };
  _proto.toJSON = function toJSON() {
    var _this$configName;
    return "RelayModernEnvironment(".concat((_this$configName = this.configName) !== null && _this$configName !== void 0 ? _this$configName : '', ")");
  };
  _proto._execute = function _execute(_ref5) {
    var _this10 = this;
    var createSource = _ref5.createSource,
      isClientPayload = _ref5.isClientPayload,
      operation = _ref5.operation,
      optimisticConfig = _ref5.optimisticConfig,
      updater = _ref5.updater;
    var publishQueue = this._publishQueue;
    var store = this._store;
    return RelayObservable.create(function (sink) {
      var executor = OperationExecutor.execute({
        actorIdentifier: INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,
        getDataID: _this10._getDataID,
        isClientPayload: isClientPayload,
        log: _this10.__log,
        operation: operation,
        operationExecutions: _this10._operationExecutions,
        operationLoader: _this10._operationLoader,
        operationTracker: _this10._operationTracker,
        optimisticConfig: optimisticConfig,
        getPublishQueue: function getPublishQueue(actorIdentifier) {
          assertInternalActorIdentifier(actorIdentifier);
          return publishQueue;
        },
        scheduler: _this10._scheduler,
        shouldProcessClientComponents: _this10._shouldProcessClientComponents,
        sink: sink,
        source: createSource(),
        getStore: function getStore(actorIdentifier) {
          assertInternalActorIdentifier(actorIdentifier);
          return store;
        },
        treatMissingFieldsAsNull: _this10._treatMissingFieldsAsNull,
        updater: updater,
        normalizeResponse: _this10._normalizeResponse
      });
      return function () {
        return executor.cancel();
      };
    });
  };
  return RelayModernEnvironment;
}();
function operationHasClientAbstractTypes(operation) {
  return operation.root.node.kind === 'Operation' && operation.root.node.clientAbstractTypes != null;
}
RelayModernEnvironment.prototype['@@RelayModernEnvironment'] = true;
function emptyFunction() {}
module.exports = RelayModernEnvironment;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernFragmentSpecResolver.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js"));
var _defineProperty2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/defineProperty.js"));
var getPendingOperationsForFragment = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getPendingOperationsForFragment.js");
var handlePotentialSnapshotErrors = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/handlePotentialSnapshotErrors.js");
var isScalarAndEqual = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/isScalarAndEqual.js");
var recycleNodesInto = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/recycleNodesInto.js");
var RelayFeatureFlags = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js"),
  createRequestDescriptor = _require.createRequestDescriptor;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernSelector.js"),
  areEqualSelectors = _require2.areEqualSelectors,
  createReaderSelector = _require2.createReaderSelector,
  getSelectorsFromObject = _require2.getSelectorsFromObject;
var areEqual = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/areEqual.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
var RelayModernFragmentSpecResolver = /*#__PURE__*/function () {
  function RelayModernFragmentSpecResolver(context, fragments, props, callback, rootIsQueryRenderer) {
    var _this = this;
    (0, _defineProperty2["default"])(this, "_onChange", function () {
      _this._stale = true;
      if (typeof _this._callback === 'function') {
        _this._callback();
      }
    });
    this._callback = callback;
    this._context = context;
    this._data = {};
    this._fragments = fragments;
    this._props = {};
    this._resolvers = {};
    this._stale = false;
    this._rootIsQueryRenderer = rootIsQueryRenderer;
    this.setProps(props);
  }
  var _proto = RelayModernFragmentSpecResolver.prototype;
  _proto.dispose = function dispose() {
    for (var key in this._resolvers) {
      if (this._resolvers.hasOwnProperty(key)) {
        disposeCallback(this._resolvers[key]);
      }
    }
  };
  _proto.resolve = function resolve() {
    if (this._stale) {
      var prevData = this._data;
      var nextData;
      for (var key in this._resolvers) {
        if (this._resolvers.hasOwnProperty(key)) {
          var resolver = this._resolvers[key];
          var prevItem = prevData[key];
          if (resolver) {
            var nextItem = resolver.resolve();
            if (nextData || nextItem !== prevItem) {
              nextData = nextData || (0, _objectSpread2["default"])({}, prevData);
              nextData[key] = nextItem;
            }
          } else {
            var prop = this._props[key];
            var _nextItem = prop !== undefined ? prop : null;
            if (nextData || !isScalarAndEqual(_nextItem, prevItem)) {
              nextData = nextData || (0, _objectSpread2["default"])({}, prevData);
              nextData[key] = _nextItem;
            }
          }
        }
      }
      this._data = nextData || prevData;
      this._stale = false;
    }
    return this._data;
  };
  _proto.setCallback = function setCallback(props, callback) {
    this._callback = callback;
    if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
      this.setProps(props);
    }
  };
  _proto.setProps = function setProps(props) {
    this._props = {};
    var ownedSelectors = getSelectorsFromObject(this._fragments, props);
    for (var key in ownedSelectors) {
      if (ownedSelectors.hasOwnProperty(key)) {
        var ownedSelector = ownedSelectors[key];
        var resolver = this._resolvers[key];
        if (ownedSelector == null) {
          if (resolver != null) {
            resolver.dispose();
          }
          resolver = null;
        } else if (ownedSelector.kind === 'PluralReaderSelector') {
          if (resolver == null) {
            resolver = new SelectorListResolver(this._context.environment, this._rootIsQueryRenderer, ownedSelector, this._callback != null, this._onChange);
          } else {
            !(resolver instanceof SelectorListResolver) ?  true ? invariant(false, 'RelayModernFragmentSpecResolver: Expected prop `%s` to always be an array.', key) : 0 : void 0;
            resolver.setSelector(ownedSelector);
          }
        } else {
          if (resolver == null) {
            resolver = new SelectorResolver(this._context.environment, this._rootIsQueryRenderer, ownedSelector, this._callback != null, this._onChange);
          } else {
            !(resolver instanceof SelectorResolver) ?  true ? invariant(false, 'RelayModernFragmentSpecResolver: Expected prop `%s` to always be an object.', key) : 0 : void 0;
            resolver.setSelector(ownedSelector);
          }
        }
        this._props[key] = props[key];
        this._resolvers[key] = resolver;
      }
    }
    this._stale = true;
  };
  _proto.setVariables = function setVariables(variables, request) {
    for (var key in this._resolvers) {
      if (this._resolvers.hasOwnProperty(key)) {
        var resolver = this._resolvers[key];
        if (resolver) {
          resolver.setVariables(variables, request);
        }
      }
    }
    this._stale = true;
  };
  return RelayModernFragmentSpecResolver;
}();
var SelectorResolver = /*#__PURE__*/function () {
  function SelectorResolver(environment, rootIsQueryRenderer, selector, subscribeOnConstruction, callback) {
    var _this2 = this;
    (0, _defineProperty2["default"])(this, "_onChange", function (snapshot) {
      _this2._data = snapshot.data;
      _this2._isMissingData = snapshot.isMissingData;
      _this2._missingRequiredFields = snapshot.missingRequiredFields;
      _this2._errorResponseFields = snapshot.errorResponseFields;
      _this2._relayResolverErrors = snapshot.relayResolverErrors;
      _this2._callback();
    });
    var _snapshot = environment.lookup(selector);
    this._callback = callback;
    this._data = _snapshot.data;
    this._isMissingData = _snapshot.isMissingData;
    this._missingRequiredFields = _snapshot.missingRequiredFields;
    this._errorResponseFields = _snapshot.errorResponseFields;
    this._relayResolverErrors = _snapshot.relayResolverErrors;
    this._environment = environment;
    this._rootIsQueryRenderer = rootIsQueryRenderer;
    this._selector = selector;
    if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {
      if (subscribeOnConstruction) {
        this._subscription = environment.subscribe(_snapshot, this._onChange);
      }
    } else {
      this._subscription = environment.subscribe(_snapshot, this._onChange);
    }
  }
  var _proto2 = SelectorResolver.prototype;
  _proto2.dispose = function dispose() {
    if (this._subscription) {
      this._subscription.dispose();
      this._subscription = null;
    }
  };
  _proto2.resolve = function resolve() {
    if (this._isMissingData === true) {
      var pendingOperationsResult = getPendingOperationsForFragment(this._environment, this._selector.node, this._selector.owner);
      var promise = pendingOperationsResult === null || pendingOperationsResult === void 0 ? void 0 : pendingOperationsResult.promise;
      if (promise != null) {
        if (this._rootIsQueryRenderer) {
           true ? warning(false, 'Relay: Relay Container for fragment `%s` has missing data and ' + 'would suspend. When using features such as @defer or @module, ' + 'use `useFragment` instead of a Relay Container.', this._selector.node.name) : 0;
        } else {
          var _pendingOperationsRes;
          var pendingOperations = (_pendingOperationsRes = pendingOperationsResult === null || pendingOperationsResult === void 0 ? void 0 : pendingOperationsResult.pendingOperations) !== null && _pendingOperationsRes !== void 0 ? _pendingOperationsRes : [];
           true ? warning(false, 'Relay: Relay Container for fragment `%s` suspended. When using ' + 'features such as @defer or @module, use `useFragment` instead ' + 'of a Relay Container.', this._selector.node.name) : 0;
          this._environment.__log({
            name: 'suspense.fragment',
            data: this._data,
            fragment: this._selector.node,
            isRelayHooks: false,
            isMissingData: this._isMissingData,
            isPromiseCached: false,
            pendingOperations: pendingOperations
          });
          throw promise;
        }
      }
    }
    handlePotentialSnapshotErrors(this._environment, this._missingRequiredFields, this._relayResolverErrors, this._errorResponseFields);
    return this._data;
  };
  _proto2.setSelector = function setSelector(selector) {
    if (this._subscription != null && areEqualSelectors(selector, this._selector)) {
      return;
    }
    this.dispose();
    var snapshot = this._environment.lookup(selector);
    this._data = recycleNodesInto(this._data, snapshot.data);
    this._isMissingData = snapshot.isMissingData;
    this._missingRequiredFields = snapshot.missingRequiredFields;
    this._errorResponseFields = snapshot.errorResponseFields;
    this._relayResolverErrors = snapshot.relayResolverErrors;
    this._selector = selector;
    this._subscription = this._environment.subscribe(snapshot, this._onChange);
  };
  _proto2.setVariables = function setVariables(variables, request) {
    if (areEqual(variables, this._selector.variables)) {
      return;
    }
    var requestDescriptor = createRequestDescriptor(request, variables);
    var selector = createReaderSelector(this._selector.node, this._selector.dataID, variables, requestDescriptor);
    this.setSelector(selector);
  };
  return SelectorResolver;
}();
var SelectorListResolver = /*#__PURE__*/function () {
  function SelectorListResolver(environment, rootIsQueryRenderer, selector, subscribeOnConstruction, callback) {
    var _this3 = this;
    (0, _defineProperty2["default"])(this, "_onChange", function (data) {
      _this3._stale = true;
      _this3._callback();
    });
    this._callback = callback;
    this._data = [];
    this._environment = environment;
    this._resolvers = [];
    this._stale = true;
    this._rootIsQueryRenderer = rootIsQueryRenderer;
    this._subscribeOnConstruction = subscribeOnConstruction;
    this.setSelector(selector);
  }
  var _proto3 = SelectorListResolver.prototype;
  _proto3.dispose = function dispose() {
    this._resolvers.forEach(disposeCallback);
  };
  _proto3.resolve = function resolve() {
    if (this._stale) {
      var prevData = this._data;
      var nextData;
      for (var ii = 0; ii < this._resolvers.length; ii++) {
        var prevItem = prevData[ii];
        var nextItem = this._resolvers[ii].resolve();
        if (nextData || nextItem !== prevItem) {
          nextData = nextData || prevData.slice(0, ii);
          nextData.push(nextItem);
        }
      }
      if (!nextData && this._resolvers.length !== prevData.length) {
        nextData = prevData.slice(0, this._resolvers.length);
      }
      this._data = nextData || prevData;
      this._stale = false;
    }
    return this._data;
  };
  _proto3.setSelector = function setSelector(selector) {
    var selectors = selector.selectors;
    while (this._resolvers.length > selectors.length) {
      var resolver = this._resolvers.pop();
      resolver.dispose();
    }
    for (var ii = 0; ii < selectors.length; ii++) {
      if (ii < this._resolvers.length) {
        this._resolvers[ii].setSelector(selectors[ii]);
      } else {
        this._resolvers[ii] = new SelectorResolver(this._environment, this._rootIsQueryRenderer, selectors[ii], this._subscribeOnConstruction, this._onChange);
      }
    }
    this._stale = true;
  };
  _proto3.setVariables = function setVariables(variables, request) {
    this._resolvers.forEach(function (resolver) {
      return resolver.setVariables(variables, request);
    });
    this._stale = true;
  };
  return SelectorListResolver;
}();
function disposeCallback(disposable) {
  disposable && disposable.dispose();
}
module.exports = RelayModernFragmentSpecResolver;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var deepFreeze = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/deepFreeze.js");
var getRequestIdentifier = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getRequestIdentifier.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js"),
  getOperationVariables = _require.getOperationVariables;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernSelector.js"),
  createNormalizationSelector = _require2.createNormalizationSelector,
  createReaderSelector = _require2.createReaderSelector;
var _require3 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  ROOT_ID = _require3.ROOT_ID;
function createOperationDescriptor(request, variables, cacheConfig) {
  var dataID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ROOT_ID;
  var operation = request.operation;
  var operationVariables = getOperationVariables(operation, request.params.providedVariables, variables);
  var requestDescriptor = createRequestDescriptor(request, operationVariables, cacheConfig);
  var operationDescriptor = {
    fragment: createReaderSelector(request.fragment, dataID, operationVariables, requestDescriptor),
    request: requestDescriptor,
    root: createNormalizationSelector(operation, dataID, operationVariables)
  };
  if (true) {
    Object.freeze(operationDescriptor.fragment);
    Object.freeze(operationDescriptor.root);
    Object.freeze(operationDescriptor);
  }
  return operationDescriptor;
}
function createRequestDescriptor(request, variables, cacheConfig) {
  var requestDescriptor = {
    identifier: getRequestIdentifier(request.params, variables),
    node: request,
    variables: variables,
    cacheConfig: cacheConfig
  };
  if (true) {
    deepFreeze(variables);
    Object.freeze(request);
    Object.freeze(requestDescriptor);
  }
  return requestDescriptor;
}
module.exports = {
  createOperationDescriptor: createOperationDescriptor,
  createRequestDescriptor: createRequestDescriptor
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _defineProperty2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/defineProperty.js"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"));
var _toPropertyKey2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/toPropertyKey.js"));
var _objectSpread2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js"));
var deepFreeze = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/deepFreeze.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ClientID.js"),
  generateClientObjectClientID = _require.generateClientObjectClientID,
  isClientID = _require.isClientID;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/experimental-live-resolvers/LiveResolverSuspenseSentinel.js"),
  isSuspenseSentinel = _require2.isSuspenseSentinel;
var _require3 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  ACTOR_IDENTIFIER_KEY = _require3.ACTOR_IDENTIFIER_KEY,
  ERRORS_KEY = _require3.ERRORS_KEY,
  ID_KEY = _require3.ID_KEY,
  INVALIDATED_AT_KEY = _require3.INVALIDATED_AT_KEY,
  REF_KEY = _require3.REF_KEY,
  REFS_KEY = _require3.REFS_KEY,
  RELAY_RESOLVER_VALUE_KEY = _require3.RELAY_RESOLVER_VALUE_KEY,
  ROOT_ID = _require3.ROOT_ID,
  TYPENAME_KEY = _require3.TYPENAME_KEY;
var areEqual = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/areEqual.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
function clone(record) {
  return (0, _objectSpread2["default"])({}, record);
}
function copyFields(source, sink) {
  for (var key in source) {
    if (source.hasOwnProperty(key)) {
      if (key !== ID_KEY && key !== TYPENAME_KEY) {
        sink[key] = source[key];
      }
    }
  }
}
function create(dataID, typeName) {
  var record = {};
  record[ID_KEY] = dataID;
  record[TYPENAME_KEY] = typeName;
  return record;
}
function fromObject(json) {
  return json;
}
function getDataID(record) {
  return record[ID_KEY];
}
function getFields(record) {
  if (ERRORS_KEY in record) {
    return Object.keys(record).filter(function (field) {
      return field !== ERRORS_KEY;
    });
  }
  return Object.keys(record);
}
function getType(record) {
  return record[TYPENAME_KEY];
}
function getErrors(record, storageKey) {
  var _record$ERRORS_KEY;
  return (_record$ERRORS_KEY = record[ERRORS_KEY]) === null || _record$ERRORS_KEY === void 0 ? void 0 : _record$ERRORS_KEY[storageKey];
}
function getValue(record, storageKey) {
  var value = record[storageKey];
  if (value && typeof value === 'object') {
    !(!value.hasOwnProperty(REF_KEY) && !value.hasOwnProperty(REFS_KEY)) ?  true ? invariant(false, 'RelayModernRecord.getValue(): Expected a scalar (non-link) value for `%s.%s` ' + 'but found %s.', record[ID_KEY], storageKey, value.hasOwnProperty(REF_KEY) ? 'a linked record' : 'plural linked records') : 0 : void 0;
  }
  return value;
}
function hasValue(record, storageKey) {
  return storageKey in record;
}
function getLinkedRecordID(record, storageKey) {
  var maybeLink = record[storageKey];
  if (maybeLink == null) {
    return maybeLink;
  }
  var link = maybeLink;
  !(typeof link === 'object' && link && typeof link[REF_KEY] === 'string') ?  true ? invariant(false, 'RelayModernRecord.getLinkedRecordID(): Expected `%s.%s` to be a linked ID, ' + 'was `%s`.%s', record[ID_KEY], storageKey, JSON.stringify(link), typeof link === 'object' && link[REFS_KEY] !== undefined ? ' It appears to be a plural linked record: did you mean to call ' + 'getLinkedRecords() instead of getLinkedRecord()?' : '') : 0 : void 0;
  return link[REF_KEY];
}
function hasLinkedRecordID(record, storageKey) {
  var maybeLink = record[storageKey];
  if (maybeLink == null) {
    return false;
  }
  var link = maybeLink;
  return typeof link === 'object' && link && typeof link[REF_KEY] === 'string';
}
function getLinkedRecordIDs(record, storageKey) {
  var links = record[storageKey];
  if (links == null) {
    return links;
  }
  !(typeof links === 'object' && Array.isArray(links[REFS_KEY])) ?  true ? invariant(false, 'RelayModernRecord.getLinkedRecordIDs(): Expected `%s.%s` to contain an array ' + 'of linked IDs, got `%s`.%s', record[ID_KEY], storageKey, JSON.stringify(links), typeof links === 'object' && links[REF_KEY] !== undefined ? ' It appears to be a singular linked record: did you mean to call ' + 'getLinkedRecord() instead of getLinkedRecords()?' : '') : 0 : void 0;
  return links[REFS_KEY];
}
function hasLinkedRecordIDs(record, storageKey) {
  var links = record[storageKey];
  if (links == null) {
    return false;
  }
  return typeof links === 'object' && Array.isArray(links[REFS_KEY]) && links[REFS_KEY].every(function (link) {
    return typeof link === 'string';
  });
}
function getInvalidationEpoch(record) {
  if (record == null) {
    return null;
  }
  var invalidatedAt = record[INVALIDATED_AT_KEY];
  if (typeof invalidatedAt !== 'number') {
    return null;
  }
  return invalidatedAt;
}
function update(prevRecord, nextRecord) {
  var _updated2;
  if (true) {
    var _getType, _getType2;
    var prevID = getDataID(prevRecord);
    var nextID = getDataID(nextRecord);
     true ? warning(prevID === nextID, 'RelayModernRecord: Invalid record update, expected both versions of ' + 'the record to have the same id, got `%s` and `%s`.', prevID, nextID) : 0;
    var prevType = (_getType = getType(prevRecord)) !== null && _getType !== void 0 ? _getType : null;
    var nextType = (_getType2 = getType(nextRecord)) !== null && _getType2 !== void 0 ? _getType2 : null;
     true ? warning(isClientID(nextID) && nextID !== ROOT_ID || prevType === nextType, 'RelayModernRecord: Invalid record update, expected both versions of ' + 'record `%s` to have the same `%s` but got conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', prevID, TYPENAME_KEY, prevType, nextType) : 0;
  }
  var prevErrorsByKey = prevRecord[ERRORS_KEY];
  var nextErrorsByKey = nextRecord[ERRORS_KEY];
  var updated = null;
  if (prevErrorsByKey == null && nextErrorsByKey == null) {
    var _updated;
    for (var storageKey in nextRecord) {
      if (updated || !areEqual(prevRecord[storageKey], nextRecord[storageKey])) {
        updated = updated !== null ? updated : (0, _objectSpread2["default"])({}, prevRecord);
        updated[storageKey] = nextRecord[storageKey];
      }
    }
    return (_updated = updated) !== null && _updated !== void 0 ? _updated : prevRecord;
  }
  for (var _storageKey2 in nextRecord) {
    if (_storageKey2 === ERRORS_KEY) {
      continue;
    }
    var nextValue = nextRecord[_storageKey2];
    var nextErrors = nextErrorsByKey === null || nextErrorsByKey === void 0 ? void 0 : nextErrorsByKey[_storageKey2];
    if (updated == null) {
      var prevValue = prevRecord[_storageKey2];
      var prevErrors = prevErrorsByKey === null || prevErrorsByKey === void 0 ? void 0 : prevErrorsByKey[_storageKey2];
      if (areEqual(prevValue, nextValue) && areEqual(prevErrors, nextErrors)) {
        continue;
      }
      updated = (0, _objectSpread2["default"])({}, prevRecord);
      if (prevErrorsByKey != null) {
        updated[ERRORS_KEY] = (0, _objectSpread2["default"])({}, prevErrorsByKey);
      }
    }
    setValue(updated, _storageKey2, nextValue);
    setErrors(updated, _storageKey2, nextErrors);
  }
  return (_updated2 = updated) !== null && _updated2 !== void 0 ? _updated2 : prevRecord;
}
function merge(record1, record2) {
  if (true) {
    var _getType3, _getType4;
    var prevID = getDataID(record1);
    var nextID = getDataID(record2);
     true ? warning(prevID === nextID, 'RelayModernRecord: Invalid record merge, expected both versions of ' + 'the record to have the same id, got `%s` and `%s`.', prevID, nextID) : 0;
    var prevType = (_getType3 = getType(record1)) !== null && _getType3 !== void 0 ? _getType3 : null;
    var nextType = (_getType4 = getType(record2)) !== null && _getType4 !== void 0 ? _getType4 : null;
     true ? warning(isClientID(nextID) && nextID !== ROOT_ID || prevType === nextType, 'RelayModernRecord: Invalid record merge, expected both versions of ' + 'record `%s` to have the same `%s` but got conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', prevID, TYPENAME_KEY, prevType, nextType) : 0;
  }
  if (ERRORS_KEY in record1 || ERRORS_KEY in record2) {
    var errors1 = record1[ERRORS_KEY],
      fields1 = (0, _objectWithoutPropertiesLoose2["default"])(record1, [ERRORS_KEY].map(_toPropertyKey2["default"]));
    var errors2 = record2[ERRORS_KEY],
      fields2 = (0, _objectWithoutPropertiesLoose2["default"])(record2, [ERRORS_KEY].map(_toPropertyKey2["default"]));
    var updated = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, fields1), fields2);
    if (errors1 == null && errors2 == null) {
      return updated;
    }
    var updatedErrors = {};
    for (var storageKey in errors1) {
      if (fields2.hasOwnProperty(storageKey)) {
        continue;
      }
      updatedErrors[storageKey] = errors1[storageKey];
    }
    for (var _storageKey3 in errors2) {
      updatedErrors[_storageKey3] = errors2[_storageKey3];
    }
    for (var _storageKey in updatedErrors) {
      updated[ERRORS_KEY] = updatedErrors;
      break;
    }
    return updated;
  } else {
    return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, record1), record2);
  }
}
function freeze(record) {
  deepFreeze(record);
}
function setErrors(record, storageKey, errors) {
  if (true) {
     true ? warning(storageKey in record, 'RelayModernRecord: Invalid error update, `%s` should not be undefined.', storageKey) : 0;
  }
  var errorsByStorageKey = record[ERRORS_KEY];
  if (errors != null && errors.length > 0) {
    if (errorsByStorageKey == null) {
      record[ERRORS_KEY] = (0, _defineProperty2["default"])({}, storageKey, errors);
    } else {
      errorsByStorageKey[storageKey] = errors;
    }
  } else if (errorsByStorageKey != null) {
    if (delete errorsByStorageKey[storageKey]) {
      for (var otherStorageKey in errorsByStorageKey) {
        if (errorsByStorageKey.hasOwnProperty(otherStorageKey)) {
          return;
        }
      }
      delete record[ERRORS_KEY];
    }
  }
}
function setValue(record, storageKey, value) {
  if (true) {
    var prevID = getDataID(record);
    if (storageKey === ID_KEY) {
       true ? warning(prevID === value, 'RelayModernRecord: Invalid field update, expected both versions of ' + 'the record to have the same id, got `%s` and `%s`.', prevID, value) : 0;
    } else if (storageKey === TYPENAME_KEY) {
      var _getType5;
      var prevType = (_getType5 = getType(record)) !== null && _getType5 !== void 0 ? _getType5 : null;
      var nextType = value !== null && value !== void 0 ? value : null;
       true ? warning(isClientID(getDataID(record)) && getDataID(record) !== ROOT_ID || prevType === nextType, 'RelayModernRecord: Invalid field update, expected both versions of ' + 'record `%s` to have the same `%s` but got conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', prevID, TYPENAME_KEY, prevType, nextType) : 0;
    }
  }
  record[storageKey] = value;
}
function setLinkedRecordID(record, storageKey, linkedID) {
  var link = {};
  link[REF_KEY] = linkedID;
  record[storageKey] = link;
}
function setLinkedRecordIDs(record, storageKey, linkedIDs) {
  var links = {};
  links[REFS_KEY] = linkedIDs;
  record[storageKey] = links;
}
function setActorLinkedRecordID(record, storageKey, actorIdentifier, linkedID) {
  var link = {};
  link[REF_KEY] = linkedID;
  link[ACTOR_IDENTIFIER_KEY] = actorIdentifier;
  record[storageKey] = link;
}
function getActorLinkedRecordID(record, storageKey) {
  var link = record[storageKey];
  if (link == null) {
    return link;
  }
  !(typeof link === 'object' && typeof link[REF_KEY] === 'string' && link[ACTOR_IDENTIFIER_KEY] != null) ?  true ? invariant(false, 'RelayModernRecord.getActorLinkedRecordID(): Expected `%s.%s` to be an actor specific linked ID, ' + 'was `%s`.', record[ID_KEY], storageKey, JSON.stringify(link)) : 0 : void 0;
  return [link[ACTOR_IDENTIFIER_KEY], link[REF_KEY]];
}
function getResolverLinkedRecordID(record, typeName) {
  var id = getValue(record, RELAY_RESOLVER_VALUE_KEY);
  if (id == null || isSuspenseSentinel(id)) {
    return null;
  }
  if (typeof id === 'object') {
    id = id.id;
  }
  !(typeof id === 'string') ?  true ? invariant(false, 'RelayModernRecord.getResolverLinkedRecordID(): Expected value to be a linked ID, ' + 'was `%s`.', JSON.stringify(id)) : 0 : void 0;
  return generateClientObjectClientID(typeName, id);
}
function getResolverLinkedRecordIDs(record, typeName) {
  var resolverValue = getValue(record, RELAY_RESOLVER_VALUE_KEY);
  if (resolverValue == null || isSuspenseSentinel(resolverValue)) {
    return null;
  }
  !Array.isArray(resolverValue) ?  true ? invariant(false, 'RelayModernRecord.getResolverLinkedRecordIDs(): Expected value to be an array of linked IDs, ' + 'was `%s`.', JSON.stringify(resolverValue)) : 0 : void 0;
  return resolverValue.map(function (id) {
    if (id == null) {
      return null;
    }
    if (typeof id === 'object') {
      id = id.id;
    }
    !(typeof id === 'string') ?  true ? invariant(false, 'RelayModernRecord.getResolverLinkedRecordIDs(): Expected item within resolver linked field to be a DataID, ' + 'was `%s`.', JSON.stringify(id)) : 0 : void 0;
    return generateClientObjectClientID(typeName, id);
  });
}
function toJSON(record) {
  return record;
}
module.exports = {
  clone: clone,
  copyFields: copyFields,
  create: create,
  freeze: freeze,
  fromObject: fromObject,
  getDataID: getDataID,
  getErrors: getErrors,
  getFields: getFields,
  getInvalidationEpoch: getInvalidationEpoch,
  getLinkedRecordID: getLinkedRecordID,
  getLinkedRecordIDs: getLinkedRecordIDs,
  getType: getType,
  getValue: getValue,
  hasValue: hasValue,
  hasLinkedRecordID: hasLinkedRecordID,
  hasLinkedRecordIDs: hasLinkedRecordIDs,
  merge: merge,
  setErrors: setErrors,
  setValue: setValue,
  setLinkedRecordID: setLinkedRecordID,
  setLinkedRecordIDs: setLinkedRecordIDs,
  update: update,
  getActorLinkedRecordID: getActorLinkedRecordID,
  setActorLinkedRecordID: setActorLinkedRecordID,
  getResolverLinkedRecordID: getResolverLinkedRecordID,
  getResolverLinkedRecordIDs: getResolverLinkedRecordIDs,
  toJSON: toJSON
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernSelector.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var RelayFeatureFlags = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js"),
  getFragmentVariables = _require.getFragmentVariables;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  CLIENT_EDGE_TRAVERSAL_PATH = _require2.CLIENT_EDGE_TRAVERSAL_PATH,
  FRAGMENT_OWNER_KEY = _require2.FRAGMENT_OWNER_KEY,
  FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT = _require2.FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT,
  FRAGMENTS_KEY = _require2.FRAGMENTS_KEY,
  ID_KEY = _require2.ID_KEY;
var areEqual = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/areEqual.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
function getSingularSelector(fragment, item) {
  !(typeof item === 'object' && item !== null && !Array.isArray(item)) ?  true ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : 0 : void 0;
  var dataID = item[ID_KEY];
  var fragments = item[FRAGMENTS_KEY];
  var mixedOwner = item[FRAGMENT_OWNER_KEY];
  var mixedClientEdgeTraversalPath = item[CLIENT_EDGE_TRAVERSAL_PATH];
  if (typeof dataID === 'string' && typeof fragments === 'object' && fragments !== null && typeof fragments[fragment.name] === 'object' && fragments[fragment.name] !== null && typeof mixedOwner === 'object' && mixedOwner !== null && (mixedClientEdgeTraversalPath == null || Array.isArray(mixedClientEdgeTraversalPath))) {
    var owner = mixedOwner;
    var clientEdgeTraversalPath = mixedClientEdgeTraversalPath;
    var argumentVariables = fragments[fragment.name];
    var fragmentVariables = getFragmentVariables(fragment, owner.variables, argumentVariables);
    var isWithinUnmatchedTypeRefinement = argumentVariables[FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT] === true;
    return createReaderSelector(fragment, dataID, fragmentVariables, owner, isWithinUnmatchedTypeRefinement, clientEdgeTraversalPath);
  }
  if (true) {
    var stringifiedItem = JSON.stringify(item);
    if (stringifiedItem.length > 499) {
      stringifiedItem = stringifiedItem.substr(0, 498) + "\u2026";
    }
     true ? warning(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`.', fragment.name, stringifiedItem, fragment.name) : 0;
  }
  return null;
}
function getPluralSelector(fragment, items) {
  var selectors = null;
  items.forEach(function (item, ii) {
    var selector = item != null ? getSingularSelector(fragment, item) : null;
    if (selector != null) {
      selectors = selectors || [];
      selectors.push(selector);
    }
  });
  if (selectors == null) {
    return null;
  } else {
    return {
      kind: 'PluralReaderSelector',
      selectors: selectors
    };
  }
}
function getSelector(fragment, item) {
  if (item == null) {
    return item;
  } else if (fragment.metadata && fragment.metadata.plural === true) {
    !Array.isArray(item) ?  true ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : 0 : void 0;
    return getPluralSelector(fragment, item);
  } else {
    !!Array.isArray(item) ?  true ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : 0 : void 0;
    return getSingularSelector(fragment, item);
  }
}
function getSelectorsFromObject(fragments, object) {
  var selectors = {};
  for (var key in fragments) {
    if (fragments.hasOwnProperty(key)) {
      var fragment = fragments[key];
      var item = object[key];
      selectors[key] = getSelector(fragment, item);
    }
  }
  return selectors;
}
function getDataIDsFromObject(fragments, object) {
  var ids = {};
  for (var key in fragments) {
    if (fragments.hasOwnProperty(key)) {
      var fragment = fragments[key];
      var item = object[key];
      ids[key] = getDataIDsFromFragment(fragment, item);
    }
  }
  return ids;
}
function getDataIDsFromFragment(fragment, item) {
  if (item == null) {
    return item;
  } else if (fragment.metadata && fragment.metadata.plural === true) {
    !Array.isArray(item) ?  true ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : 0 : void 0;
    return getDataIDs(fragment, item);
  } else {
    !!Array.isArray(item) ?  true ? invariant(false, 'RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : 0 : void 0;
    return getDataID(fragment, item);
  }
}
function getDataIDs(fragment, items) {
  var ids = null;
  items.forEach(function (item) {
    var id = item != null ? getDataID(fragment, item) : null;
    if (id != null) {
      ids = ids || [];
      ids.push(id);
    }
  });
  return ids;
}
function getDataID(fragment, item) {
  !(typeof item === 'object' && item !== null && !Array.isArray(item)) ?  true ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : 0 : void 0;
  var dataID = item[ID_KEY];
  if (typeof dataID === 'string') {
    return dataID;
  }
   true ? warning(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`, or `null` is passed as the fragment ' + "reference for `%s` if it's conditonally included and the condition isn't met.", fragment.name, JSON.stringify(item), fragment.name, fragment.name) : 0;
  return null;
}
function getVariablesFromObject(fragments, object) {
  var variables = {};
  for (var key in fragments) {
    if (fragments.hasOwnProperty(key)) {
      var fragment = fragments[key];
      var item = object[key];
      var itemVariables = getVariablesFromFragment(fragment, item);
      Object.assign(variables, itemVariables);
    }
  }
  return variables;
}
function getVariablesFromFragment(fragment, item) {
  var _fragment$metadata;
  if (item == null) {
    return {};
  } else if (((_fragment$metadata = fragment.metadata) === null || _fragment$metadata === void 0 ? void 0 : _fragment$metadata.plural) === true) {
    !Array.isArray(item) ?  true ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : 0 : void 0;
    return getVariablesFromPluralFragment(fragment, item);
  } else {
    !!Array.isArray(item) ?  true ? invariant(false, 'RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : 0 : void 0;
    return getVariablesFromSingularFragment(fragment, item) || {};
  }
}
function getVariablesFromSingularFragment(fragment, item) {
  var selector = getSingularSelector(fragment, item);
  if (!selector) {
    return null;
  }
  return selector.variables;
}
function getVariablesFromPluralFragment(fragment, items) {
  var variables = {};
  items.forEach(function (value, ii) {
    if (value != null) {
      var itemVariables = getVariablesFromSingularFragment(fragment, value);
      if (itemVariables != null) {
        Object.assign(variables, itemVariables);
      }
    }
  });
  return variables;
}
function areEqualSingularSelectors(thisSelector, thatSelector) {
  return thisSelector.dataID === thatSelector.dataID && thisSelector.node === thatSelector.node && areEqual(thisSelector.variables, thatSelector.variables) && areEqualOwners(thisSelector.owner, thatSelector.owner) && (!RelayFeatureFlags.ENABLE_STRICT_EQUAL_SELECTORS || thisSelector.isWithinUnmatchedTypeRefinement === thatSelector.isWithinUnmatchedTypeRefinement && areEqualClientEdgeTraversalPaths(thisSelector.clientEdgeTraversalPath, thatSelector.clientEdgeTraversalPath));
}
function areEqualOwners(thisOwner, thatOwner) {
  if (thisOwner === thatOwner) {
    return true;
  } else {
    return thisOwner.identifier === thatOwner.identifier && areEqual(thisOwner.cacheConfig, thatOwner.cacheConfig);
  }
}
function areEqualClientEdgeTraversalPaths(thisPath, thatPath) {
  if (thisPath === thatPath) {
    return true;
  }
  if (thisPath == null || thatPath == null || thisPath.length !== thatPath.length) {
    return false;
  }
  var idx = thisPath.length;
  while (idx--) {
    var a = thisPath[idx];
    var b = thatPath[idx];
    if (a === b) {
      continue;
    }
    if (a == null || b == null || a.clientEdgeDestinationID !== b.clientEdgeDestinationID || a.readerClientEdge !== b.readerClientEdge) {
      return false;
    }
  }
  return true;
}
function areEqualSelectors(a, b) {
  if (a === b) {
    return true;
  } else if (a == null) {
    return b == null;
  } else if (b == null) {
    return a == null;
  } else if (a.kind === 'SingularReaderSelector' && b.kind === 'SingularReaderSelector') {
    return areEqualSingularSelectors(a, b);
  } else if (a.kind === 'PluralReaderSelector' && b.kind === 'PluralReaderSelector') {
    return a.selectors.length === b.selectors.length && a.selectors.every(function (s, i) {
      return areEqualSingularSelectors(s, b.selectors[i]);
    });
  } else {
    return false;
  }
}
function createReaderSelector(fragment, dataID, variables, request) {
  var isWithinUnmatchedTypeRefinement = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var clientEdgeTraversalPath = arguments.length > 5 ? arguments[5] : undefined;
  return {
    kind: 'SingularReaderSelector',
    dataID: dataID,
    isWithinUnmatchedTypeRefinement: isWithinUnmatchedTypeRefinement,
    clientEdgeTraversalPath: clientEdgeTraversalPath !== null && clientEdgeTraversalPath !== void 0 ? clientEdgeTraversalPath : null,
    node: fragment,
    variables: variables,
    owner: request
  };
}
function createNormalizationSelector(node, dataID, variables) {
  return {
    dataID: dataID,
    node: node,
    variables: variables
  };
}
module.exports = {
  areEqualSelectors: areEqualSelectors,
  createReaderSelector: createReaderSelector,
  createNormalizationSelector: createNormalizationSelector,
  getDataIDsFromFragment: getDataIDsFromFragment,
  getDataIDsFromObject: getDataIDsFromObject,
  getSingularSelector: getSingularSelector,
  getPluralSelector: getPluralSelector,
  getSelector: getSelector,
  getSelectorsFromObject: getSelectorsFromObject,
  getVariablesFromSingularFragment: getVariablesFromSingularFragment,
  getVariablesFromPluralFragment: getVariablesFromPluralFragment,
  getVariablesFromFragment: getVariablesFromFragment,
  getVariablesFromObject: getVariablesFromObject
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernStore.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var _defineProperty2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/defineProperty.js"));
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/multi-actor-environment/ActorIdentifier.js"),
  INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE = _require.INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE,
  assertInternalActorIdentifier = _require.assertInternalActorIdentifier;
var deepFreeze = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/deepFreeze.js");
var RelayFeatureFlags = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js");
var resolveImmediate = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/resolveImmediate.js");
var DataChecker = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/DataChecker.js");
var defaultGetDataID = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/defaultGetDataID.js");
var RelayModernRecord = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js");
var RelayOptimisticRecordSource = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayOptimisticRecordSource.js");
var RelayReader = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayReader.js");
var RelayReferenceMarker = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayReferenceMarker.js");
var RelayStoreSubscriptions = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreSubscriptions.js");
var RelayStoreUtils = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js");
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  ROOT_ID = _require2.ROOT_ID,
  ROOT_TYPE = _require2.ROOT_TYPE;
var _require3 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ResolverCache.js"),
  RecordResolverCache = _require3.RecordResolverCache;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var DEFAULT_RELEASE_BUFFER_SIZE = 10;
var RelayModernStore = /*#__PURE__*/function () {
  function RelayModernStore(source, options) {
    var _this = this;
    var _options$gcReleaseBuf, _options$gcScheduler, _options$getDataID, _options$log, _options$operationLoa;
    (0, _defineProperty2["default"])(this, "_gcStep", function () {
      if (_this._gcRun) {
        if (_this._gcRun.next().done) {
          _this._gcRun = null;
        } else {
          _this._gcScheduler(_this._gcStep);
        }
      }
    });
    if (true) {
      var storeIDs = source.getRecordIDs();
      for (var ii = 0; ii < storeIDs.length; ii++) {
        var record = source.get(storeIDs[ii]);
        if (record) {
          RelayModernRecord.freeze(record);
        }
      }
    }
    this._currentWriteEpoch = 0;
    this._gcHoldCounter = 0;
    this._gcReleaseBufferSize = (_options$gcReleaseBuf = options === null || options === void 0 ? void 0 : options.gcReleaseBufferSize) !== null && _options$gcReleaseBuf !== void 0 ? _options$gcReleaseBuf : DEFAULT_RELEASE_BUFFER_SIZE;
    this._gcRun = null;
    this._gcScheduler = (_options$gcScheduler = options === null || options === void 0 ? void 0 : options.gcScheduler) !== null && _options$gcScheduler !== void 0 ? _options$gcScheduler : resolveImmediate;
    this._getDataID = (_options$getDataID = options === null || options === void 0 ? void 0 : options.getDataID) !== null && _options$getDataID !== void 0 ? _options$getDataID : defaultGetDataID;
    this._globalInvalidationEpoch = null;
    this._invalidationSubscriptions = new Set();
    this._invalidatedRecordIDs = new Set();
    this.__log = (_options$log = options === null || options === void 0 ? void 0 : options.log) !== null && _options$log !== void 0 ? _options$log : null;
    this._queryCacheExpirationTime = options === null || options === void 0 ? void 0 : options.queryCacheExpirationTime;
    this._operationLoader = (_options$operationLoa = options === null || options === void 0 ? void 0 : options.operationLoader) !== null && _options$operationLoa !== void 0 ? _options$operationLoa : null;
    this._optimisticSource = null;
    this._recordSource = source;
    this._releaseBuffer = [];
    this._roots = new Map();
    this._shouldScheduleGC = false;
    this._resolverCache = new RecordResolverCache(function () {
      return _this._getMutableRecordSource();
    });
    this._storeSubscriptions = new RelayStoreSubscriptions(options === null || options === void 0 ? void 0 : options.log, this._resolverCache);
    this._updatedRecordIDs = new Set();
    this._shouldProcessClientComponents = options === null || options === void 0 ? void 0 : options.shouldProcessClientComponents;
    initializeRecordSource(this._recordSource);
  }
  var _proto = RelayModernStore.prototype;
  _proto.getSource = function getSource() {
    var _this$_optimisticSour;
    return (_this$_optimisticSour = this._optimisticSource) !== null && _this$_optimisticSour !== void 0 ? _this$_optimisticSour : this._recordSource;
  };
  _proto._getMutableRecordSource = function _getMutableRecordSource() {
    var _this$_optimisticSour2;
    return (_this$_optimisticSour2 = this._optimisticSource) !== null && _this$_optimisticSour2 !== void 0 ? _this$_optimisticSour2 : this._recordSource;
  };
  _proto.check = function check(operation, options) {
    var _options$handlers, _options$getSourceFor, _options$getTargetFor, _options$defaultActor;
    var selector = operation.root;
    var source = this._getMutableRecordSource();
    var globalInvalidationEpoch = this._globalInvalidationEpoch;
    var rootEntry = this._roots.get(operation.request.identifier);
    var operationLastWrittenAt = rootEntry != null ? rootEntry.epoch : null;
    if (globalInvalidationEpoch != null) {
      if (operationLastWrittenAt == null || operationLastWrittenAt <= globalInvalidationEpoch) {
        return {
          status: 'stale'
        };
      }
    }
    var handlers = (_options$handlers = options === null || options === void 0 ? void 0 : options.handlers) !== null && _options$handlers !== void 0 ? _options$handlers : [];
    var getSourceForActor = (_options$getSourceFor = options === null || options === void 0 ? void 0 : options.getSourceForActor) !== null && _options$getSourceFor !== void 0 ? _options$getSourceFor : function (actorIdentifier) {
      assertInternalActorIdentifier(actorIdentifier);
      return source;
    };
    var getTargetForActor = (_options$getTargetFor = options === null || options === void 0 ? void 0 : options.getTargetForActor) !== null && _options$getTargetFor !== void 0 ? _options$getTargetFor : function (actorIdentifier) {
      assertInternalActorIdentifier(actorIdentifier);
      return source;
    };
    var operationAvailability = DataChecker.check(getSourceForActor, getTargetForActor, (_options$defaultActor = options === null || options === void 0 ? void 0 : options.defaultActorIdentifier) !== null && _options$defaultActor !== void 0 ? _options$defaultActor : INTERNAL_ACTOR_IDENTIFIER_DO_NOT_USE, selector, handlers, this._operationLoader, this._getDataID, this._shouldProcessClientComponents);
    return getAvailabilityStatus(operationAvailability, operationLastWrittenAt, rootEntry === null || rootEntry === void 0 ? void 0 : rootEntry.fetchTime, this._queryCacheExpirationTime);
  };
  _proto.retain = function retain(operation) {
    var _this2 = this;
    var id = operation.request.identifier;
    var disposed = false;
    var dispose = function dispose() {
      if (disposed) {
        return;
      }
      disposed = true;
      var rootEntry = _this2._roots.get(id);
      if (rootEntry == null) {
        return;
      }
      rootEntry.refCount--;
      if (rootEntry.refCount === 0) {
        var _queryCacheExpirationTime = _this2._queryCacheExpirationTime;
        var rootEntryIsStale = rootEntry.fetchTime != null && _queryCacheExpirationTime != null && rootEntry.fetchTime <= Date.now() - _queryCacheExpirationTime;
        if (rootEntryIsStale) {
          _this2._roots["delete"](id);
          _this2.scheduleGC();
        } else {
          _this2._releaseBuffer.push(id);
          if (_this2._releaseBuffer.length > _this2._gcReleaseBufferSize) {
            var _id = _this2._releaseBuffer.shift();
            _this2._roots["delete"](_id);
            _this2.scheduleGC();
          }
        }
      }
    };
    var rootEntry = this._roots.get(id);
    if (rootEntry != null) {
      if (rootEntry.refCount === 0) {
        this._releaseBuffer = this._releaseBuffer.filter(function (_id) {
          return _id !== id;
        });
      }
      rootEntry.refCount += 1;
    } else {
      this._roots.set(id, {
        operation: operation,
        refCount: 1,
        epoch: null,
        fetchTime: null
      });
    }
    return {
      dispose: dispose
    };
  };
  _proto.lookup = function lookup(selector) {
    var source = this.getSource();
    var snapshot = RelayReader.read(source, selector, this._resolverCache);
    if (true) {
      deepFreeze(snapshot);
    }
    return snapshot;
  };
  _proto.notify = function notify(sourceOperation, invalidateStore) {
    var _this3 = this;
    var log = this.__log;
    if (log != null) {
      log({
        name: 'store.notify.start',
        sourceOperation: sourceOperation
      });
    }
    this._currentWriteEpoch++;
    if (invalidateStore === true) {
      this._globalInvalidationEpoch = this._currentWriteEpoch;
    }
    if (RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
      this._resolverCache.invalidateDataIDs(this._updatedRecordIDs);
    }
    var source = this.getSource();
    var updatedOwners = [];
    this._storeSubscriptions.updateSubscriptions(source, this._updatedRecordIDs, updatedOwners, sourceOperation);
    this._invalidationSubscriptions.forEach(function (subscription) {
      _this3._updateInvalidationSubscription(subscription, invalidateStore === true);
    });
    if (log != null) {
      log({
        name: 'store.notify.complete',
        sourceOperation: sourceOperation,
        updatedRecordIDs: this._updatedRecordIDs,
        invalidatedRecordIDs: this._invalidatedRecordIDs
      });
    }
    this._updatedRecordIDs.clear();
    this._invalidatedRecordIDs.clear();
    if (sourceOperation != null) {
      var id = sourceOperation.request.identifier;
      var rootEntry = this._roots.get(id);
      if (rootEntry != null) {
        rootEntry.epoch = this._currentWriteEpoch;
        rootEntry.fetchTime = Date.now();
      } else if (sourceOperation.request.node.params.operationKind === 'query' && this._gcReleaseBufferSize > 0 && this._releaseBuffer.length < this._gcReleaseBufferSize) {
        var temporaryRootEntry = {
          operation: sourceOperation,
          refCount: 0,
          epoch: this._currentWriteEpoch,
          fetchTime: Date.now()
        };
        this._releaseBuffer.push(id);
        this._roots.set(id, temporaryRootEntry);
      }
    }
    return updatedOwners;
  };
  _proto.publish = function publish(source, idsMarkedForInvalidation) {
    var target = this._getMutableRecordSource();
    updateTargetFromSource(target, source, this._currentWriteEpoch + 1, idsMarkedForInvalidation, this._updatedRecordIDs, this._invalidatedRecordIDs);
    var log = this.__log;
    if (log != null) {
      log({
        name: 'store.publish',
        source: source,
        optimistic: target === this._optimisticSource
      });
    }
  };
  _proto.subscribe = function subscribe(snapshot, callback) {
    return this._storeSubscriptions.subscribe(snapshot, callback);
  };
  _proto.holdGC = function holdGC() {
    var _this4 = this;
    if (this._gcRun) {
      this._gcRun = null;
      this._shouldScheduleGC = true;
    }
    this._gcHoldCounter++;
    var dispose = function dispose() {
      if (_this4._gcHoldCounter > 0) {
        _this4._gcHoldCounter--;
        if (_this4._gcHoldCounter === 0 && _this4._shouldScheduleGC) {
          _this4.scheduleGC();
          _this4._shouldScheduleGC = false;
        }
      }
    };
    return {
      dispose: dispose
    };
  };
  _proto.toJSON = function toJSON() {
    return 'RelayModernStore()';
  };
  _proto.getEpoch = function getEpoch() {
    return this._currentWriteEpoch;
  };
  _proto.__getUpdatedRecordIDs = function __getUpdatedRecordIDs() {
    return this._updatedRecordIDs;
  };
  _proto.lookupInvalidationState = function lookupInvalidationState(dataIDs) {
    var _this5 = this;
    var invalidations = new Map();
    dataIDs.forEach(function (dataID) {
      var _RelayModernRecord$ge;
      var record = _this5.getSource().get(dataID);
      invalidations.set(dataID, (_RelayModernRecord$ge = RelayModernRecord.getInvalidationEpoch(record)) !== null && _RelayModernRecord$ge !== void 0 ? _RelayModernRecord$ge : null);
    });
    invalidations.set('global', this._globalInvalidationEpoch);
    return {
      dataIDs: dataIDs,
      invalidations: invalidations
    };
  };
  _proto.checkInvalidationState = function checkInvalidationState(prevInvalidationState) {
    var latestInvalidationState = this.lookupInvalidationState(prevInvalidationState.dataIDs);
    var currentInvalidations = latestInvalidationState.invalidations;
    var prevInvalidations = prevInvalidationState.invalidations;
    if (currentInvalidations.get('global') !== prevInvalidations.get('global')) {
      return true;
    }
    var _iterator = (0, _createForOfIteratorHelper2["default"])(prevInvalidationState.dataIDs),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var dataID = _step.value;
        if (currentInvalidations.get(dataID) !== prevInvalidations.get(dataID)) {
          return true;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return false;
  };
  _proto.subscribeToInvalidationState = function subscribeToInvalidationState(invalidationState, callback) {
    var _this6 = this;
    var subscription = {
      callback: callback,
      invalidationState: invalidationState
    };
    var dispose = function dispose() {
      _this6._invalidationSubscriptions["delete"](subscription);
    };
    this._invalidationSubscriptions.add(subscription);
    return {
      dispose: dispose
    };
  };
  _proto._updateInvalidationSubscription = function _updateInvalidationSubscription(subscription, invalidatedStore) {
    var _this7 = this;
    var callback = subscription.callback,
      invalidationState = subscription.invalidationState;
    var dataIDs = invalidationState.dataIDs;
    var isSubscribedToInvalidatedIDs = invalidatedStore || dataIDs.some(function (dataID) {
      return _this7._invalidatedRecordIDs.has(dataID);
    });
    if (!isSubscribedToInvalidatedIDs) {
      return;
    }
    callback();
  };
  _proto.snapshot = function snapshot() {
    !(this._optimisticSource == null) ?  true ? invariant(false, 'RelayModernStore: Unexpected call to snapshot() while a previous ' + 'snapshot exists.') : 0 : void 0;
    var log = this.__log;
    if (log != null) {
      log({
        name: 'store.snapshot'
      });
    }
    this._storeSubscriptions.snapshotSubscriptions(this.getSource());
    if (this._gcRun) {
      this._gcRun = null;
      this._shouldScheduleGC = true;
    }
    this._optimisticSource = RelayOptimisticRecordSource.create(this.getSource());
  };
  _proto.restore = function restore() {
    !(this._optimisticSource != null) ?  true ? invariant(false, 'RelayModernStore: Unexpected call to restore(), expected a snapshot ' + 'to exist (make sure to call snapshot()).') : 0 : void 0;
    var log = this.__log;
    if (log != null) {
      log({
        name: 'store.restore'
      });
    }
    this._optimisticSource = null;
    if (this._shouldScheduleGC) {
      this.scheduleGC();
    }
    this._storeSubscriptions.restoreSubscriptions();
  };
  _proto.scheduleGC = function scheduleGC() {
    if (this._gcHoldCounter > 0) {
      this._shouldScheduleGC = true;
      return;
    }
    if (this._gcRun) {
      return;
    }
    this._gcRun = this._collect();
    this._gcScheduler(this._gcStep);
  };
  _proto.__gc = function __gc() {
    if (this._optimisticSource != null) {
      return;
    }
    var gcRun = this._collect();
    while (!gcRun.next().done) {}
  };
  _proto._collect = function* _collect() {
    top: while (true) {
      var startEpoch = this._currentWriteEpoch;
      var references = new Set();
      var _iterator2 = (0, _createForOfIteratorHelper2["default"])(this._roots.values()),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var operation = _step2.value.operation;
          var selector = operation.root;
          RelayReferenceMarker.mark(this._recordSource, selector, references, this._operationLoader, this._shouldProcessClientComponents);
          yield;
          if (startEpoch !== this._currentWriteEpoch) {
            continue top;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var log = this.__log;
      if (log != null) {
        log({
          name: 'store.gc',
          references: references
        });
      }
      if (references.size === 0) {
        this._recordSource.clear();
      } else {
        var storeIDs = this._recordSource.getRecordIDs();
        for (var ii = 0; ii < storeIDs.length; ii++) {
          var dataID = storeIDs[ii];
          if (!references.has(dataID)) {
            this._recordSource.remove(dataID);
          }
        }
      }
      return;
    }
  };
  return RelayModernStore;
}();
function initializeRecordSource(target) {
  if (!target.has(ROOT_ID)) {
    var rootRecord = RelayModernRecord.create(ROOT_ID, ROOT_TYPE);
    target.set(ROOT_ID, rootRecord);
  }
}
function updateTargetFromSource(target, source, currentWriteEpoch, idsMarkedForInvalidation, updatedRecordIDs, invalidatedRecordIDs) {
  if (idsMarkedForInvalidation) {
    idsMarkedForInvalidation.forEach(function (dataID) {
      var targetRecord = target.get(dataID);
      var sourceRecord = source.get(dataID);
      if (sourceRecord === null) {
        return;
      }
      var nextRecord;
      if (targetRecord != null) {
        nextRecord = RelayModernRecord.clone(targetRecord);
      } else {
        nextRecord = sourceRecord != null ? RelayModernRecord.clone(sourceRecord) : null;
      }
      if (!nextRecord) {
        return;
      }
      RelayModernRecord.setValue(nextRecord, RelayStoreUtils.INVALIDATED_AT_KEY, currentWriteEpoch);
      invalidatedRecordIDs.add(dataID);
      target.set(dataID, nextRecord);
    });
  }
  var dataIDs = source.getRecordIDs();
  for (var ii = 0; ii < dataIDs.length; ii++) {
    var dataID = dataIDs[ii];
    var sourceRecord = source.get(dataID);
    var targetRecord = target.get(dataID);
    if (true) {
      if (sourceRecord) {
        RelayModernRecord.freeze(sourceRecord);
      }
    }
    if (sourceRecord && targetRecord) {
      var nextRecord = RelayModernRecord.update(targetRecord, sourceRecord);
      if (nextRecord !== targetRecord) {
        if (true) {
          RelayModernRecord.freeze(nextRecord);
        }
        updatedRecordIDs.add(dataID);
        target.set(dataID, nextRecord);
      }
    } else if (sourceRecord === null) {
      target["delete"](dataID);
      if (targetRecord !== null) {
        updatedRecordIDs.add(dataID);
      }
    } else if (sourceRecord) {
      target.set(dataID, sourceRecord);
      updatedRecordIDs.add(dataID);
    }
  }
}
function getAvailabilityStatus(operationAvailability, operationLastWrittenAt, operationFetchTime, queryCacheExpirationTime) {
  var mostRecentlyInvalidatedAt = operationAvailability.mostRecentlyInvalidatedAt,
    status = operationAvailability.status;
  if (typeof mostRecentlyInvalidatedAt === 'number') {
    if (operationLastWrittenAt == null || mostRecentlyInvalidatedAt > operationLastWrittenAt) {
      return {
        status: 'stale'
      };
    }
  }
  if (status === 'missing') {
    return {
      status: 'missing'
    };
  }
  if (operationFetchTime != null && queryCacheExpirationTime != null) {
    var isStale = operationFetchTime <= Date.now() - queryCacheExpirationTime;
    if (isStale) {
      return {
        status: 'stale'
      };
    }
  }
  return {
    status: 'available',
    fetchTime: operationFetchTime !== null && operationFetchTime !== void 0 ? operationFetchTime : null
  };
}
module.exports = RelayModernStore;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayOperationTracker.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var RelayOperationTracker = /*#__PURE__*/function () {
  function RelayOperationTracker() {
    this._ownersToPendingOperations = new Map();
    this._pendingOperationsToOwners = new Map();
    this._ownersToPendingPromise = new Map();
  }
  var _proto = RelayOperationTracker.prototype;
  _proto.update = function update(pendingOperation, affectedOwners) {
    if (affectedOwners.size === 0) {
      return;
    }
    var pendingOperationIdentifier = pendingOperation.identifier;
    var newlyAffectedOwnersIdentifier = new Set();
    var _iterator = (0, _createForOfIteratorHelper2["default"])(affectedOwners),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var owner = _step.value;
        var ownerIdentifier = owner.identifier;
        var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(ownerIdentifier);
        if (pendingOperationsAffectingOwner != null) {
          if (!pendingOperationsAffectingOwner.has(pendingOperationIdentifier)) {
            pendingOperationsAffectingOwner.set(pendingOperationIdentifier, pendingOperation);
            newlyAffectedOwnersIdentifier.add(ownerIdentifier);
          }
        } else {
          this._ownersToPendingOperations.set(ownerIdentifier, new Map([[pendingOperationIdentifier, pendingOperation]]));
          newlyAffectedOwnersIdentifier.add(ownerIdentifier);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (newlyAffectedOwnersIdentifier.size === 0) {
      return;
    }
    var ownersAffectedByPendingOperation = this._pendingOperationsToOwners.get(pendingOperationIdentifier) || new Set();
    var _iterator2 = (0, _createForOfIteratorHelper2["default"])(newlyAffectedOwnersIdentifier),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _ownerIdentifier = _step2.value;
        this._resolveOwnerResolvers(_ownerIdentifier);
        ownersAffectedByPendingOperation.add(_ownerIdentifier);
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    this._pendingOperationsToOwners.set(pendingOperationIdentifier, ownersAffectedByPendingOperation);
  };
  _proto.complete = function complete(pendingOperation) {
    var pendingOperationIdentifier = pendingOperation.identifier;
    var affectedOwnersIdentifier = this._pendingOperationsToOwners.get(pendingOperationIdentifier);
    if (affectedOwnersIdentifier == null) {
      return;
    }
    var completedOwnersIdentifier = new Set();
    var updatedOwnersIdentifier = new Set();
    var _iterator3 = (0, _createForOfIteratorHelper2["default"])(affectedOwnersIdentifier),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var ownerIdentifier = _step3.value;
        var pendingOperationsAffectingOwner = this._ownersToPendingOperations.get(ownerIdentifier);
        if (!pendingOperationsAffectingOwner) {
          continue;
        }
        pendingOperationsAffectingOwner["delete"](pendingOperationIdentifier);
        if (pendingOperationsAffectingOwner.size > 0) {
          updatedOwnersIdentifier.add(ownerIdentifier);
        } else {
          completedOwnersIdentifier.add(ownerIdentifier);
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    var _iterator4 = (0, _createForOfIteratorHelper2["default"])(completedOwnersIdentifier),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var _ownerIdentifier2 = _step4.value;
        this._resolveOwnerResolvers(_ownerIdentifier2);
        this._ownersToPendingOperations["delete"](_ownerIdentifier2);
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
    var _iterator5 = (0, _createForOfIteratorHelper2["default"])(updatedOwnersIdentifier),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var _ownerIdentifier3 = _step5.value;
        this._resolveOwnerResolvers(_ownerIdentifier3);
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
    this._pendingOperationsToOwners["delete"](pendingOperationIdentifier);
  };
  _proto._resolveOwnerResolvers = function _resolveOwnerResolvers(ownerIdentifier) {
    var promiseEntry = this._ownersToPendingPromise.get(ownerIdentifier);
    if (promiseEntry != null) {
      promiseEntry.resolve();
    }
    this._ownersToPendingPromise["delete"](ownerIdentifier);
  };
  _proto.getPendingOperationsAffectingOwner = function getPendingOperationsAffectingOwner(owner) {
    var ownerIdentifier = owner.identifier;
    var pendingOperationsForOwner = this._ownersToPendingOperations.get(ownerIdentifier);
    if (pendingOperationsForOwner == null || pendingOperationsForOwner.size === 0) {
      return null;
    }
    var cachedPromiseEntry = this._ownersToPendingPromise.get(ownerIdentifier);
    if (cachedPromiseEntry != null) {
      return {
        promise: cachedPromiseEntry.promise,
        pendingOperations: cachedPromiseEntry.pendingOperations
      };
    }
    var resolve;
    var promise = new Promise(function (r) {
      resolve = r;
    });
    !(resolve != null) ?  true ? invariant(false, 'RelayOperationTracker: Expected resolver to be defined. If you' + 'are seeing this, it is likely a bug in Relay.') : 0 : void 0;
    var pendingOperations = Array.from(pendingOperationsForOwner.values());
    this._ownersToPendingPromise.set(ownerIdentifier, {
      promise: promise,
      resolve: resolve,
      pendingOperations: pendingOperations
    });
    return {
      promise: promise,
      pendingOperations: pendingOperations
    };
  };
  return RelayOperationTracker;
}();
module.exports = RelayOperationTracker;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayOptimisticRecordSource.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js"));
var RelayModernRecord = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js");
var RelayRecordSource = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayRecordSource.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var UNPUBLISH_RECORD_SENTINEL = RelayModernRecord.fromObject(Object.freeze({
  __UNPUBLISH_RECORD_SENTINEL: true
}));
var RelayOptimisticRecordSource = /*#__PURE__*/function () {
  function RelayOptimisticRecordSource(base) {
    this._base = base;
    this._sink = RelayRecordSource.create();
  }
  var _proto = RelayOptimisticRecordSource.prototype;
  _proto.has = function has(dataID) {
    if (this._sink.has(dataID)) {
      var sinkRecord = this._sink.get(dataID);
      return sinkRecord !== UNPUBLISH_RECORD_SENTINEL;
    } else {
      return this._base.has(dataID);
    }
  };
  _proto.get = function get(dataID) {
    if (this._sink.has(dataID)) {
      var sinkRecord = this._sink.get(dataID);
      if (sinkRecord === UNPUBLISH_RECORD_SENTINEL) {
        return undefined;
      } else {
        return sinkRecord;
      }
    } else {
      return this._base.get(dataID);
    }
  };
  _proto.getStatus = function getStatus(dataID) {
    var record = this.get(dataID);
    if (record === undefined) {
      return 'UNKNOWN';
    } else if (record === null) {
      return 'NONEXISTENT';
    } else {
      return 'EXISTENT';
    }
  };
  _proto.clear = function clear() {
    this._base = RelayRecordSource.create();
    this._sink.clear();
  };
  _proto["delete"] = function _delete(dataID) {
    this._sink["delete"](dataID);
  };
  _proto.remove = function remove(dataID) {
    this._sink.set(dataID, UNPUBLISH_RECORD_SENTINEL);
  };
  _proto.set = function set(dataID, record) {
    this._sink.set(dataID, record);
  };
  _proto.getRecordIDs = function getRecordIDs() {
    return Object.keys(this.toJSON());
  };
  _proto.size = function size() {
    return Object.keys(this.toJSON()).length;
  };
  _proto.toJSON = function toJSON() {
    var _this = this;
    var merged = (0, _objectSpread2["default"])({}, this._base.toJSON());
    this._sink.getRecordIDs().forEach(function (dataID) {
      var record = _this.get(dataID);
      if (record === undefined) {
        delete merged[dataID];
      } else {
        merged[dataID] = RelayModernRecord.toJSON(record);
      }
    });
    return merged;
  };
  _proto.getOptimisticRecordIDs = function getOptimisticRecordIDs() {
    return new Set(this._sink.getRecordIDs());
  };
  return RelayOptimisticRecordSource;
}();
function create(base) {
  return new RelayOptimisticRecordSource(base);
}
function getOptimisticRecordIDs(source) {
  !(source instanceof RelayOptimisticRecordSource) ?  true ? invariant(false, 'getOptimisticRecordIDs: Instance of RelayOptimisticRecordSource is expected') : 0 : void 0;
  return source.getOptimisticRecordIDs();
}
module.exports = {
  create: create,
  getOptimisticRecordIDs: getOptimisticRecordIDs
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayPublishQueue.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _global$ErrorUtils$ap, _global$ErrorUtils;
var RelayRecordSourceMutator = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayRecordSourceMutator.js");
var RelayRecordSourceProxy = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayRecordSourceProxy.js");
var RelayRecordSourceSelectorProxy = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayRecordSourceSelectorProxy.js");
var RelayReader = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayReader.js");
var RelayRecordSource = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayRecordSource.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
var _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : undefined;
var applyWithGuard = (_global$ErrorUtils$ap = _global === null || _global === void 0 ? void 0 : (_global$ErrorUtils = _global.ErrorUtils) === null || _global$ErrorUtils === void 0 ? void 0 : _global$ErrorUtils.applyWithGuard) !== null && _global$ErrorUtils$ap !== void 0 ? _global$ErrorUtils$ap : function (callback, context, args, onError, name) {
  return callback.apply(context, args);
};
var RelayPublishQueue = /*#__PURE__*/function () {
  function RelayPublishQueue(store, handlerProvider, getDataID, missingFieldHandlers) {
    this._hasStoreSnapshot = false;
    this._handlerProvider = handlerProvider || null;
    this._pendingBackupRebase = false;
    this._pendingData = new Set();
    this._pendingOptimisticUpdates = new Set();
    this._store = store;
    this._appliedOptimisticUpdates = new Set();
    this._gcHold = null;
    this._getDataID = getDataID;
    this._missingFieldHandlers = missingFieldHandlers;
  }
  var _proto = RelayPublishQueue.prototype;
  _proto.applyUpdate = function applyUpdate(updater) {
    !(!this._appliedOptimisticUpdates.has(updater) && !this._pendingOptimisticUpdates.has(updater)) ?  true ? invariant(false, 'RelayPublishQueue: Cannot apply the same update function more than ' + 'once concurrently.') : 0 : void 0;
    this._pendingOptimisticUpdates.add(updater);
  };
  _proto.revertUpdate = function revertUpdate(updater) {
    if (this._pendingOptimisticUpdates.has(updater)) {
      this._pendingOptimisticUpdates["delete"](updater);
    } else if (this._appliedOptimisticUpdates.has(updater)) {
      this._pendingBackupRebase = true;
      this._appliedOptimisticUpdates["delete"](updater);
    }
  };
  _proto.revertAll = function revertAll() {
    this._pendingBackupRebase = true;
    this._pendingOptimisticUpdates.clear();
    this._appliedOptimisticUpdates.clear();
  };
  _proto.commitPayload = function commitPayload(operation, payload, updater) {
    this._pendingBackupRebase = true;
    this._pendingData.add({
      kind: 'payload',
      operation: operation,
      payload: payload,
      updater: updater
    });
  };
  _proto.commitUpdate = function commitUpdate(updater) {
    this._pendingBackupRebase = true;
    this._pendingData.add({
      kind: 'updater',
      updater: updater
    });
  };
  _proto.commitSource = function commitSource(source) {
    this._pendingBackupRebase = true;
    this._pendingData.add({
      kind: 'source',
      source: source
    });
  };
  _proto.run = function run(sourceOperation) {
    var runWillClearGcHold = this._appliedOptimisticUpdates === 0 && !!this._gcHold;
    var runIsANoop = !this._pendingBackupRebase && this._pendingOptimisticUpdates.size === 0 && !runWillClearGcHold;
    if (true) {
       true ? warning(!runIsANoop, 'RelayPublishQueue.run was called, but the call would have been a noop.') : 0;
       true ? warning(this._isRunning !== true, 'A store update was detected within another store update. Please ' + "make sure new store updates aren't being executed within an " + 'updater function for a different update.') : 0;
      this._isRunning = true;
    }
    if (runIsANoop) {
      if (true) {
        this._isRunning = false;
      }
      return [];
    }
    if (this._pendingBackupRebase) {
      if (this._hasStoreSnapshot) {
        this._store.restore();
        this._hasStoreSnapshot = false;
      }
    }
    var invalidatedStore = this._commitData();
    if (this._pendingOptimisticUpdates.size || this._pendingBackupRebase && this._appliedOptimisticUpdates.size) {
      if (!this._hasStoreSnapshot) {
        this._store.snapshot();
        this._hasStoreSnapshot = true;
      }
      this._applyUpdates();
    }
    this._pendingBackupRebase = false;
    if (this._appliedOptimisticUpdates.size > 0) {
      if (!this._gcHold) {
        this._gcHold = this._store.holdGC();
      }
    } else {
      if (this._gcHold) {
        this._gcHold.dispose();
        this._gcHold = null;
      }
    }
    if (true) {
      this._isRunning = false;
    }
    return this._store.notify(sourceOperation, invalidatedStore);
  };
  _proto._publishSourceFromPayload = function _publishSourceFromPayload(pendingPayload) {
    var _this = this;
    var payload = pendingPayload.payload,
      operation = pendingPayload.operation,
      updater = pendingPayload.updater;
    var source = payload.source,
      fieldPayloads = payload.fieldPayloads;
    var mutator = new RelayRecordSourceMutator(this._store.getSource(), source);
    var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, this._handlerProvider, this._missingFieldHandlers);
    if (fieldPayloads && fieldPayloads.length) {
      fieldPayloads.forEach(function (fieldPayload) {
        var handler = _this._handlerProvider && _this._handlerProvider(fieldPayload.handle);
        !handler ?  true ? invariant(false, 'RelayModernEnvironment: Expected a handler to be provided for ' + 'handle `%s`.', fieldPayload.handle) : 0 : void 0;
        handler.update(recordSourceProxy, fieldPayload);
      });
    }
    if (updater) {
      var selector = operation.fragment;
      !(selector != null) ?  true ? invariant(false, 'RelayModernEnvironment: Expected a selector to be provided with updater function.') : 0 : void 0;
      var recordSourceSelectorProxy = new RelayRecordSourceSelectorProxy(mutator, recordSourceProxy, selector, this._missingFieldHandlers);
      var selectorData = lookupSelector(source, selector);
      updater(recordSourceSelectorProxy, selectorData);
    }
    var idsMarkedForInvalidation = recordSourceProxy.getIDsMarkedForInvalidation();
    this._store.publish(source, idsMarkedForInvalidation);
    return recordSourceProxy.isStoreMarkedForInvalidation();
  };
  _proto._commitData = function _commitData() {
    var _this2 = this;
    if (!this._pendingData.size) {
      return false;
    }
    var invalidatedStore = false;
    this._pendingData.forEach(function (data) {
      if (data.kind === 'payload') {
        var payloadInvalidatedStore = _this2._publishSourceFromPayload(data);
        invalidatedStore = invalidatedStore || payloadInvalidatedStore;
      } else if (data.kind === 'source') {
        var source = data.source;
        _this2._store.publish(source);
      } else {
        var updater = data.updater;
        var sink = RelayRecordSource.create();
        var mutator = new RelayRecordSourceMutator(_this2._store.getSource(), sink);
        var recordSourceProxy = new RelayRecordSourceProxy(mutator, _this2._getDataID, _this2._handlerProvider, _this2._missingFieldHandlers);
        applyWithGuard(updater, null, [recordSourceProxy], null, 'RelayPublishQueue:commitData');
        invalidatedStore = invalidatedStore || recordSourceProxy.isStoreMarkedForInvalidation();
        var idsMarkedForInvalidation = recordSourceProxy.getIDsMarkedForInvalidation();
        _this2._store.publish(sink, idsMarkedForInvalidation);
      }
    });
    this._pendingData.clear();
    return invalidatedStore;
  };
  _proto._applyUpdates = function _applyUpdates() {
    var _this3 = this;
    var sink = RelayRecordSource.create();
    var mutator = new RelayRecordSourceMutator(this._store.getSource(), sink);
    var recordSourceProxy = new RelayRecordSourceProxy(mutator, this._getDataID, this._handlerProvider, this._missingFieldHandlers);
    var processUpdate = function processUpdate(optimisticUpdate) {
      if (optimisticUpdate.storeUpdater) {
        var storeUpdater = optimisticUpdate.storeUpdater;
        applyWithGuard(storeUpdater, null, [recordSourceProxy], null, 'RelayPublishQueue:applyUpdates');
      } else {
        var operation = optimisticUpdate.operation,
          payload = optimisticUpdate.payload,
          updater = optimisticUpdate.updater;
        var source = payload.source,
          fieldPayloads = payload.fieldPayloads;
        if (source) {
          recordSourceProxy.publishSource(source, fieldPayloads);
        }
        if (updater) {
          var selectorData;
          if (source) {
            selectorData = lookupSelector(source, operation.fragment);
          }
          var recordSourceSelectorProxy = new RelayRecordSourceSelectorProxy(mutator, recordSourceProxy, operation.fragment, _this3._missingFieldHandlers);
          applyWithGuard(updater, null, [recordSourceSelectorProxy, selectorData], null, 'RelayPublishQueue:applyUpdates');
        }
      }
    };
    if (this._pendingBackupRebase && this._appliedOptimisticUpdates.size) {
      this._appliedOptimisticUpdates.forEach(processUpdate);
    }
    if (this._pendingOptimisticUpdates.size) {
      this._pendingOptimisticUpdates.forEach(function (optimisticUpdate) {
        processUpdate(optimisticUpdate);
        _this3._appliedOptimisticUpdates.add(optimisticUpdate);
      });
      this._pendingOptimisticUpdates.clear();
    }
    this._store.publish(sink);
  };
  return RelayPublishQueue;
}();
function lookupSelector(source, selector) {
  var selectorData = RelayReader.read(source, selector).data;
  if (true) {
    var deepFreeze = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/deepFreeze.js");
    if (selectorData) {
      deepFreeze(selectorData);
    }
  }
  return selectorData;
}
module.exports = RelayPublishQueue;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayReader.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _defineProperty2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/defineProperty.js"));
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var _toConsumableArray2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/toConsumableArray.js"));
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js"),
  ACTOR_CHANGE = _require.ACTOR_CHANGE,
  ALIASED_FRAGMENT_SPREAD = _require.ALIASED_FRAGMENT_SPREAD,
  ALIASED_INLINE_FRAGMENT_SPREAD = _require.ALIASED_INLINE_FRAGMENT_SPREAD,
  CLIENT_EDGE_TO_CLIENT_OBJECT = _require.CLIENT_EDGE_TO_CLIENT_OBJECT,
  CLIENT_EDGE_TO_SERVER_OBJECT = _require.CLIENT_EDGE_TO_SERVER_OBJECT,
  CLIENT_EXTENSION = _require.CLIENT_EXTENSION,
  CONDITION = _require.CONDITION,
  DEFER = _require.DEFER,
  FRAGMENT_SPREAD = _require.FRAGMENT_SPREAD,
  INLINE_DATA_FRAGMENT_SPREAD = _require.INLINE_DATA_FRAGMENT_SPREAD,
  INLINE_FRAGMENT = _require.INLINE_FRAGMENT,
  LINKED_FIELD = _require.LINKED_FIELD,
  MODULE_IMPORT = _require.MODULE_IMPORT,
  RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER,
  RELAY_RESOLVER = _require.RELAY_RESOLVER,
  REQUIRED_FIELD = _require.REQUIRED_FIELD,
  SCALAR_FIELD = _require.SCALAR_FIELD,
  STREAM = _require.STREAM;
var RelayFeatureFlags = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js");
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/experimental-live-resolvers/LiveResolverSuspenseSentinel.js"),
  isSuspenseSentinel = _require2.isSuspenseSentinel;
var RelayConcreteVariables = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js");
var RelayModernRecord = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js");
var _require3 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  CLIENT_EDGE_TRAVERSAL_PATH = _require3.CLIENT_EDGE_TRAVERSAL_PATH,
  FRAGMENT_OWNER_KEY = _require3.FRAGMENT_OWNER_KEY,
  FRAGMENT_PROP_NAME_KEY = _require3.FRAGMENT_PROP_NAME_KEY,
  FRAGMENTS_KEY = _require3.FRAGMENTS_KEY,
  ID_KEY = _require3.ID_KEY,
  MODULE_COMPONENT_KEY = _require3.MODULE_COMPONENT_KEY,
  ROOT_ID = _require3.ROOT_ID,
  getArgumentValues = _require3.getArgumentValues,
  getModuleComponentKey = _require3.getModuleComponentKey,
  getStorageKey = _require3.getStorageKey;
var _require4 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ResolverCache.js"),
  NoopResolverCache = _require4.NoopResolverCache;
var _require5 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ResolverFragments.js"),
  RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = _require5.RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL,
  withResolverContext = _require5.withResolverContext;
var _require6 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/TypeID.js"),
  generateTypeID = _require6.generateTypeID;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function read(recordSource, selector, resolverCache) {
  var reader = new RelayReader(recordSource, selector, resolverCache !== null && resolverCache !== void 0 ? resolverCache : new NoopResolverCache());
  return reader.read();
}
var RelayReader = /*#__PURE__*/function () {
  function RelayReader(recordSource, selector, resolverCache) {
    var _selector$clientEdgeT;
    this._clientEdgeTraversalPath = RelayFeatureFlags.ENABLE_CLIENT_EDGES && (_selector$clientEdgeT = selector.clientEdgeTraversalPath) !== null && _selector$clientEdgeT !== void 0 && _selector$clientEdgeT.length ? (0, _toConsumableArray2["default"])(selector.clientEdgeTraversalPath) : [];
    this._missingClientEdges = [];
    this._missingLiveResolverFields = [];
    this._isMissingData = false;
    this._isWithinUnmatchedTypeRefinement = false;
    this._missingRequiredFields = null;
    this._errorResponseFields = null;
    this._owner = selector.owner;
    this._recordSource = recordSource;
    this._seenRecords = new Set();
    this._selector = selector;
    this._variables = selector.variables;
    this._resolverCache = resolverCache;
    this._resolverErrors = [];
    this._fragmentName = selector.node.name;
    this._updatedDataIDs = new Set();
  }
  var _proto = RelayReader.prototype;
  _proto.read = function read() {
    var _this$_selector = this._selector,
      node = _this$_selector.node,
      dataID = _this$_selector.dataID,
      isWithinUnmatchedTypeRefinement = _this$_selector.isWithinUnmatchedTypeRefinement;
    var abstractKey = node.abstractKey;
    var record = this._recordSource.get(dataID);
    var isDataExpectedToBePresent = !isWithinUnmatchedTypeRefinement;
    if (isDataExpectedToBePresent && abstractKey == null && record != null) {
      var recordType = RelayModernRecord.getType(record);
      if (recordType !== node.type && dataID !== ROOT_ID) {
        isDataExpectedToBePresent = false;
      }
    }
    if (isDataExpectedToBePresent && abstractKey != null && record != null) {
      var implementsInterface = this._implementsInterface(record, abstractKey);
      if (implementsInterface === false) {
        isDataExpectedToBePresent = false;
      } else if (implementsInterface == null) {
        this._isMissingData = true;
      }
    }
    this._isWithinUnmatchedTypeRefinement = !isDataExpectedToBePresent;
    var data = this._traverse(node, dataID, null);
    if (this._updatedDataIDs.size > 0) {
      this._resolverCache.notifyUpdatedSubscribers(this._updatedDataIDs);
      this._updatedDataIDs.clear();
    }
    return {
      data: data,
      isMissingData: this._isMissingData && isDataExpectedToBePresent,
      missingClientEdges: RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._missingClientEdges.length ? this._missingClientEdges : null,
      missingLiveResolverFields: this._missingLiveResolverFields,
      seenRecords: this._seenRecords,
      selector: this._selector,
      missingRequiredFields: this._missingRequiredFields,
      relayResolverErrors: this._resolverErrors,
      errorResponseFields: this._errorResponseFields
    };
  };
  _proto._maybeAddErrorResponseFields = function _maybeAddErrorResponseFields(record, storageKey) {
    if (!RelayFeatureFlags.ENABLE_FIELD_ERROR_HANDLING) {
      return;
    }
    var errors = RelayModernRecord.getErrors(record, storageKey);
    if (errors == null) {
      return;
    }
    var owner = this._fragmentName;
    if (this._errorResponseFields == null) {
      this._errorResponseFields = [];
    }
    var _iterator = (0, _createForOfIteratorHelper2["default"])(errors),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _error$path;
        var error = _step.value;
        this._errorResponseFields.push({
          owner: owner,
          path: ((_error$path = error.path) !== null && _error$path !== void 0 ? _error$path : []).join('.'),
          error: error
        });
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  };
  _proto._markDataAsMissing = function _markDataAsMissing() {
    this._isMissingData = true;
    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES && this._clientEdgeTraversalPath.length) {
      var top = this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1];
      if (top !== null) {
        this._missingClientEdges.push({
          request: top.readerClientEdge.operation,
          clientEdgeDestinationID: top.clientEdgeDestinationID
        });
      }
    }
  };
  _proto._traverse = function _traverse(node, dataID, prevData) {
    var record = this._recordSource.get(dataID);
    this._seenRecords.add(dataID);
    if (record == null) {
      if (record === undefined) {
        this._markDataAsMissing();
      }
      return record;
    }
    var data = prevData || {};
    var hadRequiredData = this._traverseSelections(node.selections, record, data);
    return hadRequiredData ? data : null;
  };
  _proto._getVariableValue = function _getVariableValue(name) {
    !this._variables.hasOwnProperty(name) ?  true ? invariant(false, 'RelayReader(): Undefined variable `%s`.', name) : 0 : void 0;
    return this._variables[name];
  };
  _proto._maybeReportUnexpectedNull = function _maybeReportUnexpectedNull(fieldPath, action) {
    var _this$_missingRequire;
    if (((_this$_missingRequire = this._missingRequiredFields) === null || _this$_missingRequire === void 0 ? void 0 : _this$_missingRequire.action) === 'THROW') {
      return;
    }
    var owner = this._fragmentName;
    switch (action) {
      case 'THROW':
        this._missingRequiredFields = {
          action: action,
          field: {
            path: fieldPath,
            owner: owner
          }
        };
        return;
      case 'LOG':
        if (this._missingRequiredFields == null) {
          this._missingRequiredFields = {
            action: action,
            fields: [{
              path: fieldPath,
              owner: owner
            }]
          };
        } else {
          this._missingRequiredFields = {
            action: action,
            fields: [].concat((0, _toConsumableArray2["default"])(this._missingRequiredFields.fields), [{
              path: fieldPath,
              owner: owner
            }])
          };
        }
        return;
      default:
        action;
    }
  };
  _proto._traverseSelections = function _traverseSelections(selections, record, data) {
    for (var i = 0; i < selections.length; i++) {
      var selection = selections[i];
      switch (selection.kind) {
        case REQUIRED_FIELD:
          {
            var fieldValue = this._readRequiredField(selection, record, data);
            if (fieldValue == null) {
              var action = selection.action;
              if (action !== 'NONE') {
                this._maybeReportUnexpectedNull(selection.path, action);
              }
              return false;
            }
            break;
          }
        case SCALAR_FIELD:
          this._readScalar(selection, record, data);
          break;
        case LINKED_FIELD:
          if (selection.plural) {
            this._readPluralLink(selection, record, data);
          } else {
            this._readLink(selection, record, data);
          }
          break;
        case CONDITION:
          var conditionValue = Boolean(this._getVariableValue(selection.condition));
          if (conditionValue === selection.passingValue) {
            var hasExpectedData = this._traverseSelections(selection.selections, record, data);
            if (!hasExpectedData) {
              return false;
            }
          }
          break;
        case INLINE_FRAGMENT:
          {
            if (this._readInlineFragment(selection, record, data) === false) {
              return false;
            }
            break;
          }
        case RELAY_LIVE_RESOLVER:
        case RELAY_RESOLVER:
          {
            if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
              throw new Error('Relay Resolver fields are not yet supported.');
            }
            this._readResolverField(selection, record, data);
            break;
          }
        case FRAGMENT_SPREAD:
          this._createFragmentPointer(selection, record, data);
          break;
        case ALIASED_FRAGMENT_SPREAD:
          data[selection.name] = this._createAliasedFragmentSpread(selection, record);
          break;
        case ALIASED_INLINE_FRAGMENT_SPREAD:
          {
            var _fieldValue = this._readInlineFragment(selection.fragment, record, {});
            if (_fieldValue === false) {
              _fieldValue = null;
            }
            data[selection.name] = _fieldValue;
            break;
          }
        case MODULE_IMPORT:
          this._readModuleImport(selection, record, data);
          break;
        case INLINE_DATA_FRAGMENT_SPREAD:
          this._createInlineDataOrResolverFragmentPointer(selection, record, data);
          break;
        case DEFER:
        case CLIENT_EXTENSION:
          {
            var isMissingData = this._isMissingData;
            var alreadyMissingClientEdges = this._missingClientEdges.length;
            if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
              this._clientEdgeTraversalPath.push(null);
            }
            var _hasExpectedData = this._traverseSelections(selection.selections, record, data);
            this._isMissingData = isMissingData || this._missingClientEdges.length > alreadyMissingClientEdges || this._missingLiveResolverFields.length > 0;
            if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
              this._clientEdgeTraversalPath.pop();
            }
            if (!_hasExpectedData) {
              return false;
            }
            break;
          }
        case STREAM:
          {
            var _hasExpectedData2 = this._traverseSelections(selection.selections, record, data);
            if (!_hasExpectedData2) {
              return false;
            }
            break;
          }
        case ACTOR_CHANGE:
          this._readActorChange(selection, record, data);
          break;
        case CLIENT_EDGE_TO_CLIENT_OBJECT:
        case CLIENT_EDGE_TO_SERVER_OBJECT:
          if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
            this._readClientEdge(selection, record, data);
          } else {
            throw new Error('Client edges are not yet supported.');
          }
          break;
        default:
          selection;
           true ?  true ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : 0 : 0;
      }
    }
    return true;
  };
  _proto._readRequiredField = function _readRequiredField(selection, record, data) {
    switch (selection.field.kind) {
      case SCALAR_FIELD:
        return this._readScalar(selection.field, record, data);
      case LINKED_FIELD:
        if (selection.field.plural) {
          return this._readPluralLink(selection.field, record, data);
        } else {
          return this._readLink(selection.field, record, data);
        }
      case RELAY_RESOLVER:
        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
          throw new Error('Relay Resolver fields are not yet supported.');
        }
        return this._readResolverField(selection.field, record, data);
      case RELAY_LIVE_RESOLVER:
        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
          throw new Error('Relay Resolver fields are not yet supported.');
        }
        return this._readResolverField(selection.field, record, data);
      case CLIENT_EDGE_TO_CLIENT_OBJECT:
      case CLIENT_EDGE_TO_SERVER_OBJECT:
        if (!RelayFeatureFlags.ENABLE_RELAY_RESOLVERS) {
          throw new Error('Relay Resolver fields are not yet supported.');
        }
        return this._readClientEdge(selection.field, record, data);
      default:
        selection.field.kind;
         true ?  true ? invariant(false, 'RelayReader(): Unexpected ast kind `%s`.', selection.kind) : 0 : 0;
    }
  };
  _proto._readResolverField = function _readResolverField(field, record, data) {
    var _field$alias;
    var parentRecordID = RelayModernRecord.getDataID(record);
    var result = this._readResolverFieldImpl(field, parentRecordID);
    var applicationName = (_field$alias = field.alias) !== null && _field$alias !== void 0 ? _field$alias : field.name;
    data[applicationName] = result;
    return result;
  };
  _proto._readResolverFieldImpl = function _readResolverFieldImpl(field, parentRecordID) {
    var _this = this;
    var fragment = field.fragment;
    var snapshot;
    var getDataForResolverFragment = function getDataForResolverFragment(singularReaderSelector) {
      if (snapshot != null) {
        return {
          data: snapshot.data,
          isMissingData: snapshot.isMissingData
        };
      }
      snapshot = read(_this._recordSource, singularReaderSelector, _this._resolverCache);
      return {
        data: snapshot.data,
        isMissingData: snapshot.isMissingData
      };
    };
    var evaluate = function evaluate() {
      if (fragment != null) {
        var key = {
          __id: parentRecordID,
          __fragmentOwner: _this._owner,
          __fragments: (0, _defineProperty2["default"])({}, fragment.name, fragment.args ? getArgumentValues(fragment.args, _this._variables) : {})
        };
        var resolverContext = {
          getDataForResolverFragment: getDataForResolverFragment
        };
        return withResolverContext(resolverContext, function () {
          var _getResolverValue = getResolverValue(field, _this._variables, key),
            resolverResult = _getResolverValue[0],
            resolverError = _getResolverValue[1];
          return {
            resolverResult: resolverResult,
            snapshot: snapshot,
            error: resolverError
          };
        });
      } else {
        var _getResolverValue2 = getResolverValue(field, _this._variables, null),
          resolverResult = _getResolverValue2[0],
          _resolverError = _getResolverValue2[1];
        return {
          resolverResult: resolverResult,
          snapshot: undefined,
          error: _resolverError
        };
      }
    };
    var _this$_resolverCache$ = this._resolverCache.readFromCacheOrEvaluate(parentRecordID, field, this._variables, evaluate, getDataForResolverFragment),
      result = _this$_resolverCache$[0],
      seenRecord = _this$_resolverCache$[1],
      resolverError = _this$_resolverCache$[2],
      cachedSnapshot = _this$_resolverCache$[3],
      suspenseID = _this$_resolverCache$[4],
      updatedDataIDs = _this$_resolverCache$[5];
    this._propogateResolverMetadata(field.path, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs);
    return result;
  };
  _proto._propogateResolverMetadata = function _propogateResolverMetadata(fieldPath, cachedSnapshot, resolverError, seenRecord, suspenseID, updatedDataIDs) {
    if (cachedSnapshot != null) {
      if (cachedSnapshot.missingRequiredFields != null) {
        this._addMissingRequiredFields(cachedSnapshot.missingRequiredFields);
      }
      if (cachedSnapshot.missingClientEdges != null) {
        var _iterator2 = (0, _createForOfIteratorHelper2["default"])(cachedSnapshot.missingClientEdges),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var missing = _step2.value;
            this._missingClientEdges.push(missing);
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      if (cachedSnapshot.missingLiveResolverFields != null) {
        this._isMissingData = this._isMissingData || cachedSnapshot.missingLiveResolverFields.length > 0;
        var _iterator3 = (0, _createForOfIteratorHelper2["default"])(cachedSnapshot.missingLiveResolverFields),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var missingResolverField = _step3.value;
            this._missingLiveResolverFields.push(missingResolverField);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
      var _iterator4 = (0, _createForOfIteratorHelper2["default"])(cachedSnapshot.relayResolverErrors),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var error = _step4.value;
          this._resolverErrors.push(error);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      this._isMissingData = this._isMissingData || cachedSnapshot.isMissingData;
    }
    if (resolverError) {
      this._resolverErrors.push({
        field: {
          path: fieldPath,
          owner: this._fragmentName
        },
        error: resolverError
      });
    }
    if (seenRecord != null) {
      this._seenRecords.add(seenRecord);
    }
    if (suspenseID != null) {
      this._isMissingData = true;
      this._missingLiveResolverFields.push({
        path: "".concat(this._fragmentName, ".").concat(fieldPath),
        liveStateID: suspenseID
      });
    }
    if (updatedDataIDs != null) {
      var _iterator5 = (0, _createForOfIteratorHelper2["default"])(updatedDataIDs),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var recordID = _step5.value;
          this._updatedDataIDs.add(recordID);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
    }
  };
  _proto._readClientEdge = function _readClientEdge(field, record, data) {
    var _this2 = this;
    var _backingField$alias;
    var backingField = field.backingField;
    !(backingField.kind !== 'ClientExtension') ?  true ? invariant(false, 'Client extension client edges are not yet implemented.') : 0 : void 0;
    var applicationName = (_backingField$alias = backingField.alias) !== null && _backingField$alias !== void 0 ? _backingField$alias : backingField.name;
    var backingFieldData = {};
    this._traverseSelections([backingField], record, backingFieldData);
    var clientEdgeResolverResponse = backingFieldData[applicationName];
    if (clientEdgeResolverResponse == null || isSuspenseSentinel(clientEdgeResolverResponse)) {
      data[applicationName] = clientEdgeResolverResponse;
      return clientEdgeResolverResponse;
    }
    var validClientEdgeResolverResponse = assertValidClientEdgeResolverResponse(field, clientEdgeResolverResponse);
    switch (validClientEdgeResolverResponse.kind) {
      case 'PluralConcrete':
        var storeIDs = getStoreIDsForPluralClientEdgeResolver(field, validClientEdgeResolverResponse.ids, this._resolverCache);
        var validStoreIDs = storeIDs;
        if (field.modelResolver != null) {
          var modelResolver = field.modelResolver;
          validStoreIDs = storeIDs.map(function (storeID) {
            var model = _this2._readResolverFieldImpl(modelResolver, storeID);
            return model != null ? storeID : null;
          });
        }
        this._clientEdgeTraversalPath.push(null);
        var edgeValues = this._readLinkedIds(field.linkedField, validStoreIDs, record, data);
        this._clientEdgeTraversalPath.pop();
        data[applicationName] = edgeValues;
        return edgeValues;
      case 'SingularConcrete':
        var _getStoreIDAndTravers = getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver(field, validClientEdgeResolverResponse.id, this._resolverCache),
          storeID = _getStoreIDAndTravers[0],
          traversalPathSegment = _getStoreIDAndTravers[1];
        if (field.modelResolver != null) {
          var model = this._readResolverFieldImpl(field.modelResolver, storeID);
          if (model == null) {
            data[applicationName] = null;
            return null;
          }
        }
        this._clientEdgeTraversalPath.push(traversalPathSegment);
        var prevData = data[applicationName];
        !(prevData == null || typeof prevData === 'object') ?  true ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : 0 : void 0;
        var edgeValue = this._traverse(field.linkedField, storeID, prevData);
        this._clientEdgeTraversalPath.pop();
        data[applicationName] = edgeValue;
        return edgeValue;
      default:
        validClientEdgeResolverResponse.kind;
    }
  };
  _proto._readScalar = function _readScalar(field, record, data) {
    var _field$alias2;
    var applicationName = (_field$alias2 = field.alias) !== null && _field$alias2 !== void 0 ? _field$alias2 : field.name;
    var storageKey = getStorageKey(field, this._variables);
    var value = RelayModernRecord.getValue(record, storageKey);
    if (value === null) {
      this._maybeAddErrorResponseFields(record, storageKey);
    } else if (value === undefined) {
      this._markDataAsMissing();
    }
    data[applicationName] = value;
    return value;
  };
  _proto._readLink = function _readLink(field, record, data) {
    var _field$alias3;
    var applicationName = (_field$alias3 = field.alias) !== null && _field$alias3 !== void 0 ? _field$alias3 : field.name;
    var storageKey = getStorageKey(field, this._variables);
    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
    if (linkedID == null) {
      data[applicationName] = linkedID;
      if (linkedID === null) {
        this._maybeAddErrorResponseFields(record, storageKey);
      } else if (linkedID === undefined) {
        this._markDataAsMissing();
      }
      return linkedID;
    }
    var prevData = data[applicationName];
    !(prevData == null || typeof prevData === 'object') ?  true ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : 0 : void 0;
    var value = this._traverse(field, linkedID, prevData);
    data[applicationName] = value;
    return value;
  };
  _proto._readActorChange = function _readActorChange(field, record, data) {
    var _field$alias4;
    var applicationName = (_field$alias4 = field.alias) !== null && _field$alias4 !== void 0 ? _field$alias4 : field.name;
    var storageKey = getStorageKey(field, this._variables);
    var externalRef = RelayModernRecord.getActorLinkedRecordID(record, storageKey);
    if (externalRef == null) {
      data[applicationName] = externalRef;
      if (externalRef === undefined) {
        this._markDataAsMissing();
      } else if (externalRef === null) {
        this._maybeAddErrorResponseFields(record, storageKey);
      }
      return data[applicationName];
    }
    var actorIdentifier = externalRef[0],
      dataID = externalRef[1];
    var fragmentRef = {};
    this._createFragmentPointer(field.fragmentSpread, RelayModernRecord.fromObject({
      __id: dataID
    }), fragmentRef);
    data[applicationName] = {
      __fragmentRef: fragmentRef,
      __viewer: actorIdentifier
    };
    return data[applicationName];
  };
  _proto._readPluralLink = function _readPluralLink(field, record, data) {
    var storageKey = getStorageKey(field, this._variables);
    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
    if (linkedIDs === null) {
      this._maybeAddErrorResponseFields(record, storageKey);
    }
    return this._readLinkedIds(field, linkedIDs, record, data);
  };
  _proto._readLinkedIds = function _readLinkedIds(field, linkedIDs, record, data) {
    var _this3 = this;
    var _field$alias5;
    var applicationName = (_field$alias5 = field.alias) !== null && _field$alias5 !== void 0 ? _field$alias5 : field.name;
    if (linkedIDs == null) {
      data[applicationName] = linkedIDs;
      if (linkedIDs === undefined) {
        this._markDataAsMissing();
      }
      return linkedIDs;
    }
    var prevData = data[applicationName];
    !(prevData == null || Array.isArray(prevData)) ?  true ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an array, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevData) : 0 : void 0;
    var linkedArray = prevData || [];
    linkedIDs.forEach(function (linkedID, nextIndex) {
      if (linkedID == null) {
        if (linkedID === undefined) {
          _this3._markDataAsMissing();
        }
        linkedArray[nextIndex] = linkedID;
        return;
      }
      var prevItem = linkedArray[nextIndex];
      !(prevItem == null || typeof prevItem === 'object') ?  true ? invariant(false, 'RelayReader(): Expected data for field `%s` on record `%s` ' + 'to be an object, got `%s`.', applicationName, RelayModernRecord.getDataID(record), prevItem) : 0 : void 0;
      linkedArray[nextIndex] = _this3._traverse(field, linkedID, prevItem);
    });
    data[applicationName] = linkedArray;
    return linkedArray;
  };
  _proto._readModuleImport = function _readModuleImport(moduleImport, record, data) {
    var componentKey = getModuleComponentKey(moduleImport.documentName);
    var component = RelayModernRecord.getValue(record, componentKey);
    if (component == null) {
      if (component === undefined) {
        this._markDataAsMissing();
      }
      return;
    }
    this._createFragmentPointer({
      kind: 'FragmentSpread',
      name: moduleImport.fragmentName,
      args: moduleImport.args
    }, record, data);
    data[FRAGMENT_PROP_NAME_KEY] = moduleImport.fragmentPropName;
    data[MODULE_COMPONENT_KEY] = component;
  };
  _proto._createAliasedFragmentSpread = function _createAliasedFragmentSpread(namedFragmentSpread, record) {
    var abstractKey = namedFragmentSpread.abstractKey;
    if (abstractKey == null) {
      var typeName = RelayModernRecord.getType(record);
      if (typeName == null || typeName !== namedFragmentSpread.type) {
        return null;
      }
    } else {
      var implementsInterface = this._implementsInterface(record, abstractKey);
      if (implementsInterface === false) {
        return null;
      } else if (implementsInterface == null) {
        this._markDataAsMissing();
        return undefined;
      }
    }
    var fieldData = {};
    this._createFragmentPointer(namedFragmentSpread.fragment, record, fieldData);
    return RelayModernRecord.fromObject(fieldData);
  };
  _proto._readInlineFragment = function _readInlineFragment(inlineFragment, record, data) {
    var abstractKey = inlineFragment.abstractKey;
    if (abstractKey == null) {
      var typeName = RelayModernRecord.getType(record);
      if (typeName == null || typeName !== inlineFragment.type) {
        return null;
      } else {
        var hasExpectedData = this._traverseSelections(inlineFragment.selections, record, data);
        if (!hasExpectedData) {
          return false;
        }
      }
    } else {
      var implementsInterface = this._implementsInterface(record, abstractKey);
      var parentIsMissingData = this._isMissingData;
      var parentIsWithinUnmatchedTypeRefinement = this._isWithinUnmatchedTypeRefinement;
      this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement || implementsInterface === false;
      this._traverseSelections(inlineFragment.selections, record, data);
      this._isWithinUnmatchedTypeRefinement = parentIsWithinUnmatchedTypeRefinement;
      if (implementsInterface === false) {
        this._isMissingData = parentIsMissingData;
        return undefined;
      } else if (implementsInterface == null) {
        this._markDataAsMissing();
        return null;
      }
    }
    return data;
  };
  _proto._createFragmentPointer = function _createFragmentPointer(fragmentSpread, record, data) {
    var fragmentPointers = data[FRAGMENTS_KEY];
    if (fragmentPointers == null) {
      fragmentPointers = data[FRAGMENTS_KEY] = {};
    }
    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ?  true ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : 0 : void 0;
    if (data[ID_KEY] == null) {
      data[ID_KEY] = RelayModernRecord.getDataID(record);
    }
    fragmentPointers[fragmentSpread.name] = getArgumentValues(fragmentSpread.args, this._variables, this._isWithinUnmatchedTypeRefinement);
    data[FRAGMENT_OWNER_KEY] = this._owner;
    if (RelayFeatureFlags.ENABLE_CLIENT_EDGES) {
      if (this._clientEdgeTraversalPath.length > 0 && this._clientEdgeTraversalPath[this._clientEdgeTraversalPath.length - 1] !== null) {
        data[CLIENT_EDGE_TRAVERSAL_PATH] = (0, _toConsumableArray2["default"])(this._clientEdgeTraversalPath);
      }
    }
  };
  _proto._createInlineDataOrResolverFragmentPointer = function _createInlineDataOrResolverFragmentPointer(fragmentSpreadOrFragment, record, data) {
    var fragmentPointers = data[FRAGMENTS_KEY];
    if (fragmentPointers == null) {
      fragmentPointers = data[FRAGMENTS_KEY] = {};
    }
    !(typeof fragmentPointers === 'object' && fragmentPointers != null) ?  true ? invariant(false, 'RelayReader: Expected fragment spread data to be an object, got `%s`.', fragmentPointers) : 0 : void 0;
    if (data[ID_KEY] == null) {
      data[ID_KEY] = RelayModernRecord.getDataID(record);
    }
    var inlineData = {};
    var parentFragmentName = this._fragmentName;
    this._fragmentName = fragmentSpreadOrFragment.name;
    var parentVariables = this._variables;
    var argumentVariables = fragmentSpreadOrFragment.args ? getArgumentValues(fragmentSpreadOrFragment.args, this._variables) : {};
    this._variables = RelayConcreteVariables.getFragmentVariables(fragmentSpreadOrFragment, this._owner.variables, argumentVariables);
    this._traverseSelections(fragmentSpreadOrFragment.selections, record, inlineData);
    this._variables = parentVariables;
    this._fragmentName = parentFragmentName;
    fragmentPointers[fragmentSpreadOrFragment.name] = inlineData;
  };
  _proto._addMissingRequiredFields = function _addMissingRequiredFields(additional) {
    if (this._missingRequiredFields == null) {
      this._missingRequiredFields = additional;
      return;
    }
    if (this._missingRequiredFields.action === 'THROW') {
      return;
    }
    if (additional.action === 'THROW') {
      this._missingRequiredFields = additional;
      return;
    }
    this._missingRequiredFields = {
      action: 'LOG',
      fields: [].concat((0, _toConsumableArray2["default"])(this._missingRequiredFields.fields), (0, _toConsumableArray2["default"])(additional.fields))
    };
  };
  _proto._implementsInterface = function _implementsInterface(record, abstractKey) {
    var typeName = RelayModernRecord.getType(record);
    var typeRecord = this._recordSource.get(generateTypeID(typeName));
    var implementsInterface = typeRecord != null ? RelayModernRecord.getValue(typeRecord, abstractKey) : null;
    return implementsInterface;
  };
  return RelayReader;
}();
function getResolverValue(field, variables, fragmentKey) {
  var resolverFunction = typeof field.resolverModule === 'function' ? field.resolverModule : field.resolverModule["default"];
  var resolverResult = null;
  var resolverError = null;
  try {
    var resolverFunctionArgs = [];
    if (field.fragment != null) {
      resolverFunctionArgs.push(fragmentKey);
    }
    var args = field.args ? getArgumentValues(field.args, variables) : undefined;
    resolverFunctionArgs.push(args);
    resolverResult = resolverFunction.apply(null, resolverFunctionArgs);
  } catch (e) {
    if (e === RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL) {
      resolverResult = undefined;
    } else {
      resolverError = e;
    }
  }
  return [resolverResult, resolverError];
}
function assertValidClientEdgeResolverResponse(field, clientEdgeResolverResponse) {
  if (field.linkedField.plural) {
    !Array.isArray(clientEdgeResolverResponse) ?  true ? invariant(false, 'Expected plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.') : 0 : void 0;
    return {
      kind: 'PluralConcrete',
      ids: clientEdgeResolverResponse.map(function (response) {
        return extractIdFromResponse(response, 'Expected this plural Client Edge Relay Resolver to return an array containing IDs or objects with shape {id}.');
      })
    };
  } else {
    return {
      kind: 'SingularConcrete',
      id: extractIdFromResponse(clientEdgeResolverResponse, 'Expected this Client Edge Relay Resolver to return an ID of type `string` or an object with shape {id}.')
    };
  }
}
function getStoreIDAndTraversalPathSegmentForSingularClientEdgeResolver(field, clientEdgeResolverResponse, resolverCache) {
  if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {
    if (field.backingField.normalizationInfo == null) {
      var concreteType = field.concreteType;
      !(concreteType != null) ?  true ? invariant(false, 'Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. ' + 'This indicates a bug in Relay.') : 0 : void 0;
      return [resolverCache.ensureClientRecord(clientEdgeResolverResponse, concreteType), null];
    } else {
      return [clientEdgeResolverResponse, null];
    }
  } else {
    return [clientEdgeResolverResponse, {
      readerClientEdge: field,
      clientEdgeDestinationID: clientEdgeResolverResponse
    }];
  }
}
function getStoreIDsForPluralClientEdgeResolver(field, clientEdgeResolverResponse, resolverCache) {
  if (field.kind === CLIENT_EDGE_TO_CLIENT_OBJECT) {
    if (field.backingField.normalizationInfo == null) {
      var concreteType = field.concreteType;
      !(concreteType != null) ?  true ? invariant(false, 'Expected at least one of backingField.normalizationInfo or field.concreteType to be non-null. ' + 'This indicates a bug in Relay.') : 0 : void 0;
      return clientEdgeResolverResponse.map(function (id) {
        return resolverCache.ensureClientRecord(id, concreteType);
      });
    } else {
      return clientEdgeResolverResponse;
    }
  } else {
     true ?  true ? invariant(false, 'Unexpected Client Edge to plural server type. This should be prevented by the compiler.') : 0 : 0;
  }
}
function extractIdFromResponse(individualResponse, errorMessage) {
  if (typeof individualResponse === 'string') {
    return individualResponse;
  } else if (typeof individualResponse === 'object' && individualResponse != null && typeof individualResponse.id === 'string') {
    return individualResponse.id;
  }
   true ?  true ? invariant(false, errorMessage) : 0 : 0;
}
module.exports = {
  read: read
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayRecordSource.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var RelayModernRecord = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js");
var RelayRecordState = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayRecordState.js");
var EXISTENT = RelayRecordState.EXISTENT,
  NONEXISTENT = RelayRecordState.NONEXISTENT,
  UNKNOWN = RelayRecordState.UNKNOWN;
var RelayRecordSource = /*#__PURE__*/function () {
  function RelayRecordSource(records) {
    var _this = this;
    this._records = new Map();
    if (records != null) {
      Object.keys(records).forEach(function (key) {
        var object = records[key];
        var record = RelayModernRecord.fromObject(object);
        _this._records.set(key, record);
      });
    }
  }
  RelayRecordSource.create = function create(records) {
    return new RelayRecordSource(records);
  };
  var _proto = RelayRecordSource.prototype;
  _proto.clear = function clear() {
    this._records = new Map();
  };
  _proto["delete"] = function _delete(dataID) {
    this._records.set(dataID, null);
  };
  _proto.get = function get(dataID) {
    return this._records.get(dataID);
  };
  _proto.getRecordIDs = function getRecordIDs() {
    return Array.from(this._records.keys());
  };
  _proto.getStatus = function getStatus(dataID) {
    if (!this._records.has(dataID)) {
      return UNKNOWN;
    }
    return this._records.get(dataID) == null ? NONEXISTENT : EXISTENT;
  };
  _proto.has = function has(dataID) {
    return this._records.has(dataID);
  };
  _proto.remove = function remove(dataID) {
    this._records["delete"](dataID);
  };
  _proto.set = function set(dataID, record) {
    this._records.set(dataID, record);
  };
  _proto.size = function size() {
    return this._records.size;
  };
  _proto.toJSON = function toJSON() {
    var obj = {};
    var _iterator = (0, _createForOfIteratorHelper2["default"])(this._records),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _step.value,
          key = _step$value[0],
          record = _step$value[1];
        obj[key] = RelayModernRecord.toJSON(record);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return obj;
  };
  return RelayRecordSource;
}();
module.exports = RelayRecordSource;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayRecordState.js": (function (module) {
"use strict";


var RelayRecordState = {
  EXISTENT: 'EXISTENT',
  NONEXISTENT: 'NONEXISTENT',
  UNKNOWN: 'UNKNOWN'
};
module.exports = RelayRecordState;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayReferenceMarker.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var getOperation = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getOperation.js");
var RelayConcreteNode = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js");
var cloneRelayHandleSourceField = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/cloneRelayHandleSourceField.js");
var getOutputTypeRecordIDs = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/experimental-live-resolvers/getOutputTypeRecordIDs.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js"),
  getLocalVariables = _require.getLocalVariables;
var RelayModernRecord = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js");
var RelayStoreUtils = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js");
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/TypeID.js"),
  generateTypeID = _require2.generateTypeID;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE,
  CONDITION = RelayConcreteNode.CONDITION,
  CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT,
  CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,
  DEFER = RelayConcreteNode.DEFER,
  FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,
  INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,
  LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,
  MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,
  LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,
  SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,
  SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,
  STREAM = RelayConcreteNode.STREAM,
  TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR,
  RELAY_RESOLVER = RelayConcreteNode.RELAY_RESOLVER,
  RELAY_LIVE_RESOLVER = RelayConcreteNode.RELAY_LIVE_RESOLVER,
  CLIENT_EDGE_TO_CLIENT_OBJECT = RelayConcreteNode.CLIENT_EDGE_TO_CLIENT_OBJECT;
var getStorageKey = RelayStoreUtils.getStorageKey,
  getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;
function mark(recordSource, selector, references, operationLoader, shouldProcessClientComponents) {
  var dataID = selector.dataID,
    node = selector.node,
    variables = selector.variables;
  var marker = new RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents);
  marker.mark(node, dataID);
}
var RelayReferenceMarker = /*#__PURE__*/function () {
  function RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents) {
    this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;
    this._operationName = null;
    this._recordSource = recordSource;
    this._references = references;
    this._variables = variables;
    this._shouldProcessClientComponents = shouldProcessClientComponents;
  }
  var _proto = RelayReferenceMarker.prototype;
  _proto.mark = function mark(node, dataID) {
    if (node.kind === 'Operation' || node.kind === 'SplitOperation') {
      this._operationName = node.name;
    }
    this._traverse(node, dataID);
  };
  _proto._traverse = function _traverse(node, dataID) {
    this._references.add(dataID);
    var record = this._recordSource.get(dataID);
    if (record == null) {
      return;
    }
    this._traverseSelections(node.selections, record);
  };
  _proto._getVariableValue = function _getVariableValue(name) {
    !this._variables.hasOwnProperty(name) ?  true ? invariant(false, 'RelayReferenceMarker(): Undefined variable `%s`.', name) : 0 : void 0;
    return this._variables[name];
  };
  _proto._traverseSelections = function _traverseSelections(selections, record) {
    var _this = this;
    selections.forEach(function (selection) {
      switch (selection.kind) {
        case ACTOR_CHANGE:
          _this._traverseLink(selection.linkedField, record);
          break;
        case LINKED_FIELD:
          if (selection.plural) {
            _this._traversePluralLink(selection, record);
          } else {
            _this._traverseLink(selection, record);
          }
          break;
        case CONDITION:
          var conditionValue = Boolean(_this._getVariableValue(selection.condition));
          if (conditionValue === selection.passingValue) {
            _this._traverseSelections(selection.selections, record);
          }
          break;
        case INLINE_FRAGMENT:
          if (selection.abstractKey == null) {
            var typeName = RelayModernRecord.getType(record);
            if (typeName != null && typeName === selection.type || typeName === RelayStoreUtils.ROOT_TYPE) {
              _this._traverseSelections(selection.selections, record);
            }
          } else {
            var _typeName = RelayModernRecord.getType(record);
            var typeID = generateTypeID(_typeName);
            _this._references.add(typeID);
            _this._traverseSelections(selection.selections, record);
          }
          break;
        case FRAGMENT_SPREAD:
          var prevVariables = _this._variables;
          _this._variables = getLocalVariables(_this._variables, selection.fragment.argumentDefinitions, selection.args);
          _this._traverseSelections(selection.fragment.selections, record);
          _this._variables = prevVariables;
          break;
        case LINKED_HANDLE:
          var handleField = cloneRelayHandleSourceField(selection, selections, _this._variables);
          if (handleField.plural) {
            _this._traversePluralLink(handleField, record);
          } else {
            _this._traverseLink(handleField, record);
          }
          break;
        case DEFER:
        case STREAM:
          _this._traverseSelections(selection.selections, record);
          break;
        case SCALAR_FIELD:
        case SCALAR_HANDLE:
          break;
        case TYPE_DISCRIMINATOR:
          {
            var _typeName2 = RelayModernRecord.getType(record);
            var _typeID = generateTypeID(_typeName2);
            _this._references.add(_typeID);
            break;
          }
        case MODULE_IMPORT:
          _this._traverseModuleImport(selection, record);
          break;
        case CLIENT_EXTENSION:
          _this._traverseSelections(selection.selections, record);
          break;
        case CLIENT_COMPONENT:
          if (_this._shouldProcessClientComponents === false) {
            break;
          }
          _this._traverseSelections(selection.fragment.selections, record);
          break;
        case RELAY_RESOLVER:
          _this._traverseResolverField(selection, record);
          break;
        case RELAY_LIVE_RESOLVER:
          _this._traverseResolverField(selection, record);
          break;
        case CLIENT_EDGE_TO_CLIENT_OBJECT:
          _this._traverseClientEdgeToClientObject(selection, record);
          break;
        default:
          selection;
           true ?  true ? invariant(false, 'RelayReferenceMarker: Unknown AST node `%s`.', selection) : 0 : 0;
      }
    });
  };
  _proto._traverseClientEdgeToClientObject = function _traverseClientEdgeToClientObject(field, record) {
    var dataID = this._traverseResolverField(field.backingField, record);
    if (dataID == null) {
      return;
    }
    var resolverRecord = this._recordSource.get(dataID);
    if (resolverRecord == null) {
      return;
    }
    if (field.backingField.isOutputType) {
      var outputTypeRecordIDs = getOutputTypeRecordIDs(resolverRecord);
      if (outputTypeRecordIDs != null) {
        var _iterator = (0, _createForOfIteratorHelper2["default"])(outputTypeRecordIDs),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _dataID = _step.value;
            this._references.add(_dataID);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    } else {
      var linkedField = field.linkedField;
      var concreteType = linkedField.concreteType;
      if (concreteType == null) {
        return;
      }
      if (linkedField.plural) {
        var dataIDs = RelayModernRecord.getResolverLinkedRecordIDs(resolverRecord, concreteType);
        if (dataIDs != null) {
          var _iterator2 = (0, _createForOfIteratorHelper2["default"])(dataIDs),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var _dataID2 = _step2.value;
              if (_dataID2 != null) {
                this._traverse(linkedField, _dataID2);
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        }
      } else {
        var _dataID3 = RelayModernRecord.getResolverLinkedRecordID(resolverRecord, concreteType);
        if (_dataID3 != null) {
          this._traverse(linkedField, _dataID3);
        }
      }
    }
  };
  _proto._traverseResolverField = function _traverseResolverField(field, record) {
    var storageKey = getStorageKey(field, this._variables);
    var dataID = RelayModernRecord.getLinkedRecordID(record, storageKey);
    if (dataID != null) {
      this._references.add(dataID);
    }
    var fragment = field.fragment;
    if (fragment != null) {
      this._traverseSelections([fragment], record);
    }
    return dataID;
  };
  _proto._traverseModuleImport = function _traverseModuleImport(moduleImport, record) {
    var _this$_operationName;
    var operationLoader = this._operationLoader;
    !(operationLoader !== null) ?  true ? invariant(false, 'RelayReferenceMarker: Expected an operationLoader to be configured when using `@module`. ' + 'Could not load fragment `%s` in operation `%s`.', moduleImport.fragmentName, (_this$_operationName = this._operationName) !== null && _this$_operationName !== void 0 ? _this$_operationName : '(unknown)') : 0 : void 0;
    var operationKey = getModuleOperationKey(moduleImport.documentName);
    var operationReference = RelayModernRecord.getValue(record, operationKey);
    if (operationReference == null) {
      return;
    }
    var normalizationRootNode = operationLoader.get(operationReference);
    if (normalizationRootNode != null) {
      var operation = getOperation(normalizationRootNode);
      var prevVariables = this._variables;
      this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);
      this._traverseSelections(operation.selections, record);
      this._variables = prevVariables;
    }
  };
  _proto._traverseLink = function _traverseLink(field, record) {
    var storageKey = getStorageKey(field, this._variables);
    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
    if (linkedID == null) {
      return;
    }
    this._traverse(field, linkedID);
  };
  _proto._traversePluralLink = function _traversePluralLink(field, record) {
    var _this2 = this;
    var storageKey = getStorageKey(field, this._variables);
    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
    if (linkedIDs == null) {
      return;
    }
    linkedIDs.forEach(function (linkedID) {
      if (linkedID != null) {
        _this2._traverse(field, linkedID);
      }
    });
  };
  return RelayReferenceMarker;
}();
module.exports = {
  mark: mark
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayResponseNormalizer.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var _toConsumableArray2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/toConsumableArray.js"));
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/multi-actor-environment/ActorUtils.js"),
  ACTOR_IDENTIFIER_FIELD_NAME = _require.ACTOR_IDENTIFIER_FIELD_NAME,
  getActorIdentifierFromPayload = _require.getActorIdentifierFromPayload;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js"),
  ACTOR_CHANGE = _require2.ACTOR_CHANGE,
  CLIENT_COMPONENT = _require2.CLIENT_COMPONENT,
  CLIENT_EDGE_TO_CLIENT_OBJECT = _require2.CLIENT_EDGE_TO_CLIENT_OBJECT,
  CLIENT_EXTENSION = _require2.CLIENT_EXTENSION,
  CONDITION = _require2.CONDITION,
  DEFER = _require2.DEFER,
  FRAGMENT_SPREAD = _require2.FRAGMENT_SPREAD,
  INLINE_FRAGMENT = _require2.INLINE_FRAGMENT,
  LINKED_FIELD = _require2.LINKED_FIELD,
  LINKED_HANDLE = _require2.LINKED_HANDLE,
  MODULE_IMPORT = _require2.MODULE_IMPORT,
  RELAY_LIVE_RESOLVER = _require2.RELAY_LIVE_RESOLVER,
  RELAY_RESOLVER = _require2.RELAY_RESOLVER,
  SCALAR_FIELD = _require2.SCALAR_FIELD,
  SCALAR_HANDLE = _require2.SCALAR_HANDLE,
  STREAM = _require2.STREAM,
  TYPE_DISCRIMINATOR = _require2.TYPE_DISCRIMINATOR;
var _require3 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ClientID.js"),
  generateClientID = _require3.generateClientID,
  isClientID = _require3.isClientID;
var _require4 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayConcreteVariables.js"),
  getLocalVariables = _require4.getLocalVariables;
var _require5 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayErrorTrie.js"),
  buildErrorTrie = _require5.buildErrorTrie,
  getErrorsByKey = _require5.getErrorsByKey,
  getNestedErrorTrieByKey = _require5.getNestedErrorTrieByKey;
var RelayModernRecord = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js");
var _require6 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernSelector.js"),
  createNormalizationSelector = _require6.createNormalizationSelector;
var _require7 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  ROOT_ID = _require7.ROOT_ID,
  TYPENAME_KEY = _require7.TYPENAME_KEY,
  getArgumentValues = _require7.getArgumentValues,
  getHandleStorageKey = _require7.getHandleStorageKey,
  getModuleComponentKey = _require7.getModuleComponentKey,
  getModuleOperationKey = _require7.getModuleOperationKey,
  getStorageKey = _require7.getStorageKey;
var _require8 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/TypeID.js"),
  TYPE_SCHEMA_TYPE = _require8.TYPE_SCHEMA_TYPE,
  generateTypeID = _require8.generateTypeID;
var areEqual = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/areEqual.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
function normalize(recordSource, selector, response, options, errors) {
  var dataID = selector.dataID,
    node = selector.node,
    variables = selector.variables;
  var normalizer = new RelayResponseNormalizer(recordSource, variables, options);
  return normalizer.normalizeResponse(node, dataID, response, errors);
}
var RelayResponseNormalizer = /*#__PURE__*/function () {
  function RelayResponseNormalizer(recordSource, variables, options) {
    this._actorIdentifier = options.actorIdentifier;
    this._getDataId = options.getDataID;
    this._handleFieldPayloads = [];
    this._treatMissingFieldsAsNull = options.treatMissingFieldsAsNull;
    this._incrementalPlaceholders = [];
    this._isClientExtension = false;
    this._isUnmatchedAbstractType = false;
    this._followupPayloads = [];
    this._path = options.path ? (0, _toConsumableArray2["default"])(options.path) : [];
    this._recordSource = recordSource;
    this._variables = variables;
    this._shouldProcessClientComponents = options.shouldProcessClientComponents;
  }
  var _proto = RelayResponseNormalizer.prototype;
  _proto.normalizeResponse = function normalizeResponse(node, dataID, data, errors) {
    var record = this._recordSource.get(dataID);
    !record ?  true ? invariant(false, 'RelayResponseNormalizer(): Expected root record `%s` to exist.', dataID) : 0 : void 0;
    this._assignClientAbstractTypes(node);
    this._errorTrie = buildErrorTrie(errors);
    this._traverseSelections(node, record, data);
    return {
      errors: errors,
      fieldPayloads: this._handleFieldPayloads,
      incrementalPlaceholders: this._incrementalPlaceholders,
      followupPayloads: this._followupPayloads,
      source: this._recordSource,
      isFinal: false
    };
  };
  _proto._assignClientAbstractTypes = function _assignClientAbstractTypes(node) {
    var clientAbstractTypes = node.clientAbstractTypes;
    if (clientAbstractTypes != null) {
      for (var _i = 0, _Object$keys = Object.keys(clientAbstractTypes); _i < _Object$keys.length; _i++) {
        var abstractType = _Object$keys[_i];
        var _iterator = (0, _createForOfIteratorHelper2["default"])(clientAbstractTypes[abstractType]),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var concreteType = _step.value;
            var typeID = generateTypeID(concreteType);
            var typeRecord = this._recordSource.get(typeID);
            if (typeRecord == null) {
              typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);
              this._recordSource.set(typeID, typeRecord);
            }
            RelayModernRecord.setValue(typeRecord, abstractType, true);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }
  };
  _proto._getVariableValue = function _getVariableValue(name) {
    !this._variables.hasOwnProperty(name) ?  true ? invariant(false, 'RelayResponseNormalizer(): Undefined variable `%s`.', name) : 0 : void 0;
    return this._variables[name];
  };
  _proto._getRecordType = function _getRecordType(data) {
    var typeName = data[TYPENAME_KEY];
    !(typeName != null) ?  true ? invariant(false, 'RelayResponseNormalizer(): Expected a typename for record `%s`.', JSON.stringify(data, null, 2)) : 0 : void 0;
    return typeName;
  };
  _proto._traverseSelections = function _traverseSelections(node, record, data) {
    for (var i = 0; i < node.selections.length; i++) {
      var selection = node.selections[i];
      switch (selection.kind) {
        case SCALAR_FIELD:
        case LINKED_FIELD:
          this._normalizeField(selection, record, data);
          break;
        case CONDITION:
          var conditionValue = Boolean(this._getVariableValue(selection.condition));
          if (conditionValue === selection.passingValue) {
            this._traverseSelections(selection, record, data);
          }
          break;
        case FRAGMENT_SPREAD:
          {
            var prevVariables = this._variables;
            this._variables = getLocalVariables(this._variables, selection.fragment.argumentDefinitions, selection.args);
            this._traverseSelections(selection.fragment, record, data);
            this._variables = prevVariables;
            break;
          }
        case INLINE_FRAGMENT:
          {
            var abstractKey = selection.abstractKey;
            if (abstractKey == null) {
              var typeName = RelayModernRecord.getType(record);
              if (typeName === selection.type) {
                this._traverseSelections(selection, record, data);
              }
            } else {
              var implementsInterface = data.hasOwnProperty(abstractKey);
              var _typeName = RelayModernRecord.getType(record);
              var typeID = generateTypeID(_typeName);
              var typeRecord = this._recordSource.get(typeID);
              if (typeRecord == null) {
                typeRecord = RelayModernRecord.create(typeID, TYPE_SCHEMA_TYPE);
                this._recordSource.set(typeID, typeRecord);
              }
              RelayModernRecord.setValue(typeRecord, abstractKey, implementsInterface);
              if (implementsInterface) {
                this._traverseSelections(selection, record, data);
              }
            }
            break;
          }
        case TYPE_DISCRIMINATOR:
          {
            var _abstractKey = selection.abstractKey;
            var _implementsInterface = data.hasOwnProperty(_abstractKey);
            var _typeName2 = RelayModernRecord.getType(record);
            var _typeID = generateTypeID(_typeName2);
            var _typeRecord = this._recordSource.get(_typeID);
            if (_typeRecord == null) {
              _typeRecord = RelayModernRecord.create(_typeID, TYPE_SCHEMA_TYPE);
              this._recordSource.set(_typeID, _typeRecord);
            }
            RelayModernRecord.setValue(_typeRecord, _abstractKey, _implementsInterface);
            break;
          }
        case LINKED_HANDLE:
        case SCALAR_HANDLE:
          var args = selection.args ? getArgumentValues(selection.args, this._variables) : {};
          var fieldKey = getStorageKey(selection, this._variables);
          var handleKey = getHandleStorageKey(selection, this._variables);
          this._handleFieldPayloads.push({
            args: args,
            dataID: RelayModernRecord.getDataID(record),
            fieldKey: fieldKey,
            handle: selection.handle,
            handleKey: handleKey,
            handleArgs: selection.handleArgs ? getArgumentValues(selection.handleArgs, this._variables) : {}
          });
          break;
        case MODULE_IMPORT:
          this._normalizeModuleImport(selection, record, data);
          break;
        case DEFER:
          this._normalizeDefer(selection, record, data);
          break;
        case STREAM:
          this._normalizeStream(selection, record, data);
          break;
        case CLIENT_EXTENSION:
          var isClientExtension = this._isClientExtension;
          this._isClientExtension = true;
          this._traverseSelections(selection, record, data);
          this._isClientExtension = isClientExtension;
          break;
        case CLIENT_COMPONENT:
          if (this._shouldProcessClientComponents === false) {
            break;
          }
          this._traverseSelections(selection.fragment, record, data);
          break;
        case ACTOR_CHANGE:
          this._normalizeActorChange(selection, record, data);
          break;
        case RELAY_RESOLVER:
          this._normalizeResolver(selection, record, data);
          break;
        case RELAY_LIVE_RESOLVER:
          this._normalizeResolver(selection, record, data);
          break;
        case CLIENT_EDGE_TO_CLIENT_OBJECT:
          this._normalizeResolver(selection.backingField, record, data);
          break;
        default:
          selection;
           true ?  true ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s`.', selection.kind) : 0 : 0;
      }
    }
  };
  _proto._normalizeResolver = function _normalizeResolver(resolver, record, data) {
    if (resolver.fragment != null) {
      this._traverseSelections(resolver.fragment, record, data);
    }
  };
  _proto._normalizeDefer = function _normalizeDefer(defer, record, data) {
    var isDeferred = defer["if"] === null || this._getVariableValue(defer["if"]);
    if (true) {
       true ? warning(typeof isDeferred === 'boolean', 'RelayResponseNormalizer: Expected value for @defer `if` argument to ' + 'be a boolean, got `%s`.', isDeferred) : 0;
    }
    if (isDeferred === false) {
      this._traverseSelections(defer, record, data);
    } else {
      this._incrementalPlaceholders.push({
        kind: 'defer',
        data: data,
        label: defer.label,
        path: (0, _toConsumableArray2["default"])(this._path),
        selector: createNormalizationSelector(defer, RelayModernRecord.getDataID(record), this._variables),
        typeName: RelayModernRecord.getType(record),
        actorIdentifier: this._actorIdentifier
      });
    }
  };
  _proto._normalizeStream = function _normalizeStream(stream, record, data) {
    this._traverseSelections(stream, record, data);
    var isStreamed = stream["if"] === null || this._getVariableValue(stream["if"]);
    if (true) {
       true ? warning(typeof isStreamed === 'boolean', 'RelayResponseNormalizer: Expected value for @stream `if` argument ' + 'to be a boolean, got `%s`.', isStreamed) : 0;
    }
    if (isStreamed === true) {
      this._incrementalPlaceholders.push({
        kind: 'stream',
        label: stream.label,
        path: (0, _toConsumableArray2["default"])(this._path),
        parentID: RelayModernRecord.getDataID(record),
        node: stream,
        variables: this._variables,
        actorIdentifier: this._actorIdentifier
      });
    }
  };
  _proto._normalizeModuleImport = function _normalizeModuleImport(moduleImport, record, data) {
    !(typeof data === 'object' && data) ?  true ? invariant(false, 'RelayResponseNormalizer: Expected data for @module to be an object.') : 0 : void 0;
    var typeName = RelayModernRecord.getType(record);
    var componentKey = getModuleComponentKey(moduleImport.documentName);
    var componentReference = moduleImport.componentModuleProvider || data[componentKey];
    RelayModernRecord.setValue(record, componentKey, componentReference !== null && componentReference !== void 0 ? componentReference : null);
    var operationKey = getModuleOperationKey(moduleImport.documentName);
    var operationReference = moduleImport.operationModuleProvider || data[operationKey];
    RelayModernRecord.setValue(record, operationKey, operationReference !== null && operationReference !== void 0 ? operationReference : null);
    if (operationReference != null) {
      this._followupPayloads.push({
        kind: 'ModuleImportPayload',
        args: moduleImport.args,
        data: data,
        dataID: RelayModernRecord.getDataID(record),
        operationReference: operationReference,
        path: (0, _toConsumableArray2["default"])(this._path),
        typeName: typeName,
        variables: this._variables,
        actorIdentifier: this._actorIdentifier
      });
    }
  };
  _proto._normalizeField = function _normalizeField(selection, record, data) {
    !(typeof data === 'object' && data) ?  true ? invariant(false, 'writeField(): Expected data for field `%s` to be an object.', selection.name) : 0 : void 0;
    var responseKey = selection.alias || selection.name;
    var storageKey = getStorageKey(selection, this._variables);
    var fieldValue = data[responseKey];
    if (fieldValue == null) {
      if (fieldValue === undefined) {
        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;
        if (isOptionalField) {
          return;
        } else if (!this._treatMissingFieldsAsNull) {
          if (true) {
             true ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : 0;
          }
          return;
        }
      }
      if (true) {
        if (selection.kind === SCALAR_FIELD) {
          this._validateConflictingFieldsWithIdenticalId(record, storageKey, null);
        }
      }
      RelayModernRecord.setValue(record, storageKey, null);
      var errorTrie = this._errorTrie;
      if (errorTrie != null) {
        var errors = getErrorsByKey(errorTrie, responseKey);
        if (errors != null) {
          RelayModernRecord.setErrors(record, storageKey, errors);
        }
      }
      return;
    }
    if (selection.kind === SCALAR_FIELD) {
      if (true) {
        this._validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue);
      }
      RelayModernRecord.setValue(record, storageKey, fieldValue);
    } else if (selection.kind === LINKED_FIELD) {
      this._path.push(responseKey);
      var oldErrorTrie = this._errorTrie;
      this._errorTrie = oldErrorTrie == null ? null : getNestedErrorTrieByKey(oldErrorTrie, responseKey);
      if (selection.plural) {
        this._normalizePluralLink(selection, record, storageKey, fieldValue);
      } else {
        this._normalizeLink(selection, record, storageKey, fieldValue);
      }
      this._errorTrie = oldErrorTrie;
      this._path.pop();
    } else {
      selection;
       true ?  true ? invariant(false, 'RelayResponseNormalizer(): Unexpected ast kind `%s` during normalization.', selection.kind) : 0 : 0;
    }
  };
  _proto._normalizeActorChange = function _normalizeActorChange(selection, record, data) {
    var _field$concreteType;
    var field = selection.linkedField;
    !(typeof data === 'object' && data) ?  true ? invariant(false, '_normalizeActorChange(): Expected data for field `%s` to be an object.', field.name) : 0 : void 0;
    var responseKey = field.alias || field.name;
    var storageKey = getStorageKey(field, this._variables);
    var fieldValue = data[responseKey];
    if (fieldValue == null) {
      if (fieldValue === undefined) {
        var isOptionalField = this._isClientExtension || this._isUnmatchedAbstractType;
        if (isOptionalField) {
          return;
        } else if (!this._treatMissingFieldsAsNull) {
          if (true) {
             true ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s: %s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload.', responseKey, storageKey) : 0;
          }
          return;
        }
      }
      RelayModernRecord.setValue(record, storageKey, null);
      return;
    }
    var actorIdentifier = getActorIdentifierFromPayload(fieldValue);
    if (actorIdentifier == null) {
      if (true) {
         true ? warning(false, 'RelayResponseNormalizer: Payload did not contain a value ' + 'for field `%s`. Check that you are parsing with the same ' + 'query that was used to fetch the payload. Payload is `%s`.', ACTOR_IDENTIFIER_FIELD_NAME, JSON.stringify(fieldValue, null, 2)) : 0;
      }
      RelayModernRecord.setValue(record, storageKey, null);
      return;
    }
    var typeName = (_field$concreteType = field.concreteType) !== null && _field$concreteType !== void 0 ? _field$concreteType : this._getRecordType(fieldValue);
    var nextID = this._getDataId(fieldValue, typeName) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);
    !(typeof nextID === 'string') ?  true ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : 0 : void 0;
    RelayModernRecord.setActorLinkedRecordID(record, storageKey, actorIdentifier, nextID);
    this._followupPayloads.push({
      kind: 'ActorPayload',
      data: fieldValue,
      dataID: nextID,
      path: [].concat((0, _toConsumableArray2["default"])(this._path), [responseKey]),
      typeName: typeName,
      variables: this._variables,
      node: field,
      actorIdentifier: actorIdentifier
    });
  };
  _proto._normalizeLink = function _normalizeLink(field, record, storageKey, fieldValue) {
    var _field$concreteType2;
    !(typeof fieldValue === 'object' && fieldValue) ?  true ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an object.', storageKey) : 0 : void 0;
    var nextID = this._getDataId(fieldValue, (_field$concreteType2 = field.concreteType) !== null && _field$concreteType2 !== void 0 ? _field$concreteType2 : this._getRecordType(fieldValue)) || RelayModernRecord.getLinkedRecordID(record, storageKey) || generateClientID(RelayModernRecord.getDataID(record), storageKey);
    !(typeof nextID === 'string') ?  true ? invariant(false, 'RelayResponseNormalizer: Expected id on field `%s` to be a string.', storageKey) : 0 : void 0;
    if (true) {
      this._validateConflictingLinkedFieldsWithIdenticalId(RelayModernRecord.getLinkedRecordID(record, storageKey), nextID, storageKey);
    }
    RelayModernRecord.setLinkedRecordID(record, storageKey, nextID);
    var nextRecord = this._recordSource.get(nextID);
    if (!nextRecord) {
      var typeName = field.concreteType || this._getRecordType(fieldValue);
      nextRecord = RelayModernRecord.create(nextID, typeName);
      this._recordSource.set(nextID, nextRecord);
    } else if (true) {
      this._validateRecordType(nextRecord, field, fieldValue);
    }
    this._traverseSelections(field, nextRecord, fieldValue);
  };
  _proto._normalizePluralLink = function _normalizePluralLink(field, record, storageKey, fieldValue) {
    var _this = this;
    !Array.isArray(fieldValue) ?  true ? invariant(false, 'RelayResponseNormalizer: Expected data for field `%s` to be an array ' + 'of objects.', storageKey) : 0 : void 0;
    var prevIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);
    var nextIDs = [];
    fieldValue.forEach(function (item, nextIndex) {
      var _field$concreteType3;
      if (item == null) {
        nextIDs.push(item);
        return;
      }
      _this._path.push(String(nextIndex));
      var oldErrorTrie = _this._errorTrie;
      _this._errorTrie = oldErrorTrie == null ? null : getNestedErrorTrieByKey(oldErrorTrie, nextIndex);
      !(typeof item === 'object') ?  true ? invariant(false, 'RelayResponseNormalizer: Expected elements for field `%s` to be ' + 'objects.', storageKey) : 0 : void 0;
      var nextID = _this._getDataId(item, (_field$concreteType3 = field.concreteType) !== null && _field$concreteType3 !== void 0 ? _field$concreteType3 : _this._getRecordType(item)) || prevIDs && prevIDs[nextIndex] || generateClientID(RelayModernRecord.getDataID(record), storageKey, nextIndex);
      !(typeof nextID === 'string') ?  true ? invariant(false, 'RelayResponseNormalizer: Expected id of elements of field `%s` to ' + 'be strings.', storageKey) : 0 : void 0;
      nextIDs.push(nextID);
      var nextRecord = _this._recordSource.get(nextID);
      if (!nextRecord) {
        var typeName = field.concreteType || _this._getRecordType(item);
        nextRecord = RelayModernRecord.create(nextID, typeName);
        _this._recordSource.set(nextID, nextRecord);
      } else if (true) {
        _this._validateRecordType(nextRecord, field, item);
      }
      if (true) {
        if (prevIDs) {
          _this._validateConflictingLinkedFieldsWithIdenticalId(prevIDs[nextIndex], nextID, storageKey);
        }
      }
      _this._traverseSelections(field, nextRecord, item);
      _this._errorTrie = oldErrorTrie;
      _this._path.pop();
    });
    RelayModernRecord.setLinkedRecordIDs(record, storageKey, nextIDs);
  };
  _proto._validateRecordType = function _validateRecordType(record, field, payload) {
    var _field$concreteType4;
    var typeName = (_field$concreteType4 = field.concreteType) !== null && _field$concreteType4 !== void 0 ? _field$concreteType4 : this._getRecordType(payload);
    var dataID = RelayModernRecord.getDataID(record);
     true ? warning(isClientID(dataID) && dataID !== ROOT_ID || RelayModernRecord.getType(record) === typeName, 'RelayResponseNormalizer: Invalid record `%s`. Expected %s to be ' + 'consistent, but the record was assigned conflicting types `%s` ' + 'and `%s`. The GraphQL server likely violated the globally unique ' + 'id requirement by returning the same id for different objects.', dataID, TYPENAME_KEY, RelayModernRecord.getType(record), typeName) : 0;
  };
  _proto._validateConflictingFieldsWithIdenticalId = function _validateConflictingFieldsWithIdenticalId(record, storageKey, fieldValue) {
    if (true) {
      var dataID = RelayModernRecord.getDataID(record);
      var previousValue = RelayModernRecord.getValue(record, storageKey);
       true ? warning(storageKey === TYPENAME_KEY || previousValue === undefined || areEqual(previousValue, fieldValue), 'RelayResponseNormalizer: Invalid record. The record contains two ' + 'instances of the same id: `%s` with conflicting field, %s and its values: %s and %s. ' + 'If two fields are different but share ' + 'the same id, one field will overwrite the other.', dataID, storageKey, previousValue, fieldValue) : 0;
    }
  };
  _proto._validateConflictingLinkedFieldsWithIdenticalId = function _validateConflictingLinkedFieldsWithIdenticalId(prevID, nextID, storageKey) {
    if (true) {
       true ? warning(prevID === undefined || prevID === nextID, 'RelayResponseNormalizer: Invalid record. The record contains ' + 'references to the conflicting field, %s and its id values: %s and %s. ' + 'We need to make sure that the record the field points ' + 'to remains consistent or one field will overwrite the other.', storageKey, prevID, nextID) : 0;
    }
  };
  return RelayResponseNormalizer;
}();
module.exports = {
  normalize: normalize
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreSubscriptions.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var deepFreeze = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/deepFreeze.js");
var recycleNodesInto = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/recycleNodesInto.js");
var RelayFeatureFlags = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js");
var hasOverlappingIDs = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/hasOverlappingIDs.js");
var hasSignificantOverlappingIDs = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/hasSignificantOverlappingIDs.js");
var RelayReader = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayReader.js");
var RelayStoreSubscriptions = /*#__PURE__*/function () {
  function RelayStoreSubscriptions(log, resolverCache) {
    this._subscriptions = new Set();
    this.__log = log;
    this._resolverCache = resolverCache;
  }
  var _proto = RelayStoreSubscriptions.prototype;
  _proto.subscribe = function subscribe(snapshot, callback) {
    var _this = this;
    var subscription = {
      backup: null,
      callback: callback,
      snapshot: snapshot,
      stale: false
    };
    var dispose = function dispose() {
      _this._subscriptions["delete"](subscription);
    };
    this._subscriptions.add(subscription);
    return {
      dispose: dispose
    };
  };
  _proto.snapshotSubscriptions = function snapshotSubscriptions(source) {
    var _this2 = this;
    this._subscriptions.forEach(function (subscription) {
      if (!subscription.stale) {
        subscription.backup = subscription.snapshot;
        return;
      }
      var snapshot = subscription.snapshot;
      var backup = RelayReader.read(source, snapshot.selector, _this2._resolverCache);
      var nextData = recycleNodesInto(snapshot.data, backup.data);
      backup.data = nextData;
      subscription.backup = backup;
    });
  };
  _proto.restoreSubscriptions = function restoreSubscriptions() {
    this._subscriptions.forEach(function (subscription) {
      var backup = subscription.backup;
      subscription.backup = null;
      if (backup) {
        if (backup.data !== subscription.snapshot.data) {
          subscription.stale = true;
        }
        subscription.snapshot = {
          data: subscription.snapshot.data,
          isMissingData: backup.isMissingData,
          missingClientEdges: backup.missingClientEdges,
          missingLiveResolverFields: backup.missingLiveResolverFields,
          seenRecords: backup.seenRecords,
          selector: backup.selector,
          missingRequiredFields: backup.missingRequiredFields,
          relayResolverErrors: backup.relayResolverErrors,
          errorResponseFields: backup.errorResponseFields
        };
      } else {
        subscription.stale = true;
      }
    });
  };
  _proto.updateSubscriptions = function updateSubscriptions(source, updatedRecordIDs, updatedOwners, sourceOperation) {
    var _this3 = this;
    var hasUpdatedRecords = updatedRecordIDs.size !== 0;
    this._subscriptions.forEach(function (subscription) {
      var owner = _this3._updateSubscription(source, subscription, updatedRecordIDs, hasUpdatedRecords, sourceOperation);
      if (owner != null) {
        updatedOwners.push(owner);
      }
    });
  };
  _proto._updateSubscription = function _updateSubscription(source, subscription, updatedRecordIDs, hasUpdatedRecords, sourceOperation) {
    var backup = subscription.backup,
      callback = subscription.callback,
      snapshot = subscription.snapshot,
      stale = subscription.stale;
    var hasOverlappingUpdates = hasUpdatedRecords && hasOverlappingIDs(snapshot.seenRecords, updatedRecordIDs);
    if (!stale && !hasOverlappingUpdates) {
      return;
    }
    var nextSnapshot = hasOverlappingUpdates || !backup ? RelayReader.read(source, snapshot.selector, this._resolverCache) : backup;
    var nextData = recycleNodesInto(snapshot.data, nextSnapshot.data);
    nextSnapshot = {
      data: nextData,
      isMissingData: nextSnapshot.isMissingData,
      missingClientEdges: nextSnapshot.missingClientEdges,
      missingLiveResolverFields: nextSnapshot.missingLiveResolverFields,
      seenRecords: nextSnapshot.seenRecords,
      selector: nextSnapshot.selector,
      missingRequiredFields: nextSnapshot.missingRequiredFields,
      relayResolverErrors: nextSnapshot.relayResolverErrors,
      errorResponseFields: nextSnapshot.errorResponseFields
    };
    if (true) {
      deepFreeze(nextSnapshot);
    }
    subscription.snapshot = nextSnapshot;
    subscription.stale = false;
    if (nextSnapshot.data !== snapshot.data) {
      if (this.__log && RelayFeatureFlags.ENABLE_NOTIFY_SUBSCRIPTION) {
        this.__log({
          name: 'store.notify.subscription',
          sourceOperation: sourceOperation,
          snapshot: snapshot,
          nextSnapshot: nextSnapshot
        });
      }
      callback(nextSnapshot);
      return snapshot.selector.owner;
    }
    if (RelayFeatureFlags.ENABLE_LOOSE_SUBSCRIPTION_ATTRIBUTION && (stale || hasSignificantOverlappingIDs(snapshot.seenRecords, updatedRecordIDs))) {
      return snapshot.selector.owner;
    }
  };
  return RelayStoreSubscriptions;
}();
module.exports = RelayStoreSubscriptions;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _toConsumableArray2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/toConsumableArray.js"));
var getRelayHandleKey = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getRelayHandleKey.js");
var RelayConcreteNode = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js");
var stableCopy = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/stableCopy.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var VARIABLE = RelayConcreteNode.VARIABLE,
  LITERAL = RelayConcreteNode.LITERAL,
  OBJECT_VALUE = RelayConcreteNode.OBJECT_VALUE,
  LIST_VALUE = RelayConcreteNode.LIST_VALUE;
var ERRORS_KEY = '__errors';
var MODULE_COMPONENT_KEY_PREFIX = '__module_component_';
var MODULE_OPERATION_KEY_PREFIX = '__module_operation_';
function getArgumentValue(arg, variables) {
  if (arg.kind === VARIABLE) {
    return getStableVariableValue(arg.variableName, variables);
  } else if (arg.kind === LITERAL) {
    return arg.value;
  } else if (arg.kind === OBJECT_VALUE) {
    var value = {};
    arg.fields.forEach(function (field) {
      value[field.name] = getArgumentValue(field, variables);
    });
    return value;
  } else if (arg.kind === LIST_VALUE) {
    var _value = [];
    arg.items.forEach(function (item) {
      item != null ? _value.push(getArgumentValue(item, variables)) : null;
    });
    return _value;
  }
}
function getArgumentValues(args, variables, isWithinUnmatchedTypeRefinement) {
  var values = {};
  if (isWithinUnmatchedTypeRefinement) {
    values[RelayStoreUtils.FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT] = true;
  }
  if (args) {
    args.forEach(function (arg) {
      values[arg.name] = getArgumentValue(arg, variables);
    });
  }
  return values;
}
function getHandleStorageKey(handleField, variables) {
  var dynamicKey = handleField.dynamicKey,
    handle = handleField.handle,
    key = handleField.key,
    name = handleField.name,
    args = handleField.args,
    filters = handleField.filters;
  var handleName = getRelayHandleKey(handle, key, name);
  var filterArgs = null;
  if (args && filters && args.length !== 0 && filters.length !== 0) {
    filterArgs = args.filter(function (arg) {
      return filters.indexOf(arg.name) > -1;
    });
  }
  if (dynamicKey) {
    filterArgs = filterArgs != null ? [dynamicKey].concat((0, _toConsumableArray2["default"])(filterArgs)) : [dynamicKey];
  }
  if (filterArgs === null) {
    return handleName;
  } else {
    return formatStorageKey(handleName, getArgumentValues(filterArgs, variables));
  }
}
function getStorageKey(field, variables) {
  if (field.storageKey) {
    return field.storageKey;
  }
  var args = getArguments(field);
  var name = field.name;
  return args && args.length !== 0 ? formatStorageKey(name, getArgumentValues(args, variables)) : name;
}
function getArguments(field) {
  if (field.kind === 'RelayResolver' || field.kind === 'RelayLiveResolver') {
    var _field$fragment2;
    if (field.args == null) {
      var _field$fragment;
      return (_field$fragment = field.fragment) === null || _field$fragment === void 0 ? void 0 : _field$fragment.args;
    }
    if (((_field$fragment2 = field.fragment) === null || _field$fragment2 === void 0 ? void 0 : _field$fragment2.args) == null) {
      return field.args;
    }
    return field.args.concat(field.fragment.args);
  }
  var args = typeof field.args === 'undefined' ? undefined : field.args;
  return args;
}
function getStableStorageKey(name, args) {
  return formatStorageKey(name, stableCopy(args));
}
function formatStorageKey(name, argValues) {
  if (!argValues) {
    return name;
  }
  var values = [];
  for (var argName in argValues) {
    if (argValues.hasOwnProperty(argName)) {
      var value = argValues[argName];
      if (value != null) {
        var _JSON$stringify;
        values.push(argName + ':' + ((_JSON$stringify = JSON.stringify(value)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : 'undefined'));
      }
    }
  }
  return values.length === 0 ? name : name + "(".concat(values.join(','), ")");
}
function getStableVariableValue(name, variables) {
  !variables.hasOwnProperty(name) ?  true ? invariant(false, 'getVariableValue(): Undefined variable `%s`.', name) : 0 : void 0;
  return stableCopy(variables[name]);
}
function getModuleComponentKey(documentName) {
  return "".concat(MODULE_COMPONENT_KEY_PREFIX).concat(documentName);
}
function getModuleOperationKey(documentName) {
  return "".concat(MODULE_OPERATION_KEY_PREFIX).concat(documentName);
}
var RelayStoreUtils = {
  ACTOR_IDENTIFIER_KEY: '__actorIdentifier',
  CLIENT_EDGE_TRAVERSAL_PATH: '__clientEdgeTraversalPath',
  FRAGMENTS_KEY: '__fragments',
  FRAGMENT_OWNER_KEY: '__fragmentOwner',
  FRAGMENT_POINTER_IS_WITHIN_UNMATCHED_TYPE_REFINEMENT: '$isWithinUnmatchedTypeRefinement',
  FRAGMENT_PROP_NAME_KEY: '__fragmentPropName',
  MODULE_COMPONENT_KEY: '__module_component',
  ERRORS_KEY: ERRORS_KEY,
  ID_KEY: '__id',
  REF_KEY: '__ref',
  REFS_KEY: '__refs',
  ROOT_ID: 'client:root',
  ROOT_TYPE: '__Root',
  TYPENAME_KEY: '__typename',
  INVALIDATED_AT_KEY: '__invalidated_at',
  RELAY_RESOLVER_VALUE_KEY: '__resolverValue',
  RELAY_RESOLVER_INVALIDATION_KEY: '__resolverValueMayBeInvalid',
  RELAY_RESOLVER_SNAPSHOT_KEY: '__resolverSnapshot',
  RELAY_RESOLVER_ERROR_KEY: '__resolverError',
  RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS: '__resolverOutputTypeRecordIDs',
  formatStorageKey: formatStorageKey,
  getArgumentValue: getArgumentValue,
  getArgumentValues: getArgumentValues,
  getHandleStorageKey: getHandleStorageKey,
  getStorageKey: getStorageKey,
  getStableStorageKey: getStableStorageKey,
  getModuleComponentKey: getModuleComponentKey,
  getModuleOperationKey: getModuleOperationKey
};
module.exports = RelayStoreUtils;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ResolverCache.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var recycleNodesInto = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/recycleNodesInto.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js"),
  RELAY_LIVE_RESOLVER = _require.RELAY_LIVE_RESOLVER;
var RelayFeatureFlags = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js");
var shallowFreeze = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/shallowFreeze.js");
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ClientID.js"),
  generateClientID = _require2.generateClientID;
var RelayModernRecord = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js");
var _require3 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  RELAY_RESOLVER_ERROR_KEY = _require3.RELAY_RESOLVER_ERROR_KEY,
  RELAY_RESOLVER_INVALIDATION_KEY = _require3.RELAY_RESOLVER_INVALIDATION_KEY,
  RELAY_RESOLVER_SNAPSHOT_KEY = _require3.RELAY_RESOLVER_SNAPSHOT_KEY,
  RELAY_RESOLVER_VALUE_KEY = _require3.RELAY_RESOLVER_VALUE_KEY,
  getStorageKey = _require3.getStorageKey;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
var emptySet = new Set();
var NoopResolverCache = /*#__PURE__*/function () {
  function NoopResolverCache() {}
  var _proto = NoopResolverCache.prototype;
  _proto.readFromCacheOrEvaluate = function readFromCacheOrEvaluate(recordID, field, variables, evaluate, getDataForResolverFragment) {
    !(field.kind !== RELAY_LIVE_RESOLVER) ?  true ? invariant(false, 'This store does not support Live Resolvers') : 0 : void 0;
    var _evaluate = evaluate(),
      resolverResult = _evaluate.resolverResult,
      snapshot = _evaluate.snapshot,
      error = _evaluate.error;
    return [resolverResult, undefined, error, snapshot, undefined, undefined];
  };
  _proto.invalidateDataIDs = function invalidateDataIDs(updatedDataIDs) {};
  _proto.ensureClientRecord = function ensureClientRecord(id, typeName) {
     true ?  true ? invariant(false, 'Client Edges to Client Objects are not supported in this version of Relay Store') : 0 : 0;
  };
  _proto.notifyUpdatedSubscribers = function notifyUpdatedSubscribers(updatedDataIDs) {};
  return NoopResolverCache;
}();
function addDependencyEdge(edges, from, to) {
  var set = edges.get(from);
  if (!set) {
    set = new Set();
    edges.set(from, set);
  }
  set.add(to);
}
var RecordResolverCache = /*#__PURE__*/function () {
  function RecordResolverCache(getRecordSource) {
    this._resolverIDToRecordIDs = new Map();
    this._recordIDToResolverIDs = new Map();
    this._getRecordSource = getRecordSource;
  }
  var _proto2 = RecordResolverCache.prototype;
  _proto2.readFromCacheOrEvaluate = function readFromCacheOrEvaluate(recordID, field, variables, evaluate, getDataForResolverFragment) {
    var recordSource = this._getRecordSource();
    var record = recordSource.get(recordID);
    !(record != null) ?  true ? invariant(false, 'We expect record to exist in the store.') : 0 : void 0;
    var storageKey = getStorageKey(field, variables);
    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);
    var linkedRecord = linkedID == null ? null : recordSource.get(linkedID);
    if (linkedRecord == null || this._isInvalid(linkedRecord, getDataForResolverFragment)) {
      var _linkedID;
      linkedID = (_linkedID = linkedID) !== null && _linkedID !== void 0 ? _linkedID : generateClientID(recordID, storageKey);
      linkedRecord = RelayModernRecord.create(linkedID, '__RELAY_RESOLVER__');
      var evaluationResult = evaluate();
      if (RelayFeatureFlags.ENABLE_SHALLOW_FREEZE_RESOLVER_VALUES) {
        shallowFreeze(evaluationResult.resolverResult);
      }
      RelayModernRecord.setValue(linkedRecord, RELAY_RESOLVER_VALUE_KEY, evaluationResult.resolverResult);
      RelayModernRecord.setValue(linkedRecord, RELAY_RESOLVER_SNAPSHOT_KEY, evaluationResult.snapshot);
      RelayModernRecord.setValue(linkedRecord, RELAY_RESOLVER_ERROR_KEY, evaluationResult.error);
      recordSource.set(linkedID, linkedRecord);
      var currentRecord = recordSource.get(recordID);
      !(currentRecord != null) ?  true ? invariant(false, 'Expected the parent record to still be in the record source.') : 0 : void 0;
      var nextRecord = RelayModernRecord.clone(currentRecord);
      RelayModernRecord.setLinkedRecordID(nextRecord, storageKey, linkedID);
      recordSource.set(recordID, nextRecord);
      if (field.fragment != null) {
        var _evaluationResult$sna;
        var fragmentStorageKey = getStorageKey(field.fragment, variables);
        var resolverID = generateClientID(recordID, fragmentStorageKey);
        addDependencyEdge(this._resolverIDToRecordIDs, resolverID, linkedID);
        addDependencyEdge(this._recordIDToResolverIDs, recordID, resolverID);
        var seenRecordIds = (_evaluationResult$sna = evaluationResult.snapshot) === null || _evaluationResult$sna === void 0 ? void 0 : _evaluationResult$sna.seenRecords;
        if (seenRecordIds != null) {
          var _iterator = (0, _createForOfIteratorHelper2["default"])(seenRecordIds),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var seenRecordID = _step.value;
              addDependencyEdge(this._recordIDToResolverIDs, seenRecordID, resolverID);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
    }
    var answer = RelayModernRecord.getValue(linkedRecord, RELAY_RESOLVER_VALUE_KEY);
    var snapshot = RelayModernRecord.getValue(linkedRecord, RELAY_RESOLVER_SNAPSHOT_KEY);
    var error = RelayModernRecord.getValue(linkedRecord, RELAY_RESOLVER_ERROR_KEY);
    return [answer, linkedID, error, snapshot, undefined, undefined];
  };
  _proto2.invalidateDataIDs = function invalidateDataIDs(updatedDataIDs) {
    var recordSource = this._getRecordSource();
    var visited = new Set();
    var recordsToVisit = Array.from(updatedDataIDs);
    while (recordsToVisit.length) {
      var recordID = recordsToVisit.pop();
      updatedDataIDs.add(recordID);
      var _iterator2 = (0, _createForOfIteratorHelper2["default"])((_this$_recordIDToReso = this._recordIDToResolverIDs.get(recordID)) !== null && _this$_recordIDToReso !== void 0 ? _this$_recordIDToReso : emptySet),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var _this$_recordIDToReso;
          var fragment = _step2.value;
          if (!visited.has(fragment)) {
            var _iterator3 = (0, _createForOfIteratorHelper2["default"])((_this$_resolverIDToRe = this._resolverIDToRecordIDs.get(fragment)) !== null && _this$_resolverIDToRe !== void 0 ? _this$_resolverIDToRe : emptySet),
              _step3;
            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var _this$_resolverIDToRe;
                var anotherRecordID = _step3.value;
                this._markInvalidatedResolverRecord(anotherRecordID, recordSource, updatedDataIDs);
                if (!visited.has(anotherRecordID)) {
                  recordsToVisit.push(anotherRecordID);
                }
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
  };
  _proto2._markInvalidatedResolverRecord = function _markInvalidatedResolverRecord(dataID, recordSource, updatedDataIDs) {
    var record = recordSource.get(dataID);
    if (!record) {
       true ? warning(false, 'Expected a resolver record with ID %s, but it was missing.', dataID) : 0;
      return;
    }
    var nextRecord = RelayModernRecord.clone(record);
    RelayModernRecord.setValue(nextRecord, RELAY_RESOLVER_INVALIDATION_KEY, true);
    recordSource.set(dataID, nextRecord);
  };
  _proto2._isInvalid = function _isInvalid(record, getDataForResolverFragment) {
    if (!RelayModernRecord.getValue(record, RELAY_RESOLVER_INVALIDATION_KEY)) {
      return false;
    }
    var snapshot = RelayModernRecord.getValue(record, RELAY_RESOLVER_SNAPSHOT_KEY);
    var originalInputs = snapshot === null || snapshot === void 0 ? void 0 : snapshot.data;
    var readerSelector = snapshot === null || snapshot === void 0 ? void 0 : snapshot.selector;
    if (originalInputs == null || readerSelector == null) {
       true ? warning(false, 'Expected previous inputs and reader selector on resolver record with ID %s, but they were missing.', RelayModernRecord.getDataID(record)) : 0;
      return true;
    }
    var _getDataForResolverFr = getDataForResolverFragment(readerSelector),
      latestValues = _getDataForResolverFr.data;
    var recycled = recycleNodesInto(originalInputs, latestValues);
    if (recycled !== originalInputs) {
      return true;
    }
    return false;
  };
  _proto2.ensureClientRecord = function ensureClientRecord(id, typename) {
     true ?  true ? invariant(false, 'Client Edges to Client Objects are not supported in this version of Relay Store') : 0 : 0;
  };
  _proto2.notifyUpdatedSubscribers = function notifyUpdatedSubscribers(updatedDataIDs) {
     true ?  true ? invariant(false, 'Processing @outputType records is not supported in this version of Relay Store') : 0 : 0;
  };
  return RecordResolverCache;
}();
module.exports = {
  NoopResolverCache: NoopResolverCache,
  RecordResolverCache: RecordResolverCache
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ResolverFragments.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/GraphQLTag.js"),
  getFragment = _require.getFragment;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernSelector.js"),
  getSelector = _require2.getSelector;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var contextStack = [];
function withResolverContext(context, cb) {
  contextStack.push(context);
  try {
    return cb();
  } finally {
    contextStack.pop();
  }
}
function readFragment(fragmentInput, fragmentKey) {
  if (!contextStack.length) {
    throw new Error('readFragment should be called only from within a Relay Resolver function.');
  }
  var context = contextStack[contextStack.length - 1];
  var fragmentNode = getFragment(fragmentInput);
  var fragmentSelector = getSelector(fragmentNode, fragmentKey);
  !(fragmentSelector != null) ?  true ? invariant(false, "Expected a selector for the fragment of the resolver ".concat(fragmentNode.name, ", but got null.")) : 0 : void 0;
  !(fragmentSelector.kind === 'SingularReaderSelector') ?  true ? invariant(false, "Expected a singular reader selector for the fragment of the resolver ".concat(fragmentNode.name, ", but it was plural.")) : 0 : void 0;
  var _context$getDataForRe = context.getDataForResolverFragment(fragmentSelector, fragmentKey),
    data = _context$getDataForRe.data,
    isMissingData = _context$getDataForRe.isMissingData;
  if (isMissingData) {
    throw RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL;
  }
  return data;
}
var RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = {};
module.exports = {
  readFragment: readFragment,
  withResolverContext: withResolverContext,
  RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL: RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/StoreInspector.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js"));
var _toConsumableArray2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/toConsumableArray.js"));
var inspect = function inspect() {};
if (true) {
  var formattersInstalled = false;
  var installDevtoolFormatters = function installDevtoolFormatters() {
    var _window$devtoolsForma;
    if (formattersInstalled) {
      return;
    }
    formattersInstalled = true;
    if (window.devtoolsFormatters == null) {
      window.devtoolsFormatters = [];
    }
    if (!Array.isArray(window.devtoolsFormatters)) {
      return;
    }
    console.info('Make sure to select "Enable custom formatters" in the Chrome ' + 'Developer Tools settings, tab "Preferences" under the "Console" ' + 'section.');
    (_window$devtoolsForma = window.devtoolsFormatters).push.apply(_window$devtoolsForma, (0, _toConsumableArray2["default"])(createFormatters()));
  };
  var createFormatters = function createFormatters() {
    var listStyle = {
      style: 'list-style-type: none; padding: 0; margin: 0 0 0 12px; font-style: normal'
    };
    var keyStyle = {
      style: 'rgb(136, 19, 145)'
    };
    var nullStyle = {
      style: 'color: #777'
    };
    var reference = function reference(object, config) {
      return object == null ? ['span', nullStyle, 'undefined'] : ['object', {
        object: object,
        config: config
      }];
    };
    var renderRecordHeader = function renderRecordHeader(record) {
      return ['span', {
        style: 'font-style: italic'
      }, record.__typename, ['span', nullStyle, ' {id: "', record.__id, '", …}']];
    };
    var isRecord = function isRecord(o) {
      return o != null && typeof o.__id === 'string';
    };
    var RecordEntry = function RecordEntry(key, value) {
      this.key = key;
      this.value = value;
    };
    var renderRecordEntries = function renderRecordEntries(record) {
      var children = Object.keys(record).map(function (key) {
        return ['li', {}, ['object', {
          object: new RecordEntry(key, record[key])
        }]];
      });
      return ['ol', listStyle].concat((0, _toConsumableArray2["default"])(children));
    };
    var recordFormatter = {
      header: function header(obj) {
        if (!isRecord(obj)) {
          return null;
        }
        return renderRecordHeader(obj);
      },
      hasBody: function hasBody(obj) {
        return true;
      },
      body: function body(obj) {
        return renderRecordEntries(obj);
      }
    };
    var recordEntryFormatter = {
      header: function header(obj) {
        if (obj instanceof RecordEntry) {
          var value = isRecord(obj.value) ? renderRecordHeader(obj.value) : reference(obj.value);
          return ['span', keyStyle, obj.key, ': ', value];
        }
        return null;
      },
      hasBody: function hasBody(obj) {
        return isRecord(obj.value);
      },
      body: function body(obj) {
        return renderRecordEntries(obj.value);
      }
    };
    return [recordFormatter, recordEntryFormatter];
  };
  var getWrappedRecord = function getWrappedRecord(source, dataID) {
    var record = source.get(dataID);
    if (record == null) {
      return record;
    }
    return new Proxy((0, _objectSpread2["default"])({}, record), {
      get: function get(target, prop) {
        var value = target[prop];
        if (value == null) {
          return value;
        }
        if (typeof value === 'object') {
          if (typeof value.__ref === 'string') {
            return getWrappedRecord(source, value.__ref);
          }
          if (Array.isArray(value.__refs)) {
            return value.__refs.map(function (ref) {
              return getWrappedRecord(source, ref);
            });
          }
        }
        return value;
      }
    });
  };
  inspect = function inspect(environment, dataID) {
    installDevtoolFormatters();
    return getWrappedRecord(environment.getStore().getSource(), dataID !== null && dataID !== void 0 ? dataID : 'client:root');
  };
}
module.exports = {
  inspect: inspect
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/TypeID.js": (function (module) {
"use strict";


var PREFIX = 'client:__type:';
var TYPE_SCHEMA_TYPE = '__TypeSchema';
function generateTypeID(typeName) {
  return PREFIX + typeName;
}
function isTypeID(id) {
  return id.indexOf(PREFIX) === 0;
}
module.exports = {
  generateTypeID: generateTypeID,
  isTypeID: isTypeID,
  TYPE_SCHEMA_TYPE: TYPE_SCHEMA_TYPE
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ViewerPattern.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ClientID.js"),
  generateClientID = _require.generateClientID;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  ROOT_ID = _require2.ROOT_ID;
var VIEWER_ID = generateClientID(ROOT_ID, 'viewer');
var VIEWER_TYPE = 'Viewer';
module.exports = {
  VIEWER_ID: VIEWER_ID,
  VIEWER_TYPE: VIEWER_TYPE
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/cloneRelayHandleSourceField.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js"),
  LINKED_FIELD = _require.LINKED_FIELD;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  getHandleStorageKey = _require2.getHandleStorageKey;
var areEqual = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/areEqual.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function cloneRelayHandleSourceField(handleField, selections, variables) {
  var sourceField = selections.find(function (source) {
    return source.kind === LINKED_FIELD && source.name === handleField.name && source.alias === handleField.alias && areEqual(source.args, handleField.args);
  });
  !(sourceField && sourceField.kind === LINKED_FIELD) ?  true ? invariant(false, 'cloneRelayHandleSourceField: Expected a corresponding source field for ' + 'handle `%s`.', handleField.handle) : 0 : void 0;
  var handleKey = getHandleStorageKey(handleField, variables);
  return {
    kind: 'LinkedField',
    alias: sourceField.alias,
    name: handleKey,
    storageKey: handleKey,
    args: null,
    concreteType: sourceField.concreteType,
    plural: sourceField.plural,
    selections: sourceField.selections
  };
}
module.exports = cloneRelayHandleSourceField;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/cloneRelayScalarHandleSourceField.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js"),
  SCALAR_FIELD = _require.SCALAR_FIELD;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  getHandleStorageKey = _require2.getHandleStorageKey;
var areEqual = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/areEqual.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function cloneRelayScalarHandleSourceField(handleField, selections, variables) {
  var sourceField = selections.find(function (source) {
    return source.kind === SCALAR_FIELD && source.name === handleField.name && source.alias === handleField.alias && areEqual(source.args, handleField.args);
  });
  !(sourceField && sourceField.kind === SCALAR_FIELD) ?  true ? invariant(false, 'cloneRelayScalarHandleSourceField: Expected a corresponding source field for ' + 'handle `%s`.', handleField.handle) : 0 : void 0;
  var handleKey = getHandleStorageKey(handleField, variables);
  return {
    kind: 'ScalarField',
    alias: sourceField.alias,
    name: handleKey,
    storageKey: handleKey,
    args: null
  };
}
module.exports = cloneRelayScalarHandleSourceField;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/createFragmentSpecResolver.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var RelayModernFragmentSpecResolver = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernFragmentSpecResolver.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
function createFragmentSpecResolver(context, containerName, fragments, props, rootIsQueryRenderer, callback) {
  if (true) {
    var fragmentNames = Object.keys(fragments);
    fragmentNames.forEach(function (fragmentName) {
      var propValue = props[fragmentName];
       true ? warning(propValue !== undefined, 'createFragmentSpecResolver: Expected prop `%s` to be supplied to `%s`, but ' + 'got `undefined`. Pass an explicit `null` if this is intentional.', fragmentName, containerName) : 0;
    });
  }
  return new RelayModernFragmentSpecResolver(context, fragments, props, callback, rootIsQueryRenderer);
}
module.exports = createFragmentSpecResolver;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/createRelayContext.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var relayContext;
var firstReact;
function createRelayContext(react) {
  if (!relayContext) {
    relayContext = react.createContext(null);
    if (true) {
      relayContext.displayName = 'RelayContext';
    }
    firstReact = react;
  }
  !(react === firstReact) ?  true ? invariant(false, '[createRelayContext]: You are passing a different instance of React', react.version) : 0 : void 0;
  return relayContext;
}
module.exports = createRelayContext;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/defaultGetDataID.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ViewerPattern.js"),
  VIEWER_ID = _require.VIEWER_ID,
  VIEWER_TYPE = _require.VIEWER_TYPE;
function defaultGetDataID(fieldValue, typeName) {
  if (typeName === VIEWER_TYPE) {
    return fieldValue.id == null ? VIEWER_ID : fieldValue.id;
  }
  return fieldValue.id;
}
module.exports = defaultGetDataID;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/defaultRelayFieldLogger.js": (function (module) {
"use strict";


var defaultRelayFieldLogger = function defaultRelayFieldLogger(event) {
  if ( true && event.kind === 'missing_field.log') {
    throw new Error('Relay Environment Configuration Error (dev only): `@required(action: LOG)` requires that the Relay Environment be configured with a `relayFieldLogger`.');
  }
};
module.exports = defaultRelayFieldLogger;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/experimental-live-resolvers/LiveResolverSuspenseSentinel.js": (function (module) {
"use strict";


var LIVE_RESOLVER_SUSPENSE_SENTINEL = Object.freeze({
  __LIVE_RESOLVER_SUSPENSE_SENTINEL: true
});
function suspenseSentinel() {
  return LIVE_RESOLVER_SUSPENSE_SENTINEL;
}
function isSuspenseSentinel(value) {
  return value === LIVE_RESOLVER_SUSPENSE_SENTINEL;
}
module.exports = {
  isSuspenseSentinel: isSuspenseSentinel,
  suspenseSentinel: suspenseSentinel
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/experimental-live-resolvers/getOutputTypeRecordIDs.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var RelayModernRecord = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS = _require.RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function getOutputTypeRecordIDs(record) {
  var maybeOutputTypeRecordIDs = RelayModernRecord.getValue(record, RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS);
  if (maybeOutputTypeRecordIDs == null) {
    return null;
  }
  !(maybeOutputTypeRecordIDs instanceof Set) ?  true ? invariant(false, 'getOutputTypeRecordIDs: Expected the `%s` field on record `%s` to be of type Set. Instead, it is a %s.', RELAY_RESOLVER_OUTPUT_TYPE_RECORD_IDS, typeof maybeOutputTypeRecordIDs) : 0 : void 0;
  return maybeOutputTypeRecordIDs;
}
module.exports = getOutputTypeRecordIDs;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/hasOverlappingIDs.js": (function (module) {
"use strict";


var ITERATOR_KEY = Symbol.iterator;
function hasOverlappingIDs(seenRecords, updatedRecordIDs) {
  var iterator = seenRecords[ITERATOR_KEY]();
  var next = iterator.next();
  while (!next.done) {
    var key = next.value;
    if (updatedRecordIDs.has(key)) {
      return true;
    }
    next = iterator.next();
  }
  return false;
}
module.exports = hasOverlappingIDs;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/hasSignificantOverlappingIDs.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  ROOT_ID = _require.ROOT_ID;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/ViewerPattern.js"),
  VIEWER_ID = _require2.VIEWER_ID;
var ITERATOR_KEY = Symbol.iterator;
function hasSignificantOverlappingIDs(seenRecords, updatedRecordIDs) {
  var iterator = seenRecords[ITERATOR_KEY]();
  var next = iterator.next();
  while (!next.done) {
    var key = next.value;
    if (updatedRecordIDs.has(key) && key !== ROOT_ID && key !== VIEWER_ID) {
      return true;
    }
    next = iterator.next();
  }
  return false;
}
module.exports = hasSignificantOverlappingIDs;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/isRelayModernEnvironment.js": (function (module) {
"use strict";


function isRelayModernEnvironment(environment) {
  return Boolean(environment && environment['@@RelayModernEnvironment']);
}
module.exports = isRelayModernEnvironment;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/normalizeResponse.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js"));
var _RelayModernRecord = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernRecord.js"));
var _RelayRecordSource = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayRecordSource.js"));
var _RelayResponseNormalizer = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayResponseNormalizer.js"));
function normalizeResponse(response, selector, typeName, options) {
  var _response$extensions;
  var data = response.data,
    errors = response.errors;
  var source = _RelayRecordSource["default"].create();
  var record = _RelayModernRecord["default"].create(selector.dataID, typeName);
  source.set(selector.dataID, record);
  var relayPayload = _RelayResponseNormalizer["default"].normalize(source, selector, data, options, errors);
  return (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, relayPayload), {}, {
    isFinal: ((_response$extensions = response.extensions) === null || _response$extensions === void 0 ? void 0 : _response$extensions.is_final) === true
  });
}
module.exports = normalizeResponse;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/readInlineData.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/GraphQLTag.js"),
  getInlineDataFragment = _require.getInlineDataFragment;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  FRAGMENTS_KEY = _require2.FRAGMENTS_KEY;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function readInlineData(fragment, fragmentRef) {
  var _fragmentRef$FRAGMENT;
  var inlineDataFragment = getInlineDataFragment(fragment);
  if (fragmentRef == null) {
    return fragmentRef;
  }
  !(typeof fragmentRef === 'object') ?  true ? invariant(false, 'readInlineData(): Expected an object, got `%s`.', typeof fragmentRef) : 0 : void 0;
  var inlineData = (_fragmentRef$FRAGMENT = fragmentRef[FRAGMENTS_KEY]) === null || _fragmentRef$FRAGMENT === void 0 ? void 0 : _fragmentRef$FRAGMENT[inlineDataFragment.name];
  !(inlineData != null) ?  true ? invariant(false, 'readInlineData(): Expected fragment `%s` to be spread in the parent ' + 'fragment.', inlineDataFragment.name) : 0 : void 0;
  return inlineData;
}
module.exports = readInlineData;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/subscription/requestSubscription.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var RelayDeclarativeMutationConfig = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/mutations/RelayDeclarativeMutationConfig.js");
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/GraphQLTag.js"),
  getRequest = _require.getRequest;
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernOperationDescriptor.js"),
  createOperationDescriptor = _require2.createOperationDescriptor;
var _require3 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernSelector.js"),
  createReaderSelector = _require3.createReaderSelector;
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
function requestSubscription(environment, config) {
  var subscription = getRequest(config.subscription);
  if (subscription.params.operationKind !== 'subscription') {
    throw new Error('requestSubscription: Must use Subscription operation');
  }
  var configs = config.configs,
    onCompleted = config.onCompleted,
    onError = config.onError,
    onNext = config.onNext,
    variables = config.variables,
    cacheConfig = config.cacheConfig;
  var operation = createOperationDescriptor(subscription, variables, cacheConfig);
   true ? warning(!(config.updater && configs), 'requestSubscription: Expected only one of `updater` and `configs` to be provided') : 0;
  var _ref = configs ? RelayDeclarativeMutationConfig.convert(configs, subscription, null, config.updater) : config,
    updater = _ref.updater;
  var sub = environment.executeSubscription({
    operation: operation,
    updater: updater
  }).subscribe({
    next: function next(responses) {
      if (onNext != null) {
        var selector = operation.fragment;
        var nextID;
        if (Array.isArray(responses)) {
          var _responses$, _responses$$extension;
          nextID = (_responses$ = responses[0]) === null || _responses$ === void 0 ? void 0 : (_responses$$extension = _responses$.extensions) === null || _responses$$extension === void 0 ? void 0 : _responses$$extension.__relay_subscription_root_id;
        } else {
          var _responses$extensions;
          nextID = (_responses$extensions = responses.extensions) === null || _responses$extensions === void 0 ? void 0 : _responses$extensions.__relay_subscription_root_id;
        }
        if (typeof nextID === 'string') {
          selector = createReaderSelector(selector.node, nextID, selector.variables, selector.owner);
        }
        var data = environment.lookup(selector).data;
        onNext(data);
      }
    },
    error: onError,
    complete: onCompleted
  });
  return {
    dispose: sub.unsubscribe
  };
}
module.exports = requestSubscription;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js": (function (module) {
"use strict";


var RelayConcreteNode = {
  ACTOR_CHANGE: 'ActorChange',
  CONDITION: 'Condition',
  CLIENT_COMPONENT: 'ClientComponent',
  CLIENT_EDGE_TO_SERVER_OBJECT: 'ClientEdgeToServerObject',
  CLIENT_EDGE_TO_CLIENT_OBJECT: 'ClientEdgeToClientObject',
  CLIENT_EXTENSION: 'ClientExtension',
  DEFER: 'Defer',
  CONNECTION: 'Connection',
  FRAGMENT: 'Fragment',
  FRAGMENT_SPREAD: 'FragmentSpread',
  INLINE_DATA_FRAGMENT_SPREAD: 'InlineDataFragmentSpread',
  INLINE_DATA_FRAGMENT: 'InlineDataFragment',
  INLINE_FRAGMENT: 'InlineFragment',
  LINKED_FIELD: 'LinkedField',
  LINKED_HANDLE: 'LinkedHandle',
  LITERAL: 'Literal',
  LIST_VALUE: 'ListValue',
  LOCAL_ARGUMENT: 'LocalArgument',
  MODULE_IMPORT: 'ModuleImport',
  ALIASED_FRAGMENT_SPREAD: 'AliasedFragmentSpread',
  ALIASED_INLINE_FRAGMENT_SPREAD: 'AliasedInlineFragmentSpread',
  RELAY_RESOLVER: 'RelayResolver',
  RELAY_LIVE_RESOLVER: 'RelayLiveResolver',
  REQUIRED_FIELD: 'RequiredField',
  OBJECT_VALUE: 'ObjectValue',
  OPERATION: 'Operation',
  REQUEST: 'Request',
  ROOT_ARGUMENT: 'RootArgument',
  SCALAR_FIELD: 'ScalarField',
  SCALAR_HANDLE: 'ScalarHandle',
  SPLIT_OPERATION: 'SplitOperation',
  STREAM: 'Stream',
  TYPE_DISCRIMINATOR: 'TypeDiscriminator',
  UPDATABLE_QUERY: 'UpdatableQuery',
  VARIABLE: 'Variable'
};
module.exports = RelayConcreteNode;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayDefaultHandleKey.js": (function (module) {
"use strict";


module.exports = {
  DEFAULT_HANDLE_KEY: ''
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayError.js": (function (module) {
"use strict";


function createError(type, name, messageFormat) {
  for (var _len = arguments.length, messageParams = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    messageParams[_key - 3] = arguments[_key];
  }
  var index = 0;
  var message = messageFormat.replace(/%s/g, function () {
    return String(messageParams[index++]);
  });
  var err = new Error(message);
  var error = Object.assign(err, {
    name: name,
    messageFormat: messageFormat,
    messageParams: messageParams,
    type: type,
    taalOpcodes: [2, 2]
  });
  if (error.stack === undefined) {
    try {
      throw error;
    } catch (_unused) {}
  }
  return error;
}
module.exports = {
  create: function create(name, messageFormat) {
    for (var _len2 = arguments.length, messageParams = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      messageParams[_key2 - 2] = arguments[_key2];
    }
    return createError.apply(void 0, ['error', name, messageFormat].concat(messageParams));
  },
  createWarning: function createWarning(name, messageFormat) {
    for (var _len3 = arguments.length, messageParams = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
      messageParams[_key3 - 2] = arguments[_key3];
    }
    return createError.apply(void 0, ['warn', name, messageFormat].concat(messageParams));
  }
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js": (function (module) {
"use strict";


var RelayFeatureFlags = {
  ENABLE_CLIENT_EDGES: false,
  ENABLE_VARIABLE_CONNECTION_KEY: false,
  ENABLE_RELAY_RESOLVERS: false,
  ENABLE_GETFRAGMENTIDENTIFIER_OPTIMIZATION: false,
  ENABLE_FRIENDLY_QUERY_NAME_GQL_URL: false,
  ENABLE_LOAD_QUERY_REQUEST_DEDUPING: true,
  ENABLE_DO_NOT_WRAP_LIVE_QUERY: false,
  ENABLE_NOTIFY_SUBSCRIPTION: false,
  BATCH_ASYNC_MODULE_UPDATES_FN: null,
  ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT: false,
  MAX_DATA_ID_LENGTH: null,
  STRING_INTERN_LEVEL: 0,
  LOG_MISSING_RECORDS_IN_PROD: false,
  ENABLE_LOOSE_SUBSCRIPTION_ATTRIBUTION: false,
  ENABLE_OPERATION_TRACKER_OPTIMISTIC_UPDATES: false,
  ENABLE_RELAY_OPERATION_TRACKER_SUSPENSE: false,
  ENABLE_FIELD_ERROR_HANDLING: false,
  ENABLE_FIELD_ERROR_HANDLING_THROW_BY_DEFAULT: false,
  ENABLE_FIELD_ERROR_HANDLING_CATCH_DIRECTIVE: false,
  ENABLE_SHALLOW_FREEZE_RESOLVER_VALUES: true,
  ENABLE_STRICT_EQUAL_SELECTORS: false
};
module.exports = RelayFeatureFlags;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayProfiler.js": (function (module) {
"use strict";


var profileHandlersByName = {};
var defaultProfiler = {
  stop: function stop() {}
};
var RelayProfiler = {
  profile: function profile(name, state) {
    var handlers = profileHandlersByName[name];
    if (handlers && handlers.length > 0) {
      var stopHandlers = [];
      for (var ii = handlers.length - 1; ii >= 0; ii--) {
        var stopHandler = handlers[ii](name, state);
        stopHandlers.unshift(stopHandler);
      }
      return {
        stop: function stop(error) {
          stopHandlers.forEach(function (stopHandler) {
            return stopHandler(error);
          });
        }
      };
    }
    return defaultProfiler;
  },
  attachProfileHandler: function attachProfileHandler(name, handler) {
    if (!profileHandlersByName.hasOwnProperty(name)) {
      profileHandlersByName[name] = [];
    }
    profileHandlersByName[name].push(handler);
  },
  detachProfileHandler: function detachProfileHandler(name, handler) {
    if (profileHandlersByName.hasOwnProperty(name)) {
      removeFromArray(profileHandlersByName[name], handler);
    }
  }
};
function removeFromArray(array, element) {
  var index = array.indexOf(element);
  if (index !== -1) {
    array.splice(index, 1);
  }
}
module.exports = RelayProfiler;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayReplaySubject.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var _defineProperty2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/defineProperty.js"));
var RelayObservable = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/network/RelayObservable.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var RelayReplaySubject = /*#__PURE__*/function () {
  function RelayReplaySubject() {
    var _this = this;
    (0, _defineProperty2["default"])(this, "_complete", false);
    (0, _defineProperty2["default"])(this, "_events", []);
    (0, _defineProperty2["default"])(this, "_sinks", new Set());
    (0, _defineProperty2["default"])(this, "_subscription", []);
    this._observable = RelayObservable.create(function (sink) {
      _this._sinks.add(sink);
      var events = _this._events;
      for (var i = 0; i < events.length; i++) {
        if (sink.closed) {
          break;
        }
        var event = events[i];
        switch (event.kind) {
          case 'complete':
            sink.complete();
            break;
          case 'error':
            sink.error(event.error);
            break;
          case 'next':
            sink.next(event.data);
            break;
          default:
            event.kind;
             true ?  true ? invariant(false, 'RelayReplaySubject: Unknown event kind `%s`.', event.kind) : 0 : 0;
        }
      }
      return function () {
        _this._sinks["delete"](sink);
      };
    });
  }
  var _proto = RelayReplaySubject.prototype;
  _proto.complete = function complete() {
    if (this._complete === true) {
      return;
    }
    this._complete = true;
    this._events.push({
      kind: 'complete'
    });
    this._sinks.forEach(function (sink) {
      return sink.complete();
    });
  };
  _proto.error = function error(_error) {
    if (this._complete === true) {
      return;
    }
    this._complete = true;
    this._events.push({
      kind: 'error',
      error: _error
    });
    this._sinks.forEach(function (sink) {
      return sink.error(_error);
    });
  };
  _proto.next = function next(data) {
    if (this._complete === true) {
      return;
    }
    this._events.push({
      kind: 'next',
      data: data
    });
    this._sinks.forEach(function (sink) {
      return sink.next(data);
    });
  };
  _proto.subscribe = function subscribe(observer) {
    var subscription = this._observable.subscribe(observer);
    this._subscription.push(subscription);
    return subscription;
  };
  _proto.unsubscribe = function unsubscribe() {
    var _iterator = (0, _createForOfIteratorHelper2["default"])(this._subscription),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var subscription = _step.value;
        subscription.unsubscribe();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    this._subscription = [];
  };
  _proto.getObserverCount = function getObserverCount() {
    return this._sinks.size;
  };
  return RelayReplaySubject;
}();
module.exports = RelayReplaySubject;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/StringInterner.js": (function (module) {
"use strict";


var internTable = new Map();
var nextIndex = 1;
var digits = initDigitTable();
var INTERN_PREFIX = '\t';
var ESCAPE_PREFIX = '\v';
function initDigitTable() {
  var digits = new Set();
  for (var i = 0; i < 10; ++i) {
    digits.add(i.toString());
  }
  return digits;
}
function escape(str) {
  if (str[0] === INTERN_PREFIX && digits.has(str[1]) || str[0] === ESCAPE_PREFIX) {
    return ESCAPE_PREFIX + str;
  }
  return str;
}
function intern(str, limit) {
  if (limit == null || str.length < limit) {
    return escape(str);
  }
  var internedString = internTable.get(str);
  if (internedString != null) {
    return internedString;
  }
  internedString = INTERN_PREFIX + nextIndex++;
  internTable.set(str, internedString);
  return internedString;
}
module.exports = {
  intern: intern
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/createPayloadFor3DField.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _objectSpread2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js"));
var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayStoreUtils.js"),
  getModuleComponentKey = _require.getModuleComponentKey,
  getModuleOperationKey = _require.getModuleOperationKey;
function createPayloadFor3DField(name, operation, component, response) {
  var data = (0, _objectSpread2["default"])({}, response);
  data[getModuleComponentKey(name)] = component;
  data[getModuleOperationKey(name)] = operation;
  return data;
}
module.exports = createPayloadFor3DField;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/deepFreeze.js": (function (module) {
"use strict";


function deepFreeze(object) {
  if (!shouldBeFrozen(object)) {
    return object;
  }
  Object.freeze(object);
  Object.getOwnPropertyNames(object).forEach(function (name) {
    var property = object[name];
    if (property && typeof property === 'object' && !Object.isFrozen(property)) {
      deepFreeze(property);
    }
  });
  return object;
}
function shouldBeFrozen(value) {
  return value != null && (Array.isArray(value) || typeof value === 'object' && value.constructor === Object);
}
module.exports = deepFreeze;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/generateID.js": (function (module) {
"use strict";


var id = 100000;
function generateID() {
  return id++;
}
module.exports = generateID;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getFragmentIdentifier.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayModernSelector.js"),
  getDataIDsFromFragment = _require.getDataIDsFromFragment,
  getSelector = _require.getSelector,
  getVariablesFromFragment = _require.getVariablesFromFragment;
var isEmptyObject = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/isEmptyObject.js");
var RelayFeatureFlags = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js");
var stableCopy = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/stableCopy.js");
var _require2 = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/StringInterner.js"),
  intern = _require2.intern;
function getFragmentIdentifier(fragmentNode, fragmentRef) {
  var selector = getSelector(fragmentNode, fragmentRef);
  var fragmentOwnerIdentifier = selector == null ? 'null' : selector.kind === 'SingularReaderSelector' ? selector.owner.identifier : '[' + selector.selectors.map(function (sel) {
    return sel.owner.identifier;
  }).join(',') + ']';
  var fragmentVariables = getVariablesFromFragment(fragmentNode, fragmentRef);
  var dataIDs = getDataIDsFromFragment(fragmentNode, fragmentRef);
  if (RelayFeatureFlags.ENABLE_GETFRAGMENTIDENTIFIER_OPTIMIZATION) {
    var ids = typeof dataIDs === 'undefined' ? 'missing' : dataIDs == null ? 'null' : Array.isArray(dataIDs) ? '[' + dataIDs.join(',') + ']' : dataIDs;
    ids = RelayFeatureFlags.STRING_INTERN_LEVEL <= 1 ? ids : intern(ids, RelayFeatureFlags.MAX_DATA_ID_LENGTH);
    return fragmentOwnerIdentifier + '/' + fragmentNode.name + '/' + (fragmentVariables == null || isEmptyObject(fragmentVariables) ? '{}' : JSON.stringify(stableCopy(fragmentVariables))) + '/' + ids;
  } else {
    var _JSON$stringify;
    var _ids = (_JSON$stringify = JSON.stringify(dataIDs)) !== null && _JSON$stringify !== void 0 ? _JSON$stringify : 'missing';
    _ids = RelayFeatureFlags.STRING_INTERN_LEVEL <= 1 ? _ids : intern(_ids, RelayFeatureFlags.MAX_DATA_ID_LENGTH);
    return fragmentOwnerIdentifier + '/' + fragmentNode.name + '/' + JSON.stringify(stableCopy(fragmentVariables)) + '/' + _ids;
  }
}
module.exports = getFragmentIdentifier;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getOperation.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayConcreteNode.js"),
  REQUEST = _require.REQUEST,
  SPLIT_OPERATION = _require.SPLIT_OPERATION;
function getOperation(node) {
  switch (node.kind) {
    case REQUEST:
      return node.operation;
    case SPLIT_OPERATION:
    default:
      return node;
  }
}
module.exports = getOperation;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getPaginationMetadata.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var getRefetchMetadata = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getRefetchMetadata.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function getPaginationMetadata(fragmentNode, componentDisplayName) {
  var _fragmentNode$metadat, _fragmentNode$metadat2;
  var _getRefetchMetadata = getRefetchMetadata(fragmentNode, componentDisplayName),
    paginationRequest = _getRefetchMetadata.refetchableRequest,
    refetchMetadata = _getRefetchMetadata.refetchMetadata;
  var paginationMetadata = refetchMetadata.connection;
  !(paginationMetadata != null) ?  true ? invariant(false, 'Relay: getPaginationMetadata(): Expected fragment `%s` to include a ' + 'connection when using `%s`. Did you forget to add a @connection ' + 'directive to the connection field in the fragment?', componentDisplayName, fragmentNode.name) : 0 : void 0;
  var connectionPathInFragmentData = paginationMetadata.path;
  var connectionMetadata = ((_fragmentNode$metadat = (_fragmentNode$metadat2 = fragmentNode.metadata) === null || _fragmentNode$metadat2 === void 0 ? void 0 : _fragmentNode$metadat2.connection) !== null && _fragmentNode$metadat !== void 0 ? _fragmentNode$metadat : [])[0];
  !(connectionMetadata != null) ?  true ? invariant(false, 'Relay: getPaginationMetadata(): Expected fragment `%s` to include a ' + 'connection when using `%s`. Did you forget to add a @connection ' + 'directive to the connection field in the fragment?', componentDisplayName, fragmentNode.name) : 0 : void 0;
  var identifierInfo = refetchMetadata.identifierInfo;
  !((identifierInfo === null || identifierInfo === void 0 ? void 0 : identifierInfo.identifierField) == null || typeof identifierInfo.identifierField === 'string') ?  true ? invariant(false, 'Relay: getRefetchMetadata(): Expected `identifierField` to be a string.') : 0 : void 0;
  return {
    connectionPathInFragmentData: connectionPathInFragmentData,
    identifierField: identifierInfo === null || identifierInfo === void 0 ? void 0 : identifierInfo.identifierField,
    paginationRequest: paginationRequest,
    paginationMetadata: paginationMetadata,
    stream: connectionMetadata.stream === true
  };
}
module.exports = getPaginationMetadata;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getPaginationVariables.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _defineProperty2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/defineProperty.js"));
var _objectSpread4 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js"));
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
function getPaginationVariables(direction, count, cursor, baseVariables, extraVariables, paginationMetadata) {
  var _objectSpread3;
  var backwardMetadata = paginationMetadata.backward,
    forwardMetadata = paginationMetadata.forward;
  if (direction === 'backward') {
    var _objectSpread2;
    !(backwardMetadata != null && backwardMetadata.count != null && backwardMetadata.cursor != null) ?  true ? invariant(false, 'Relay: Expected backward pagination metadata to be available. ' + "If you're seeing this, this is likely a bug in Relay.") : 0 : void 0;
     true ? warning(!extraVariables.hasOwnProperty(backwardMetadata.cursor), 'Relay: `UNSTABLE_extraVariables` provided by caller should not ' + 'contain cursor variable `%s`. This variable is automatically ' + 'determined by Relay.', backwardMetadata.cursor) : 0;
     true ? warning(!extraVariables.hasOwnProperty(backwardMetadata.count), 'Relay: `UNSTABLE_extraVariables` provided by caller should not ' + 'contain count variable `%s`. This variable is automatically ' + 'determined by Relay.', backwardMetadata.count) : 0;
    var _paginationVariables = (0, _objectSpread4["default"])((0, _objectSpread4["default"])((0, _objectSpread4["default"])({}, baseVariables), extraVariables), {}, (_objectSpread2 = {}, (0, _defineProperty2["default"])(_objectSpread2, backwardMetadata.cursor, cursor), (0, _defineProperty2["default"])(_objectSpread2, backwardMetadata.count, count), _objectSpread2));
    if (forwardMetadata && forwardMetadata.cursor) {
      _paginationVariables[forwardMetadata.cursor] = null;
    }
    if (forwardMetadata && forwardMetadata.count) {
      _paginationVariables[forwardMetadata.count] = null;
    }
    return _paginationVariables;
  }
  !(forwardMetadata != null && forwardMetadata.count != null && forwardMetadata.cursor != null) ?  true ? invariant(false, 'Relay: Expected forward pagination metadata to be available. ' + "If you're seeing this, this is likely a bug in Relay.") : 0 : void 0;
   true ? warning(!extraVariables.hasOwnProperty(forwardMetadata.cursor), 'Relay: `UNSTABLE_extraVariables` provided by caller should not ' + 'contain cursor variable `%s`. This variable is automatically ' + 'determined by Relay.', forwardMetadata.cursor) : 0;
   true ? warning(!extraVariables.hasOwnProperty(forwardMetadata.count), 'Relay: `UNSTABLE_extraVariables` provided by caller should not ' + 'contain count variable `%s`. This variable is automatically ' + 'determined by Relay.', forwardMetadata.count) : 0;
  var paginationVariables = (0, _objectSpread4["default"])((0, _objectSpread4["default"])((0, _objectSpread4["default"])({}, baseVariables), extraVariables), {}, (_objectSpread3 = {}, (0, _defineProperty2["default"])(_objectSpread3, forwardMetadata.cursor, cursor), (0, _defineProperty2["default"])(_objectSpread3, forwardMetadata.count, count), _objectSpread3));
  if (backwardMetadata && backwardMetadata.cursor) {
    paginationVariables[backwardMetadata.cursor] = null;
  }
  if (backwardMetadata && backwardMetadata.count) {
    paginationVariables[backwardMetadata.count] = null;
  }
  return paginationVariables;
}
module.exports = getPaginationVariables;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getPendingOperationsForFragment.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/query/fetchQueryInternal.js"),
  getPromiseForActiveRequest = _require.getPromiseForActiveRequest;
function getPendingOperationsForFragment(environment, fragmentNode, fragmentOwner) {
  var _pendingOperations$ma, _pendingOperations;
  var pendingOperations = [];
  var promise = getPromiseForActiveRequest(environment, fragmentOwner);
  if (promise != null) {
    pendingOperations = [fragmentOwner];
  } else {
    var _result$pendingOperat, _result$promise;
    var result = environment.getOperationTracker().getPendingOperationsAffectingOwner(fragmentOwner);
    pendingOperations = (_result$pendingOperat = result === null || result === void 0 ? void 0 : result.pendingOperations) !== null && _result$pendingOperat !== void 0 ? _result$pendingOperat : [];
    promise = (_result$promise = result === null || result === void 0 ? void 0 : result.promise) !== null && _result$promise !== void 0 ? _result$promise : null;
  }
  if (!promise) {
    return null;
  }
  var pendingOperationName = (_pendingOperations$ma = (_pendingOperations = pendingOperations) === null || _pendingOperations === void 0 ? void 0 : _pendingOperations.map(function (op) {
    return op.node.params.name;
  }).join(',')) !== null && _pendingOperations$ma !== void 0 ? _pendingOperations$ma : null;
  if (pendingOperationName == null || pendingOperationName.length === 0) {
    pendingOperationName = 'Unknown pending operation';
  }
  var fragmentName = fragmentNode.name;
  var promiseDisplayName = pendingOperationName === fragmentName ? "Relay(".concat(pendingOperationName, ")") : "Relay(".concat(pendingOperationName, ":").concat(fragmentName, ")");
  promise.displayName = promiseDisplayName;
  environment.__log({
    name: 'pendingoperation.found',
    fragment: fragmentNode,
    fragmentOwner: fragmentOwner,
    pendingOperations: pendingOperations
  });
  return {
    promise: promise,
    pendingOperations: pendingOperations
  };
}
module.exports = getPendingOperationsForFragment;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getRefetchMetadata.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function getRefetchMetadata(fragmentNode, componentDisplayName) {
  var _fragmentNode$metadat, _fragmentNode$metadat2;
  !(((_fragmentNode$metadat = fragmentNode.metadata) === null || _fragmentNode$metadat === void 0 ? void 0 : _fragmentNode$metadat.plural) !== true) ?  true ? invariant(false, 'Relay: getRefetchMetadata(): Expected fragment `%s` not to be plural when using ' + '`%s`. Remove `@relay(plural: true)` from fragment `%s` ' + 'in order to use it with `%s`.', fragmentNode.name, componentDisplayName, fragmentNode.name, componentDisplayName) : 0 : void 0;
  var refetchMetadata = (_fragmentNode$metadat2 = fragmentNode.metadata) === null || _fragmentNode$metadat2 === void 0 ? void 0 : _fragmentNode$metadat2.refetch;
  !(refetchMetadata != null) ?  true ? invariant(false, 'Relay: getRefetchMetadata(): Expected fragment `%s` to be refetchable when using `%s`. ' + 'Did you forget to add a @refetchable directive to the fragment?', componentDisplayName, fragmentNode.name) : 0 : void 0;
  var refetchableRequest = refetchMetadata.operation["default"] ? refetchMetadata.operation["default"] : refetchMetadata.operation;
  var fragmentRefPathInResponse = refetchMetadata.fragmentPathInResult;
  !(typeof refetchableRequest !== 'string') ?  true ? invariant(false, 'Relay: getRefetchMetadata(): Expected refetch query to be an ' + "operation and not a string when using `%s`. If you're seeing this, " + 'this is likely a bug in Relay.', componentDisplayName) : 0 : void 0;
  var identifierInfo = refetchMetadata.identifierInfo;
  if (identifierInfo != null) {
    !(identifierInfo.identifierField == null || typeof identifierInfo.identifierField === 'string') ?  true ? invariant(false, 'Relay: getRefetchMetadata(): Expected `identifierField` to be a string.') : 0 : void 0;
    !(identifierInfo.identifierQueryVariableName == null || typeof identifierInfo.identifierQueryVariableName === 'string') ?  true ? invariant(false, 'Relay: getRefetchMetadata(): Expected `identifierQueryVariableName` to be a string.') : 0 : void 0;
  }
  return {
    fragmentRefPathInResponse: fragmentRefPathInResponse,
    identifierInfo: identifierInfo,
    refetchableRequest: refetchableRequest,
    refetchMetadata: refetchMetadata
  };
}
module.exports = getRefetchMetadata;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getRelayHandleKey.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _require = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayDefaultHandleKey.js"),
  DEFAULT_HANDLE_KEY = _require.DEFAULT_HANDLE_KEY;
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function getRelayHandleKey(handleName, key, fieldName) {
  if (key && key !== DEFAULT_HANDLE_KEY) {
    return "__".concat(key, "_").concat(handleName);
  }
  !(fieldName != null) ?  true ? invariant(false, 'getRelayHandleKey: Expected either `fieldName` or `key` in `handle` to be provided') : 0 : void 0;
  return "__".concat(fieldName, "_").concat(handleName);
}
module.exports = getRelayHandleKey;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getRequestIdentifier.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var stableCopy = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/stableCopy.js");
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function getRequestIdentifier(parameters, variables) {
  var requestID = parameters.cacheID != null ? parameters.cacheID : parameters.id;
  !(requestID != null) ?  true ? invariant(false, 'getRequestIdentifier: Expected request `%s` to have either a ' + 'valid `id` or `cacheID` property', parameters.name) : 0 : void 0;
  return requestID + JSON.stringify(stableCopy(variables));
}
module.exports = getRequestIdentifier;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/getValueAtPath.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var invariant = __webpack_require__("../../node_modules/.pnpm/invariant@2.2.4/node_modules/invariant/invariant.js");
function getValueAtPath(data, path) {
  var result = data;
  var _iterator = (0, _createForOfIteratorHelper2["default"])(path),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;
      if (result == null) {
        return null;
      }
      if (typeof key === 'number') {
        !Array.isArray(result) ?  true ? invariant(false, 'Relay: Expected an array when extracting value at path. ' + "If you're seeing this, this is likely a bug in Relay.") : 0 : void 0;
        result = result[key];
      } else {
        !(typeof result === 'object' && !Array.isArray(result)) ?  true ? invariant(false, 'Relay: Expected an object when extracting value at path. ' + "If you're seeing this, this is likely a bug in Relay.") : 0 : void 0;
        result = result[key];
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return result;
}
module.exports = getValueAtPath;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/handlePotentialSnapshotErrors.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var _interopRequireDefault = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js")/* ["default"] */["default"]);
var _createForOfIteratorHelper2 = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js"));
var _RelayErrorTrie = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/store/RelayErrorTrie.js");
var _RelayFeatureFlags = _interopRequireDefault(__webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/RelayFeatureFlags.js"));
function handlePotentialSnapshotErrors(environment, missingRequiredFields, relayResolverErrors, errorResponseFields) {
  var _iterator = (0, _createForOfIteratorHelper2["default"])(relayResolverErrors),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var resolverError = _step.value;
      environment.relayFieldLogger({
        kind: 'relay_resolver.error',
        owner: resolverError.field.owner,
        fieldPath: resolverError.field.path,
        error: resolverError.error
      });
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (_RelayFeatureFlags["default"].ENABLE_FIELD_ERROR_HANDLING && errorResponseFields != null) {
    if (errorResponseFields != null) {
      var _iterator2 = (0, _createForOfIteratorHelper2["default"])(errorResponseFields),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var fieldError = _step2.value;
          var path = fieldError.path,
            owner = fieldError.owner,
            error = fieldError.error;
          environment.relayFieldLogger({
            kind: 'relay_field_payload.error',
            owner: owner,
            fieldPath: path,
            error: error
          });
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    }
    if (_RelayFeatureFlags["default"].ENABLE_FIELD_ERROR_HANDLING_THROW_BY_DEFAULT) {
      throw new _RelayErrorTrie.RelayFieldError("Relay: Unexpected response payload - this object includes an errors property in which you can access the underlying errors", errorResponseFields.map(function (_ref) {
        var path = _ref.path,
          owner = _ref.owner,
          error = _ref.error;
        return error;
      }));
    }
  }
  if (missingRequiredFields != null) {
    switch (missingRequiredFields.action) {
      case 'THROW':
        {
          var _missingRequiredField = missingRequiredFields.field,
            _path = _missingRequiredField.path,
            _owner = _missingRequiredField.owner;
          environment.relayFieldLogger({
            kind: 'missing_field.throw',
            owner: _owner,
            fieldPath: _path
          });
          throw new Error("Relay: Missing @required value at path '".concat(_path, "' in '").concat(_owner, "'."));
        }
      case 'LOG':
        missingRequiredFields.fields.forEach(function (_ref2) {
          var path = _ref2.path,
            owner = _ref2.owner;
          environment.relayFieldLogger({
            kind: 'missing_field.log',
            owner: owner,
            fieldPath: path
          });
        });
        break;
      default:
        {
          missingRequiredFields.action;
        }
    }
  }
}
module.exports = handlePotentialSnapshotErrors;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/isEmptyObject.js": (function (module) {
"use strict";


var hasOwnProperty = Object.prototype.hasOwnProperty;
function isEmptyObject(obj) {
  for (var _key in obj) {
    if (hasOwnProperty.call(obj, _key)) {
      return false;
    }
  }
  return true;
}
module.exports = isEmptyObject;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/isPromise.js": (function (module) {
"use strict";


function isPromise(p) {
  return !!p && typeof p.then === 'function';
}
module.exports = isPromise;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/isScalarAndEqual.js": (function (module) {
"use strict";


function isScalarAndEqual(valueA, valueB) {
  return valueA === valueB && (valueA === null || typeof valueA !== 'object');
}
module.exports = isScalarAndEqual;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/recycleNodesInto.js": (function (module) {
"use strict";


function recycleNodesInto(prevData, nextData) {
  return recycleNodesIntoImpl(prevData, nextData, true);
}
function recycleNodesIntoImpl(prevData, nextData, canMutate) {
  if (prevData === nextData || typeof prevData !== 'object' || !prevData || prevData.constructor !== Object && !Array.isArray(prevData) || typeof nextData !== 'object' || !nextData || nextData.constructor !== Object && !Array.isArray(nextData)) {
    return nextData;
  }
  var canRecycle = false;
  var prevArray = Array.isArray(prevData) ? prevData : null;
  var nextArray = Array.isArray(nextData) ? nextData : null;
  if (prevArray && nextArray) {
    var canMutateNext = canMutate && !Object.isFrozen(nextArray);
    canRecycle = nextArray.reduce(function (wasEqual, nextItem, ii) {
      var prevValue = prevArray[ii];
      var nextValue = recycleNodesIntoImpl(prevValue, nextItem, canMutateNext);
      if (nextValue !== nextArray[ii] && canMutateNext) {
        nextArray[ii] = nextValue;
      }
      return wasEqual && nextValue === prevArray[ii];
    }, true) && prevArray.length === nextArray.length;
  } else if (!prevArray && !nextArray) {
    var prevObject = prevData;
    var nextObject = nextData;
    var prevKeys = Object.keys(prevObject);
    var nextKeys = Object.keys(nextObject);
    var _canMutateNext = canMutate && !Object.isFrozen(nextObject);
    canRecycle = nextKeys.reduce(function (wasEqual, key) {
      var prevValue = prevObject[key];
      var nextValue = recycleNodesIntoImpl(prevValue, nextObject[key], _canMutateNext);
      if (nextValue !== nextObject[key] && _canMutateNext) {
        nextObject[key] = nextValue;
      }
      return wasEqual && nextValue === prevObject[key];
    }, true) && prevKeys.length === nextKeys.length;
  }
  return canRecycle ? prevData : nextData;
}
module.exports = recycleNodesInto;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/registerEnvironmentWithDevTools.js": (function (module) {
"use strict";


function registerEnvironmentWithDevTools(environment) {
  var _global = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : undefined;
  var devToolsHook = _global && _global.__RELAY_DEVTOOLS_HOOK__;
  if (devToolsHook) {
    devToolsHook.registerEnvironment(environment);
  }
}
module.exports = registerEnvironmentWithDevTools;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/resolveImmediate.js": (function (module) {
"use strict";


var resolvedPromise = Promise.resolve();
function resolveImmediate(callback) {
  resolvedPromise.then(callback)["catch"](throwNext);
}
function throwNext(error) {
  setTimeout(function () {
    throw error;
  }, 0);
}
module.exports = resolveImmediate;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/shallowFreeze.js": (function (module) {
"use strict";


module.exports = function shallowFreeze(value) {
  if (typeof value === 'object' && value != null && (Array.isArray(value) || value.constructor === Object)) {
    Object.freeze(value);
  }
};

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/stableCopy.js": (function (module) {
"use strict";


function stableCopy(value) {
  if (!value || typeof value !== 'object') {
    return value;
  }
  if (Array.isArray(value)) {
    return value.map(stableCopy);
  }
  var keys = Object.keys(value).sort();
  var stable = {};
  for (var i = 0; i < keys.length; i++) {
    stable[keys[i]] = stableCopy(value[keys[i]]);
  }
  return stable;
}
module.exports = stableCopy;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/withDuration.js": (function (module) {
"use strict";


var _window, _window$performance;
var isPerformanceNowAvailable = typeof window !== 'undefined' && typeof ((_window = window) === null || _window === void 0 ? void 0 : (_window$performance = _window.performance) === null || _window$performance === void 0 ? void 0 : _window$performance.now) === 'function';
function currentTimestamp() {
  if (isPerformanceNowAvailable) {
    return window.performance.now();
  }
  return Date.now();
}
function withDuration(cb) {
  var startTime = currentTimestamp();
  var result = cb();
  return [currentTimestamp() - startTime, result];
}
module.exports = withDuration;

}),
"../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/lib/util/withProvidedVariables.js": (function (module, __unused_webpack_exports, __webpack_require__) {
"use strict";


var areEqual = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/areEqual.js");
var warning = __webpack_require__("../../node_modules/.pnpm/fbjs@3.0.5_encoding@0.1.13/node_modules/fbjs/lib/warning.js");
var WEAKMAP_SUPPORTED = typeof WeakMap === 'function';
var debugCache = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();
function withProvidedVariables(userSuppliedVariables, providedVariables) {
  if (providedVariables != null) {
    var operationVariables = {};
    Object.assign(operationVariables, userSuppliedVariables);
    Object.keys(providedVariables).forEach(function (varName) {
      var providerFunction = providedVariables[varName].get;
      var providerResult = providerFunction();
      if (!debugCache.has(providerFunction)) {
        debugCache.set(providerFunction, providerResult);
        operationVariables[varName] = providerResult;
      } else {
        var cachedResult = debugCache.get(providerFunction);
        if (true) {
           true ? warning(areEqual(providerResult, cachedResult), 'Relay: Expected function `%s` for provider `%s` to be a pure function, ' + 'but got conflicting return values `%s` and `%s`', providerFunction.name, varName, providerResult, cachedResult) : 0;
        }
        operationVariables[varName] = cachedResult;
      }
    });
    return operationVariables;
  } else {
    return userSuppliedVariables;
  }
}
withProvidedVariables.tests_only_resetDebugCache =  true ? function () {
  debugCache = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();
} : 0;
module.exports = withProvidedVariables;

}),
"./api/materializeDocument.bench.ts": (function (module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {
__webpack_require__.r(__webpack_exports__);
/* ESM import */var mitata__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("mitata");
/* ESM import */var mitata__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mitata__WEBPACK_IMPORTED_MODULE_0__);
/* ESM import */var _cachebay_src_core_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../cachebay/src/core/client.ts");
/* ESM import */var _apollo_client_cache__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/inMemoryCache.js");
/* ESM import */var _apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/policies/pagination.js");
/* ESM import */var relay_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/relay-runtime@16.2.0_encoding@0.1.13/node_modules/relay-runtime/index.js");
/* ESM import */var relay_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(relay_runtime__WEBPACK_IMPORTED_MODULE_2__);
/* ESM import */var _src_generated_relayWriteQueryDefRelayWriteQuery_graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("./src/__generated__/relayWriteQueryDefRelayWriteQuery.graphql.ts");
/* ESM import */var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("./api/utils.ts");







let __sink = 0;
const sink = (o)=>{
    var _o_users_edges, _o_users;
    __sink ^= ((o === null || o === void 0 ? void 0 : (_o_users = o.users) === null || _o_users === void 0 ? void 0 : (_o_users_edges = _o_users.edges) === null || _o_users_edges === void 0 ? void 0 : _o_users_edges.length) ?? 0) | 0;
};
const createCachebay = ()=>{
    return (0,_cachebay_src_core_client__WEBPACK_IMPORTED_MODULE_1__.createCachebay)({
        transport: {
            http: async ()=>({
                    data: {}
                })
        }
    });
};
const createApolloCache = (resultCaching = false)=>{
    return new _apollo_client_cache__WEBPACK_IMPORTED_MODULE_5__.InMemoryCache({
        resultCaching,
        typePolicies: {
            Query: {
                fields: {
                    users: (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__.relayStylePagination)()
                }
            },
            User: {
                keyFields: [
                    "id"
                ],
                fields: {
                    posts: (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__.relayStylePagination)()
                }
            },
            Post: {
                keyFields: [
                    "id"
                ],
                fields: {
                    comments: (0,_apollo_client_utilities__WEBPACK_IMPORTED_MODULE_6__.relayStylePagination)()
                }
            },
            Comment: {
                keyFields: [
                    "id"
                ]
            }
        }
    });
};
const createRelayEnvironment = ()=>{
    return new relay_runtime__WEBPACK_IMPORTED_MODULE_2__.Environment({
        network: relay_runtime__WEBPACK_IMPORTED_MODULE_2__.Network.create(()=>Promise.resolve({
                data: {}
            })),
        store: new relay_runtime__WEBPACK_IMPORTED_MODULE_2__.Store(new relay_runtime__WEBPACK_IMPORTED_MODULE_2__.RecordSource())
    });
};
(0,mitata__WEBPACK_IMPORTED_MODULE_0__.summary)(()=>{
    const TOTAL_USERS = 500;
    const USERS_PAGE_SIZE = 10;
    const pages = (0,_utils__WEBPACK_IMPORTED_MODULE_4__.buildPages)((0,_utils__WEBPACK_IMPORTED_MODULE_4__.makeResponse)({
        users: TOTAL_USERS,
        posts: 5,
        comments: 3
    }), USERS_PAGE_SIZE);
    const getLabel = ()=>{
        return `${TOTAL_USERS} users (${pages.length} pages of ${USERS_PAGE_SIZE})`;
    };
    (0,mitata__WEBPACK_IMPORTED_MODULE_0__.group)("materializeDocument", ()=>{
        (0,mitata__WEBPACK_IMPORTED_MODULE_0__.bench)(`cachebay.materializeDocument:canonical(${getLabel()})`, function*() {
            yield {
                [0] () {
                    const cachebay = createCachebay();
                    for(let i = 0; i < pages.length; i++){
                        cachebay.writeQuery({
                            query: _utils__WEBPACK_IMPORTED_MODULE_4__.CACHEBAY_QUERY,
                            variables: pages[i].variables,
                            data: pages[i].data
                        });
                        cachebay.__internals.documents.materializeDocument({
                            document: `query JIT { LFG }`,
                            variables: {},
                            canonical: true,
                            force: true
                        });
                    }
                    return cachebay;
                },
                bench (cachebay) {
                    const result = cachebay.__internals.documents.materializeDocument({
                        document: _utils__WEBPACK_IMPORTED_MODULE_4__.CACHEBAY_QUERY,
                        variables: {
                            first: USERS_PAGE_SIZE,
                            after: null
                        },
                        canonical: true,
                        fingerprint: false,
                        force: false
                    });
                //sink(result.data);
                }
            };
        });
        (0,mitata__WEBPACK_IMPORTED_MODULE_0__.bench)(`cachebay.materializeDocument:canonical:fingerprint(${getLabel()})`, function*() {
            yield {
                [0] () {
                    const cachebay = createCachebay();
                    for(let i = 0; i < pages.length; i++){
                        cachebay.writeQuery({
                            query: _utils__WEBPACK_IMPORTED_MODULE_4__.CACHEBAY_QUERY,
                            variables: pages[i].variables,
                            data: pages[i].data
                        });
                        cachebay.__internals.documents.materializeDocument({
                            document: `query JIT { LFG }`,
                            variables: {},
                            canonical: true,
                            force: true
                        });
                    }
                    return cachebay;
                },
                bench (cachebay) {
                    const result = cachebay.__internals.documents.materializeDocument({
                        document: _utils__WEBPACK_IMPORTED_MODULE_4__.CACHEBAY_QUERY,
                        variables: {
                            first: USERS_PAGE_SIZE,
                            after: null
                        },
                        canonical: true,
                        fingerprint: true,
                        force: false
                    });
                //sink(result.data);
                }
            };
        });
        (0,mitata__WEBPACK_IMPORTED_MODULE_0__.bench)(`apollo.readQuery(${getLabel()})`, function*() {
            yield {
                [0] () {
                    const apollo = createApolloCache(false);
                    for(let i = 0; i < pages.length; i++){
                        apollo.writeQuery({
                            query: _utils__WEBPACK_IMPORTED_MODULE_4__.APOLLO_QUERY,
                            variables: pages[i].variables,
                            data: pages[i].data
                        });
                    }
                    return apollo;
                },
                bench (apollo) {
                    const result = apollo.readQuery({
                        query: _utils__WEBPACK_IMPORTED_MODULE_4__.APOLLO_QUERY,
                        variables: {
                            first: USERS_PAGE_SIZE,
                            after: null
                        }
                    });
                    sink(result);
                }
            };
        });
        (0,mitata__WEBPACK_IMPORTED_MODULE_0__.bench)(`relay.lookup(${getLabel()})`, function*() {
            yield {
                [0] () {
                    const relay = createRelayEnvironment();
                    for(let i = 0; i < pages.length; i++){
                        relay.commitPayload((0,relay_runtime__WEBPACK_IMPORTED_MODULE_2__.createOperationDescriptor)(_src_generated_relayWriteQueryDefRelayWriteQuery_graphql__WEBPACK_IMPORTED_MODULE_3__["default"], pages[i].variables), pages[i].data);
                    }
                    return relay;
                },
                bench (relay) {
                    const result = relay.lookup((0,relay_runtime__WEBPACK_IMPORTED_MODULE_2__.createOperationDescriptor)(_src_generated_relayWriteQueryDefRelayWriteQuery_graphql__WEBPACK_IMPORTED_MODULE_3__["default"], {
                        first: USERS_PAGE_SIZE,
                        after: null
                    }).fragment);
                    sink(result.data);
                }
            };
        });
    });
});
globalThis.__bench_sink = __sink;
await (0,mitata__WEBPACK_IMPORTED_MODULE_0__.run)();

__webpack_async_result__();
} catch(e) { __webpack_async_result__(e); } }, 1);

}),
"./api/utils.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  APOLLO_QUERY: () => (APOLLO_QUERY),
  CACHEBAY_QUERY: () => (CACHEBAY_QUERY),
  buildPages: () => (buildPages),
  makeResponse: () => (makeResponse)
});
/* ESM import */var graphql_tag__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql-tag@2.12.6_graphql@16.11.0/node_modules/graphql-tag/lib/index.js");

// For fair perf (strip dev-only code in your lib if you gate by NODE_ENV)
// process.env.NODE_ENV = "production"; // Set via environment variable instead
// -----------------------------------------------------------------------------
// Deterministic fixtures
// -----------------------------------------------------------------------------
function likeCount(i, j) {
    return (i * 131 + j * 977) % 100 | 0;
}
function makeResponse({ users = 10, posts = 5, comments = 3 }) {
    return {
        __typename: "Query",
        users: {
            __typename: "UserConnection",
            edges: Array.from({
                length: users
            }, (_, i)=>({
                    __typename: "UserEdge",
                    cursor: "u" + (i + 1),
                    node: {
                        __typename: "User",
                        id: "u" + (i + 1),
                        name: "User " + (i + 1),
                        avatar: `https://i.pravatar.cc/150?u=${i + 1}`,
                        posts: {
                            __typename: "PostConnection",
                            edges: Array.from({
                                length: posts
                            }, (_, j)=>({
                                    __typename: "PostEdge",
                                    cursor: "p" + (j + 1),
                                    node: {
                                        __typename: "Post",
                                        id: `p-${i + 1}-${j + 1}`,
                                        title: `Post ${j + 1} by User ${i + 1}`,
                                        likeCount: likeCount(i + 1, j + 1),
                                        comments: {
                                            __typename: "CommentConnection",
                                            edges: Array.from({
                                                length: comments
                                            }, (_, k)=>({
                                                    __typename: "CommentEdge",
                                                    cursor: "c" + (k + 1),
                                                    node: {
                                                        __typename: "Comment",
                                                        id: `c-${i + 1}-${j + 1}-${k + 1}`,
                                                        text: `Comment ${k + 1} on Post ${j + 1}`,
                                                        author: {
                                                            __typename: "User",
                                                            id: "u" + (k % users + 1),
                                                            name: "User " + (k % users + 1)
                                                        }
                                                    }
                                                })),
                                            pageInfo: {
                                                __typename: "PageInfo",
                                                endCursor: comments > 0 ? "c" + comments : null,
                                                hasNextPage: false
                                            }
                                        }
                                    }
                                })),
                            pageInfo: {
                                __typename: "PageInfo",
                                endCursor: posts > 0 ? "p" + posts : null,
                                hasNextPage: false
                            }
                        }
                    }
                })),
            pageInfo: {
                __typename: "PageInfo",
                endCursor: users > 0 ? "u" + users : null,
                hasNextPage: false
            }
        }
    };
}
const buildPages = (all, pageSize)=>{
    const edges = all.users.edges;
    const pages = [];
    const total = edges.length;
    for(let start = 0, pageIdx = 0; start < total; start += pageSize, pageIdx++){
        const end = Math.min(start + pageSize, total);
        const pageEdges = edges.slice(start, end);
        const endCursor = pageEdges.length ? pageEdges[pageEdges.length - 1].cursor : null;
        const after = pageIdx === 0 ? null : pages[pageIdx - 1].data.users.pageInfo.endCursor;
        const pageData = {
            __typename: "Query",
            users: {
                __typename: "UserConnection",
                edges: pageEdges,
                pageInfo: {
                    __typename: "PageInfo",
                    endCursor,
                    hasNextPage: end < total
                }
            }
        };
        Object.freeze(pageData); // prevent accidental mutation
        pages.push({
            data: pageData,
            after,
            variables: {
                first: pageSize,
                after
            }
        });
    }
    return pages;
};
// -----------------------------------------------------------------------------
// GraphQL Queries
// -----------------------------------------------------------------------------
// ---- Cachebay query: explicit keys for nested connections ----
const CACHEBAY_QUERY = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_0__.gql)`
  query Users($first: Int!, $after: String) {
    users(first: $first, after: $after) @connection {
      edges {
        cursor
        node {
          id
          name
          avatar
          posts(first: 5, after: null) @connection(key: "posts") {
            edges {
              cursor
              node {
                id
                title
                likeCount
                comments(first: 3, after: null) @connection(key: "comments") {
                  edges {
                    cursor
                    node { id text author { id name } }
                  }
                  pageInfo { hasNextPage }
                }
              }
            }
            pageInfo { hasNextPage }
          }
        }
      }
      pageInfo { endCursor hasNextPage }
    }
  }
`;
// ---- Apollo query: same selection (no directives) ----
const APOLLO_QUERY = (0,graphql_tag__WEBPACK_IMPORTED_MODULE_0__.gql)`
  query Users($first: Int!, $after: String) {
    users(first: $first, after: $after) {
      edges {
        cursor
        node {
          id
          name
          avatar
          posts(first: 5, after: null) {
            edges {
              cursor
              node {
                id
                title
                likeCount
                comments(first: 3, after: null) {
                  edges {
                    cursor
                    node { id text author { id name } }
                  }
                  pageInfo { hasNextPage }
                }
              }
            }
            pageInfo { hasNextPage }
          }
        }
      }
      pageInfo { endCursor hasNextPage }
    }
  }
`;


}),
"./src/__generated__/relayWriteQueryDefRelayWriteQuery.graphql.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": () => (__WEBPACK_DEFAULT_EXPORT__)
});
/**
 * @generated SignedSource<<50551d89657cf40b7dd51f3d997318c3>>
 * @lightSyntaxTransform
 * @nogrep
 */ /* tslint:disable */ /* eslint-disable */ // @ts-nocheck
const node = function() {
    var v0 = {
        "defaultValue": null,
        "kind": "LocalArgument",
        "name": "after"
    }, v1 = {
        "defaultValue": null,
        "kind": "LocalArgument",
        "name": "first"
    }, v2 = {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "cursor",
        "storageKey": null
    }, v3 = {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "id",
        "storageKey": null
    }, v4 = {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "name",
        "storageKey": null
    }, v5 = {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "avatar",
        "storageKey": null
    }, v6 = {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "title",
        "storageKey": null
    }, v7 = {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "likeCount",
        "storageKey": null
    }, v8 = {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "__typename",
        "storageKey": null
    }, v9 = {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "hasNextPage",
        "storageKey": null
    }, v10 = {
        "alias": null,
        "args": null,
        "kind": "ScalarField",
        "name": "endCursor",
        "storageKey": null
    }, v11 = {
        "alias": null,
        "args": null,
        "concreteType": "PageInfo",
        "kind": "LinkedField",
        "name": "pageInfo",
        "plural": false,
        "selections": [
            v9 /*: any*/ ,
            v10 /*: any*/ 
        ],
        "storageKey": null
    }, v12 = [
        {
            "alias": null,
            "args": null,
            "concreteType": "CommentEdge",
            "kind": "LinkedField",
            "name": "edges",
            "plural": true,
            "selections": [
                v2 /*: any*/ ,
                {
                    "alias": null,
                    "args": null,
                    "concreteType": "Comment",
                    "kind": "LinkedField",
                    "name": "node",
                    "plural": false,
                    "selections": [
                        v3 /*: any*/ ,
                        {
                            "alias": null,
                            "args": null,
                            "kind": "ScalarField",
                            "name": "text",
                            "storageKey": null
                        },
                        {
                            "alias": null,
                            "args": null,
                            "concreteType": "User",
                            "kind": "LinkedField",
                            "name": "author",
                            "plural": false,
                            "selections": [
                                v3 /*: any*/ ,
                                v4 /*: any*/ 
                            ],
                            "storageKey": null
                        },
                        v8 /*: any*/ 
                    ],
                    "storageKey": null
                }
            ],
            "storageKey": null
        },
        v11 /*: any*/ 
    ], v13 = {
        "alias": null,
        "args": null,
        "concreteType": "PageInfo",
        "kind": "LinkedField",
        "name": "pageInfo",
        "plural": false,
        "selections": [
            v10 /*: any*/ ,
            v9 /*: any*/ 
        ],
        "storageKey": null
    }, v14 = [
        {
            "kind": "Variable",
            "name": "after",
            "variableName": "after"
        },
        {
            "kind": "Variable",
            "name": "first",
            "variableName": "first"
        }
    ], v15 = [
        {
            "kind": "Literal",
            "name": "first",
            "value": 5
        }
    ], v16 = [
        {
            "kind": "Literal",
            "name": "first",
            "value": 3
        }
    ], v17 = {
        "count": null,
        "cursor": null,
        "direction": "forward",
        "path": null
    };
    return {
        "fragment": {
            "argumentDefinitions": [
                v0 /*: any*/ ,
                v1 /*: any*/ 
            ],
            "kind": "Fragment",
            "metadata": null,
            "name": "relayWriteQueryDefRelayWriteQuery",
            "selections": [
                {
                    "alias": "users",
                    "args": null,
                    "concreteType": "UserConnection",
                    "kind": "LinkedField",
                    "name": "__relayWriteQueryDef_users_connection",
                    "plural": false,
                    "selections": [
                        {
                            "alias": null,
                            "args": null,
                            "concreteType": "UserEdge",
                            "kind": "LinkedField",
                            "name": "edges",
                            "plural": true,
                            "selections": [
                                v2 /*: any*/ ,
                                {
                                    "alias": null,
                                    "args": null,
                                    "concreteType": "User",
                                    "kind": "LinkedField",
                                    "name": "node",
                                    "plural": false,
                                    "selections": [
                                        v3 /*: any*/ ,
                                        v4 /*: any*/ ,
                                        v5 /*: any*/ ,
                                        {
                                            "alias": "posts",
                                            "args": null,
                                            "concreteType": "PostConnection",
                                            "kind": "LinkedField",
                                            "name": "__User_posts_connection",
                                            "plural": false,
                                            "selections": [
                                                {
                                                    "alias": null,
                                                    "args": null,
                                                    "concreteType": "PostEdge",
                                                    "kind": "LinkedField",
                                                    "name": "edges",
                                                    "plural": true,
                                                    "selections": [
                                                        v2 /*: any*/ ,
                                                        {
                                                            "alias": null,
                                                            "args": null,
                                                            "concreteType": "Post",
                                                            "kind": "LinkedField",
                                                            "name": "node",
                                                            "plural": false,
                                                            "selections": [
                                                                v3 /*: any*/ ,
                                                                v6 /*: any*/ ,
                                                                v7 /*: any*/ ,
                                                                {
                                                                    "alias": "comments",
                                                                    "args": null,
                                                                    "concreteType": "CommentConnection",
                                                                    "kind": "LinkedField",
                                                                    "name": "__Post_comments_connection",
                                                                    "plural": false,
                                                                    "selections": v12 /*: any*/ ,
                                                                    "storageKey": null
                                                                },
                                                                v8 /*: any*/ 
                                                            ],
                                                            "storageKey": null
                                                        }
                                                    ],
                                                    "storageKey": null
                                                },
                                                v11 /*: any*/ 
                                            ],
                                            "storageKey": null
                                        },
                                        v8 /*: any*/ 
                                    ],
                                    "storageKey": null
                                }
                            ],
                            "storageKey": null
                        },
                        v13 /*: any*/ 
                    ],
                    "storageKey": null
                }
            ],
            "type": "Query",
            "abstractKey": null
        },
        "kind": "Request",
        "operation": {
            "argumentDefinitions": [
                v1 /*: any*/ ,
                v0 /*: any*/ 
            ],
            "kind": "Operation",
            "name": "relayWriteQueryDefRelayWriteQuery",
            "selections": [
                {
                    "alias": null,
                    "args": v14 /*: any*/ ,
                    "concreteType": "UserConnection",
                    "kind": "LinkedField",
                    "name": "users",
                    "plural": false,
                    "selections": [
                        {
                            "alias": null,
                            "args": null,
                            "concreteType": "UserEdge",
                            "kind": "LinkedField",
                            "name": "edges",
                            "plural": true,
                            "selections": [
                                v2 /*: any*/ ,
                                {
                                    "alias": null,
                                    "args": null,
                                    "concreteType": "User",
                                    "kind": "LinkedField",
                                    "name": "node",
                                    "plural": false,
                                    "selections": [
                                        v3 /*: any*/ ,
                                        v4 /*: any*/ ,
                                        v5 /*: any*/ ,
                                        {
                                            "alias": null,
                                            "args": v15 /*: any*/ ,
                                            "concreteType": "PostConnection",
                                            "kind": "LinkedField",
                                            "name": "posts",
                                            "plural": false,
                                            "selections": [
                                                {
                                                    "alias": null,
                                                    "args": null,
                                                    "concreteType": "PostEdge",
                                                    "kind": "LinkedField",
                                                    "name": "edges",
                                                    "plural": true,
                                                    "selections": [
                                                        v2 /*: any*/ ,
                                                        {
                                                            "alias": null,
                                                            "args": null,
                                                            "concreteType": "Post",
                                                            "kind": "LinkedField",
                                                            "name": "node",
                                                            "plural": false,
                                                            "selections": [
                                                                v3 /*: any*/ ,
                                                                v6 /*: any*/ ,
                                                                v7 /*: any*/ ,
                                                                {
                                                                    "alias": null,
                                                                    "args": v16 /*: any*/ ,
                                                                    "concreteType": "CommentConnection",
                                                                    "kind": "LinkedField",
                                                                    "name": "comments",
                                                                    "plural": false,
                                                                    "selections": v12 /*: any*/ ,
                                                                    "storageKey": "comments(first:3)"
                                                                },
                                                                {
                                                                    "alias": null,
                                                                    "args": v16 /*: any*/ ,
                                                                    "filters": null,
                                                                    "handle": "connection",
                                                                    "key": "Post_comments",
                                                                    "kind": "LinkedHandle",
                                                                    "name": "comments"
                                                                },
                                                                v8 /*: any*/ 
                                                            ],
                                                            "storageKey": null
                                                        }
                                                    ],
                                                    "storageKey": null
                                                },
                                                v11 /*: any*/ 
                                            ],
                                            "storageKey": "posts(first:5)"
                                        },
                                        {
                                            "alias": null,
                                            "args": v15 /*: any*/ ,
                                            "filters": null,
                                            "handle": "connection",
                                            "key": "User_posts",
                                            "kind": "LinkedHandle",
                                            "name": "posts"
                                        },
                                        v8 /*: any*/ 
                                    ],
                                    "storageKey": null
                                }
                            ],
                            "storageKey": null
                        },
                        v13 /*: any*/ 
                    ],
                    "storageKey": null
                },
                {
                    "alias": null,
                    "args": v14 /*: any*/ ,
                    "filters": null,
                    "handle": "connection",
                    "key": "relayWriteQueryDef_users",
                    "kind": "LinkedHandle",
                    "name": "users"
                }
            ]
        },
        "params": {
            "cacheID": "110bb5d37e89cd54be63a3f101b603df",
            "id": null,
            "metadata": {
                "connection": [
                    v17 /*: any*/ ,
                    v17 /*: any*/ ,
                    {
                        "count": "first",
                        "cursor": "after",
                        "direction": "forward",
                        "path": [
                            "users"
                        ]
                    }
                ]
            },
            "name": "relayWriteQueryDefRelayWriteQuery",
            "operationKind": "query",
            "text": "query relayWriteQueryDefRelayWriteQuery(\n  $first: Int!\n  $after: String\n) {\n  users(first: $first, after: $after) {\n    edges {\n      cursor\n      node {\n        id\n        name\n        avatar\n        posts(first: 5) {\n          edges {\n            cursor\n            node {\n              id\n              title\n              likeCount\n              comments(first: 3) {\n                edges {\n                  cursor\n                  node {\n                    id\n                    text\n                    author {\n                      id\n                      name\n                    }\n                    __typename\n                  }\n                }\n                pageInfo {\n                  hasNextPage\n                  endCursor\n                }\n              }\n              __typename\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n        __typename\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n    }\n  }\n}\n"
        }
    };
}();
node.hash = "64b929857c9f43c1be76ab1674178e4e";
/* ESM default export */ const __WEBPACK_DEFAULT_EXPORT__ = (node);


}),
"../cachebay/src/compiler/compile.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  compilePlan: () => (compilePlan)
});
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs");
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs");
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printer.mjs");
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/parser.mjs");
/* ESM import */var _lowering_flatten__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../cachebay/src/compiler/lowering/flatten.ts");
/* ESM import */var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../cachebay/src/compiler/utils.ts");
/* ESM import */var _fingerprint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../cachebay/src/compiler/fingerprint.ts");
/* ESM import */var _variables__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../cachebay/src/compiler/variables.ts");





/** Build a Map of fragment name -> fragment definition for lowering. */ const indexFragments = (doc)=>{
    const m = new Map();
    for(let i = 0; i < doc.definitions.length; i++){
        const d = doc.definitions[i];
        if (d.kind === graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.FRAGMENT_DEFINITION) {
            m.set(d.name.value, d);
        }
    }
    return m;
};
const indexByResponseKey = (fields)=>{
    if (!fields || fields.length === 0) return undefined;
    const m = new Map();
    for(let i = 0; i < fields.length; i++)m.set(fields[i].responseKey, fields[i]);
    return m;
};
const opRootTypename = (op)=>{
    switch(op.operation){
        case "query":
            return "Query";
        case "mutation":
            return "Mutation";
        case "subscription":
            return "Subscription";
        default:
            return "Query";
    }
};
/**
 * Compute plan metadata: id, varMask, makeVarsKey, windowArgs.
 * This walks the lowered plan to collect window args and combines with
 * variables collected from the original AST.
 */ const computePlanMetadata = (root, selectionSet, fragmentsByName, operation, rootTypename)=>{
    // 1. Compute stable fingerprint and hash it to get numeric ID
    const selectionFingerprint = (0,_fingerprint__WEBPACK_IMPORTED_MODULE_2__.fingerprintPlan)(root, operation, rootTypename);
    const id = (0,_fingerprint__WEBPACK_IMPORTED_MODULE_2__.hashFingerprint)(selectionFingerprint);
    // 2. Collect all variables from the AST
    const strictVars = (0,_variables__WEBPACK_IMPORTED_MODULE_3__.collectVarsFromSelectionSet)(selectionSet, fragmentsByName);
    // 3. Collect window args from connection fields
    const windowArgs = new Set();
    const walkFields = (fields)=>{
        for (const field of fields){
            if (field.isConnection && field.pageArgs) {
                for (const arg of field.pageArgs){
                    windowArgs.add(arg);
                }
            }
            if (field.selectionSet) {
                walkFields(field.selectionSet);
            }
        }
    };
    walkFields(root);
    // 4. Compute canonical vars (strict minus window args)
    const canonicalVars = new Set();
    for (const v of strictVars){
        if (!windowArgs.has(v)) {
            canonicalVars.add(v);
        }
    }
    // 5. Build masks and precompiled key function
    const strictMask = Array.from(strictVars);
    const canonicalMask = Array.from(canonicalVars);
    const internalMakeVarsKey = (0,_variables__WEBPACK_IMPORTED_MODULE_3__.makeMaskedVarsKeyFn)(strictMask, canonicalMask);
    // 6. Build public API with canonical boolean
    const makeVarsKey = (canonical, vars)=>{
        const mode = canonical ? "canonical" : "strict";
        return internalMakeVarsKey(mode, vars);
    };
    const makeSignature = (canonical, vars)=>{
        const mode = canonical ? "canonical" : "strict";
        return `${id}|${mode}|${internalMakeVarsKey(mode, vars)}`;
    };
    const depFields = [];
    const collectDepFields = (fields, parentTypename)=>{
        for (const field of fields){
            // Collect connections and fields with arguments
            if (field.isConnection || field.expectedArgNames.length > 0) {
                depFields.push({
                    field,
                    isConnection: field.isConnection,
                    parentTypename
                });
            }
            // Recurse into children with the field's typename as parent
            if (field.selectionSet) {
                const childParent = field.typeName || parentTypename;
                collectDepFields(field.selectionSet, childParent);
            }
        }
    };
    collectDepFields(root, rootTypename);
    // Build getDependencies function - returns dependency keys for graph watching
    const getDependencies = (canonical, vars)=>{
        const deps = new Set();
        // Iterate collected fields and build dependency keys using optimized utility functions
        for(let i = 0; i < depFields.length; i++){
            const { field, isConnection, parentTypename } = depFields[i];
            // Determine parentId: use "@" for root (Query/Mutation), otherwise use typename
            const parentId = parentTypename === rootTypename ? "@" : parentTypename;
            if (isConnection) {
                // For connections: use canonical (filters only) or strict (with pagination) based on mode
                const key = canonical ? (0,_utils__WEBPACK_IMPORTED_MODULE_1__.buildConnectionCanonicalKey)(field, parentId, vars) : (0,_utils__WEBPACK_IMPORTED_MODULE_1__.buildConnectionKey)(field, parentId, vars);
                deps.add(key);
            } else {
                // For regular fields with arguments: use buildFieldKey
                const key = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.buildFieldKey)(field, vars);
                deps.add(key);
            }
        }
        return deps;
    };
    return {
        id,
        varMask: {
            strict: strictMask,
            canonical: canonicalMask
        },
        makeVarsKey,
        makeSignature,
        getDependencies,
        windowArgs,
        selectionFingerprint
    };
};
/* ────────────────────────────────────────────────────────────────────────── */ /* Sanitizer: add __typename (except at op root), strip @connection           */ /* ────────────────────────────────────────────────────────────────────────── */ function ensureTypename(ss) {
    const has = ss.selections.some((s)=>s.kind === graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.FIELD && s.name.value === "__typename");
    if (has) return ss;
    const typenameField = {
        kind: graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.FIELD,
        name: {
            kind: graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.NAME,
            value: "__typename"
        }
    };
    const newSelections = new Array(ss.selections.length + 1);
    for(let i = 0; i < ss.selections.length; i++){
        newSelections[i] = ss.selections[i];
    }
    newSelections[ss.selections.length] = typenameField;
    return {
        kind: ss.kind,
        selections: newSelections
    };
}
/** Recursively add __typename to all selection sets (for fragments) */ function ensureTypenameRecursive(ss) {
    // First add __typename to this level
    const withTypename = ensureTypename(ss);
    // Then recursively process all field selections
    let hasChanges = false;
    const selections = new Array(withTypename.selections.length);
    for(let i = 0; i < withTypename.selections.length; i++){
        const sel = withTypename.selections[i];
        if (sel.kind === graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.FIELD && sel.selectionSet) {
            const newSelectionSet = ensureTypenameRecursive(sel.selectionSet);
            if (newSelectionSet !== sel.selectionSet) {
                selections[i] = {
                    kind: sel.kind,
                    name: sel.name,
                    alias: sel.alias,
                    arguments: sel.arguments,
                    directives: sel.directives,
                    selectionSet: newSelectionSet
                };
                hasChanges = true;
            } else {
                selections[i] = sel;
            }
        } else if (sel.kind === graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.INLINE_FRAGMENT && sel.selectionSet) {
            const newSelectionSet = ensureTypenameRecursive(sel.selectionSet);
            if (newSelectionSet !== sel.selectionSet) {
                selections[i] = {
                    kind: sel.kind,
                    typeCondition: sel.typeCondition,
                    directives: sel.directives,
                    selectionSet: newSelectionSet
                };
                hasChanges = true;
            } else {
                selections[i] = sel;
            }
        } else {
            selections[i] = sel;
        }
    }
    if (!hasChanges && selections === withTypename.selections) {
        return withTypename;
    }
    return {
        kind: withTypename.kind,
        selections
    };
}
/** Add __typename to nested selections but NOT at root level (for operations) */ function ensureTypenameNested(ss) {
    // Don't add __typename at this level (root), only to nested selections
    let hasChanges = false;
    const selections = new Array(ss.selections.length);
    for(let i = 0; i < ss.selections.length; i++){
        const sel = ss.selections[i];
        if (sel.kind === graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.FIELD && sel.selectionSet) {
            const newSelectionSet = ensureTypenameRecursive(sel.selectionSet);
            if (newSelectionSet !== sel.selectionSet) {
                selections[i] = {
                    kind: sel.kind,
                    name: sel.name,
                    alias: sel.alias,
                    arguments: sel.arguments,
                    directives: sel.directives,
                    selectionSet: newSelectionSet
                };
                hasChanges = true;
            } else {
                selections[i] = sel;
            }
        } else if (sel.kind === graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.INLINE_FRAGMENT && sel.selectionSet) {
            const newSelectionSet = ensureTypenameRecursive(sel.selectionSet);
            if (newSelectionSet !== sel.selectionSet) {
                selections[i] = {
                    kind: sel.kind,
                    typeCondition: sel.typeCondition,
                    directives: sel.directives,
                    selectionSet: newSelectionSet
                };
                hasChanges = true;
            } else {
                selections[i] = sel;
            }
        } else {
            selections[i] = sel;
        }
    }
    if (!hasChanges) {
        return ss;
    }
    return {
        kind: ss.kind,
        selections
    };
}
/** Create a network-safe copy: strip @connection directives. __typename is already added during compilation. Returns a string ready to send to server. */ function buildNetworkQuery(doc) {
    const cleaned = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {
        Field: {
            enter (node) {
                if (!node.directives || node.directives.length === 0) {
                    return node;
                }
                const directives = (node.directives || []).filter((d)=>d.name.value !== "connection");
                if (directives.length === node.directives.length) {
                    return node; // No @connection found, return as-is
                }
                // Avoid spread operator - create new object directly
                return {
                    kind: node.kind,
                    name: node.name,
                    alias: node.alias,
                    arguments: node.arguments,
                    directives: directives.length > 0 ? directives : undefined,
                    selectionSet: node.selectionSet
                };
            }
        }
    });
    return (0,graphql__WEBPACK_IMPORTED_MODULE_6__.print)(cleaned);
}
/* ────────────────────────────────────────────────────────────────────────── */ /* Public: compilePlan(document)                                             */ /* ────────────────────────────────────────────────────────────────────────── */ /**
 * Compile to a flat cache plan plus a network-safe DocumentNode.
 * - If called with a precompiled plan → returned as-is (pass-through).
 * - If called with a string → parsed to DocumentNode first.
 * - If the document contains an OperationDefinition → compiled as an operation.
 * - Else if it has one or more FragmentDefinitions:
 *    - with a single fragment → compiled as that fragment
 *    - with multiple fragments → requires opts.fragmentName to select
 */ const compilePlan = (documentOrStringOrPlan, opts)=>{
    // Precompiled plan? done.
    if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isCachePlan)(documentOrStringOrPlan)) {
        return documentOrStringOrPlan;
    }
    // String? parse first.
    const document = typeof documentOrStringOrPlan === "string" ? (0,graphql__WEBPACK_IMPORTED_MODULE_7__.parse)(documentOrStringOrPlan) : documentOrStringOrPlan;
    const fragmentsByName = indexFragments(document);
    // Operation path
    const operation = document.definitions.find((d)=>d.kind === graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.OPERATION_DEFINITION);
    if (operation) {
        const rootTypename = opRootTypename(operation);
        const selectionWithTypename = ensureTypenameNested(operation.selectionSet);
        // Lower the selection set (it still has @connection) so we retain metadata
        const root = (0,_lowering_flatten__WEBPACK_IMPORTED_MODULE_0__.lowerSelectionSet)(selectionWithTypename, rootTypename, fragmentsByName);
        const rootSelectionMap = indexByResponseKey(root);
        // Build network-safe doc with __typename added to operation and all fragments
        // Just need to strip @connection directives
        // Avoid spread operators for performance
        const operationWithTypename = {
            kind: operation.kind,
            operation: operation.operation,
            name: operation.name,
            variableDefinitions: operation.variableDefinitions,
            directives: operation.directives,
            selectionSet: selectionWithTypename
        };
        const newDefinitions = new Array(document.definitions.length);
        for(let i = 0; i < document.definitions.length; i++){
            const d = document.definitions[i];
            if (d.kind === graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.OPERATION_DEFINITION) {
                newDefinitions[i] = operationWithTypename;
            } else if (d.kind === graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.FRAGMENT_DEFINITION) {
                const fragWithTypename = ensureTypenameRecursive(d.selectionSet);
                newDefinitions[i] = {
                    kind: d.kind,
                    name: d.name,
                    typeCondition: d.typeCondition,
                    directives: d.directives,
                    selectionSet: fragWithTypename
                };
            } else {
                newDefinitions[i] = d;
            }
        }
        const docWithTypename = {
            kind: document.kind,
            definitions: newDefinitions
        };
        const networkQuery = buildNetworkQuery(docWithTypename);
        // Compute plan metadata (id, varMask, makeVarsKey, windowArgs)
        const metadata = computePlanMetadata(root, operation.selectionSet, fragmentsByName, operation.operation, rootTypename);
        return {
            kind: "CachePlan",
            operation: operation.operation,
            rootTypename,
            root,
            rootSelectionMap,
            networkQuery,
            id: metadata.id,
            varMask: metadata.varMask,
            makeVarsKey: metadata.makeVarsKey,
            makeSignature: metadata.makeSignature,
            getDependencies: metadata.getDependencies,
            windowArgs: metadata.windowArgs,
            selectionFingerprint: metadata.selectionFingerprint
        };
    }
    // Fragment path (single or multiple)
    const fragmentDefs = document.definitions.filter((d)=>d.kind === graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.FRAGMENT_DEFINITION);
    if (fragmentDefs.length >= 1) {
        let frag;
        if (fragmentDefs.length === 1) {
            frag = fragmentDefs[0];
        } else {
            if (!(opts === null || opts === void 0 ? void 0 : opts.fragmentName)) {
                const names = fragmentDefs.map((f)=>f.name.value).join(", ");
                throw new Error(`compilePlan: document contains multiple fragments [${names}]; ` + 'pass { fragmentName: "<one-of>" }');
            }
            frag = fragmentDefs.find((f)=>f.name.value === opts.fragmentName);
            if (!frag) {
                const names = fragmentDefs.map((f)=>f.name.value).join(", ");
                throw new Error(`compilePlan: fragment "${opts.fragmentName}" not found. ` + `Available: [${names}]`);
            }
        }
        const parentTypename = frag.typeCondition.name.value;
        // For fragments, ensure __typename is in ALL selections recursively (unlike operations where we skip root __typename)
        const fragSelectionWithTypename = ensureTypenameRecursive(frag.selectionSet);
        const root = (0,_lowering_flatten__WEBPACK_IMPORTED_MODULE_0__.lowerSelectionSet)(fragSelectionWithTypename, parentTypename, fragmentsByName);
        const rootSelectionMap = indexByResponseKey(root);
        // Build network-safe doc with __typename added to ALL fragments
        // Just need to strip @connection directives
        const newDefinitions = new Array(document.definitions.length);
        for(let i = 0; i < document.definitions.length; i++){
            const d = document.definitions[i];
            if (d.kind === graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.FRAGMENT_DEFINITION) {
                const fragWithTypename = ensureTypenameRecursive(d.selectionSet);
                newDefinitions[i] = {
                    kind: d.kind,
                    name: d.name,
                    typeCondition: d.typeCondition,
                    directives: d.directives,
                    selectionSet: fragWithTypename
                };
            } else {
                newDefinitions[i] = d;
            }
        }
        const docWithTypename = {
            kind: document.kind,
            definitions: newDefinitions
        };
        const networkQuery = buildNetworkQuery(docWithTypename);
        // Compute plan metadata (id, varMask, makeVarsKey, windowArgs)
        const metadata = computePlanMetadata(root, frag.selectionSet, fragmentsByName, "fragment", parentTypename);
        return {
            kind: "CachePlan",
            operation: "fragment",
            rootTypename: parentTypename,
            root,
            rootSelectionMap,
            networkQuery,
            id: metadata.id,
            varMask: metadata.varMask,
            makeVarsKey: metadata.makeVarsKey,
            makeSignature: metadata.makeSignature,
            getDependencies: metadata.getDependencies,
            windowArgs: metadata.windowArgs,
            selectionFingerprint: metadata.selectionFingerprint
        };
    }
    throw new Error("compilePlan: document has no OperationDefinition.");
};


}),
"../cachebay/src/compiler/fingerprint.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  fingerprintField: () => (fingerprintField),
  fingerprintPlan: () => (fingerprintPlan),
  hashFingerprint: () => (hashFingerprint)
});
/**
 * Fast 32-bit FNV-1a hash for strings.
 * Produces stable numeric IDs from selection fingerprints.
 */ const fnv1a32 = (str)=>{
    let hash = 2166136261; // FNV offset basis
    for(let i = 0; i < str.length; i++){
        hash ^= str.charCodeAt(i);
        hash = Math.imul(hash, 16777619); // FNV prime
    }
    return hash >>> 0; // unsigned 32-bit
};
/**
 * Build a stable fingerprint for a field subtree.
 * Includes: responseKey, fieldName, typeCondition, isConnection, arg names (not values),
 * and recursively child selections.
 */ const fingerprintField = (field, argNames)=>{
    const parts = [
        field.responseKey,
        field.fieldName
    ];
    if (field.typeCondition) {
        parts.push(`@${field.typeCondition}`);
    }
    if (field.isConnection) {
        parts.push("@connection");
    }
    if (argNames.length > 0) {
        // Sort arg names for stability
        parts.push(`(${argNames.slice().sort().join(",")})`);
    }
    if (field.selectionSet && field.selectionSet.length > 0) {
        // Sort children by responseKey, then fieldName for order-insensitive fingerprints
        const sortedChildren = field.selectionSet.slice().sort((a, b)=>{
            const cmp = a.responseKey.localeCompare(b.responseKey);
            return cmp !== 0 ? cmp : a.fieldName.localeCompare(b.fieldName);
        });
        const childFingerprints = sortedChildren.map((child)=>child.selId || "");
        parts.push(`{${childFingerprints.join(",")}}`);
    }
    return parts.join(":");
};
/**
 * Build a stable fingerprint for the entire plan root.
 * This is the basis for plan.id.
 * Includes operation and rootTypename to prevent collisions between different roots.
 */ const fingerprintPlan = (root, operation, rootTypename)=>{
    // Sort root fields by responseKey, then fieldName for order-insensitive fingerprints
    const sortedRoot = root.slice().sort((a, b)=>{
        const cmp = a.responseKey.localeCompare(b.responseKey);
        return cmp !== 0 ? cmp : a.fieldName.localeCompare(b.fieldName);
    });
    const rootFingerprints = sortedRoot.map((field)=>field.selId || "");
    return `${operation}:${rootTypename}:[${rootFingerprints.join(",")}]`;
};
/**
 * Compute a stable numeric ID from a fingerprint string.
 */ const hashFingerprint = (fingerprint)=>{
    return fnv1a32(fingerprint);
};


}),
"../cachebay/src/compiler/index.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  compilePlan: () => (/* reexport safe */ _compile__WEBPACK_IMPORTED_MODULE_1__.compilePlan),
  isCachePlan: () => (/* reexport safe */ _utils__WEBPACK_IMPORTED_MODULE_0__.isCachePlan)
});
/* ESM import */var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../cachebay/src/compiler/utils.ts");
/* ESM import */var _compile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../cachebay/src/compiler/compile.ts");




}),
"../cachebay/src/compiler/lowering/flatten.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  lowerSelectionSet: () => (lowerSelectionSet)
});
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs");
/* ESM import */var _fingerprint__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../cachebay/src/compiler/fingerprint.ts");
/* ESM import */var _variables__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../cachebay/src/compiler/variables.ts");



/* ────────────────────────────────────────────────────────────────────────── */ /* helpers                                                                   */ /* ────────────────────────────────────────────────────────────────────────── */ const indexByResponseKey = (fields)=>{
    if (!fields || fields.length === 0) return undefined;
    const m = new Map();
    for(let i = 0; i < fields.length; i++)m.set(fields[i].responseKey, fields[i]);
    return m;
};
/** infer child parent typename from inline fragments / spreads when unambiguous */ const inferChildParentTypename = (selectionSet, defaultParent, fragmentsByName)=>{
    const typeNames = new Set();
    for (const sel of selectionSet.selections){
        if (sel.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.INLINE_FRAGMENT && sel.typeCondition) {
            typeNames.add(sel.typeCondition.name.value);
        } else if (sel.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.FRAGMENT_SPREAD) {
            const frag = fragmentsByName.get(sel.name.value);
            if (frag) typeNames.add(frag.typeCondition.name.value);
        }
    }
    return typeNames.size === 1 ? Array.from(typeNames)[0] : defaultParent;
};
/** resolve a ValueNode to JS (vars is a flat dictionary) */ const valueToJS = (node, vars)=>{
    switch(node.kind){
        case graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.NULL:
            return null;
        case graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.INT:
        case graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.FLOAT:
            return Number(node.value);
        case graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.STRING:
            return node.value;
        case graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.BOOLEAN:
            return node.value;
        case graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.ENUM:
            return node.value;
        case graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.LIST:
            return node.values.map((v)=>valueToJS(v, vars));
        case graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.OBJECT:
            {
                const o = {};
                for (const f of node.fields)o[f.name.value] = valueToJS(f.value, vars);
                return o;
            }
        case graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.VARIABLE:
            return vars ? vars[node.name.value] : undefined;
        default:
            return undefined;
    }
};
/** compile argument resolver from field arguments */ const compileArgBuilder = (args)=>{
    const entries = (args || []).map((a)=>[
            a.name.value,
            a.value
        ]);
    const expectedArgNames = entries.map(([k])=>k);
    const buildArgs = (vars)=>{
        if (!entries.length) return {};
        const out = {};
        for(let i = 0; i < entries.length; i++){
            const [k, v] = entries[i];
            const val = valueToJS(v, vars);
            if (val !== undefined) out[k] = val;
        }
        return out;
    };
    return {
        buildArgs,
        expectedArgNames
    };
};
/**
 * Fast stringify for common primitive types (avoids JSON.stringify overhead)
 */ const fastStringify = (value)=>{
    const type = typeof value;
    if (type === "string") return '"' + value + '"';
    if (type === "number") return String(value);
    if (type === "boolean") return value ? "true" : "false";
    if (value === null) return "null";
    // Fallback to JSON.stringify for arrays/objects
    return JSON.stringify(value);
};
/**
 * Compile a fast stringifyArgs function using precomputed arg order.
 * This avoids the need for stableStringify by iterating args in a fixed order.
 * Optimized with pre-stringified arg names and fast primitive stringification.
 */ const compileStringifyArgs = (buildArgs, expectedArgNames)=>{
    if (expectedArgNames.length === 0) {
        return ()=>"";
    }
    // Pre-stringify arg names at compile time (only once)
    const stringifiedArgNames = expectedArgNames.map((name)=>'"' + name + '":');
    return (vars)=>{
        const args = buildArgs(vars);
        const parts = [];
        for(let i = 0; i < expectedArgNames.length; i++){
            const value = args[expectedArgNames[i]];
            if (value !== undefined) {
                parts.push(stringifiedArgNames[i] + fastStringify(value));
            }
        }
        return "{" + parts.join(",") + "}";
    };
};
/** read @connection(key, filters, mode) on a field */ const parseConnectionDirective = (field)=>{
    if (!field.directives) return {
        isConnection: false
    };
    const dir = field.directives.find((d)=>d.name.value === "connection");
    if (!dir) return {
        isConnection: false
    };
    let key;
    let filters;
    let mode;
    for (const arg of dir.arguments || []){
        const name = arg.name.value;
        if (name === "key") {
            const v = valueToJS(arg.value);
            if (typeof v === "string" && v.trim()) key = v.trim();
        } else if (name === "filters") {
            const v = valueToJS(arg.value);
            if (Array.isArray(v)) {
                filters = v.map((s)=>String(s)).filter(Boolean);
            }
        } else if (name === "mode") {
            const v = String(valueToJS(arg.value));
            if (v === "infinite" || v === "page") mode = v;
        }
    }
    return {
        isConnection: true,
        key,
        filters,
        // ✅ default to "infinite"
        mode: mode ?? "infinite"
    };
};
/* ────────────────────────────────────────────────────────────────────────── */ /* main lowering                                                              */ /* ────────────────────────────────────────────────────────────────────────── */ /**
 * Lower a GraphQL SelectionSet into PlanField[].
 * `guardType` is the active inline-fragment/fragment-spread type condition to apply
 * to produced fields (so runtime can skip mismatched implementors).
 */ const lowerSelectionSet = (selectionSet, parentTypename, fragmentsByName, guardType)=>{
    if (!selectionSet) return [];
    const out = [];
    for (const sel of selectionSet.selections){
        // Field
        if (sel.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.FIELD) {
            var _fieldNode_alias, _fieldNode_directives;
            const fieldNode = sel;
            const responseKey = ((_fieldNode_alias = fieldNode.alias) === null || _fieldNode_alias === void 0 ? void 0 : _fieldNode_alias.value) || fieldNode.name.value;
            const fieldName = fieldNode.name.value;
            // child plan
            let childPlan = null;
            let childMap;
            if (fieldNode.selectionSet) {
                const childParent = inferChildParentTypename(fieldNode.selectionSet, parentTypename, fragmentsByName);
                // propagate current guardType down the tree
                childPlan = lowerSelectionSet(fieldNode.selectionSet, childParent, fragmentsByName, guardType);
                childMap = indexByResponseKey(childPlan);
            }
            // args
            const { buildArgs, expectedArgNames } = compileArgBuilder(fieldNode.arguments || []);
            const stringifyArgs = compileStringifyArgs(buildArgs, expectedArgNames);
            // connection directive (+ defaults)
            let isConnection = false;
            let connectionKey;
            let connectionFilters;
            let connectionMode;
            let pageArgs;
            if ((_fieldNode_directives = fieldNode.directives) === null || _fieldNode_directives === void 0 ? void 0 : _fieldNode_directives.some((d)=>d.name.value === "connection")) {
                const meta = parseConnectionDirective(fieldNode);
                isConnection = meta.isConnection;
                connectionKey = meta.key || fieldName;
                // If filters not provided: infer from field args excluding pagination args.
                const paginationArgs = new Set([
                    "first",
                    "last",
                    "after",
                    "before"
                ]);
                if (meta.filters && meta.filters.length > 0) {
                    connectionFilters = meta.filters.slice();
                } else {
                    connectionFilters = (fieldNode.arguments || []).map((a)=>a.name.value).filter((n)=>!paginationArgs.has(n));
                }
                connectionMode = meta.mode || "infinite"; // meta already defaults; keep for clarity
                // Collect window/pagination args for this connection
                pageArgs = (fieldNode.arguments || []).map((a)=>a.name.value).filter((n)=>paginationArgs.has(n));
            }
            // Collect arg names and vars for fingerprinting
            const { argNames } = (0,_variables__WEBPACK_IMPORTED_MODULE_1__.collectFieldVars)(fieldNode);
            // Build the field object first (without selId)
            const planField = {
                responseKey,
                fieldName,
                selectionSet: childPlan,
                selectionMap: childMap,
                buildArgs,
                stringifyArgs,
                expectedArgNames,
                isConnection,
                connectionKey,
                connectionFilters,
                connectionMode,
                typeCondition: guardType,
                pageArgs
            };
            // Compute stable fingerprint for this field subtree
            planField.selId = (0,_fingerprint__WEBPACK_IMPORTED_MODULE_0__.fingerprintField)(planField, argNames);
            out.push(planField);
            continue;
        }
        // Inline fragment
        if (sel.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.INLINE_FRAGMENT) {
            const ifrag = sel;
            const nextParent = ifrag.typeCondition ? ifrag.typeCondition.name.value : parentTypename;
            // If the fragment has a type condition, it *becomes* the active guard for its subtree.
            const nextGuard = ifrag.typeCondition ? ifrag.typeCondition.name.value : guardType;
            const lowered = lowerSelectionSet(ifrag.selectionSet, nextParent, fragmentsByName, nextGuard);
            for(let i = 0; i < lowered.length; i++)out.push(lowered[i]);
            continue;
        }
        // Fragment spread
        if (sel.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.FRAGMENT_SPREAD) {
            const spread = sel;
            const frag = fragmentsByName.get(spread.name.value);
            if (!frag) continue;
            const nextParent = frag.typeCondition.name.value;
            const nextGuard = frag.typeCondition.name.value; // spreads always carry a type condition
            const lowered = lowerSelectionSet(frag.selectionSet, nextParent, fragmentsByName, nextGuard);
            for(let i = 0; i < lowered.length; i++)out.push(lowered[i]);
            continue;
        }
    }
    return out;
};


}),
"../cachebay/src/compiler/utils.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  buildConnectionCanonicalKey: () => (buildConnectionCanonicalKey),
  buildConnectionKey: () => (buildConnectionKey),
  buildFieldKey: () => (buildFieldKey),
  isCachePlan: () => (isCachePlan)
});
const isCachePlan = (v)=>{
    return v && typeof v === "object" && v.kind === "CachePlan";
};
// Connection pagination fields (Relay spec)
const CONNECTION_FIELDS = new Set([
    "first",
    "last",
    "after",
    "before"
]);
const ROOT_ID = "@";
/**
 * Stable JSON stringify with sorted keys for consistent output.
 */ const stableStringify = (object)=>{
    const walk = (object)=>{
        if (object === null || typeof object !== "object") {
            return object;
        }
        if (Array.isArray(object)) {
            return object.map(walk);
        }
        const result = {};
        const keys = Object.keys(object).sort();
        for(let i = 0; i < keys.length; i++){
            const key = keys[i];
            result[key] = walk(object[key]);
        }
        return result;
    };
    try {
        return JSON.stringify(walk(object));
    } catch  {
        return "";
    }
};
/**
 * Build a field link key used on a record snapshot, e.g.:
 *   user({"id":"u1"})
 *
 * NOTE: `field.stringifyArgs(vars)` expects RAW variables; it internally runs the compiled
 * `buildArgs` to map variable names → field-arg names and drops undefined.
 */ const buildFieldKey = (field, variables)=>{
    const args = field.stringifyArgs(variables);
    return args === "" || args === "{}" ? field.fieldName : `${field.fieldName}(${args})`;
};
/**
 * Build a connection key for a specific page, e.g.:
 *   @.posts({"category":"tech","first":10,"after":"c1"})
 *   @.User:u1.posts({"first":10,"after":"p2"})
 */ const buildConnectionKey = (field, parentId, variables)=>{
    // parentId can be "@", "Type:id", "Type:id.container", or already absolute like "@.X.Y"
    const base = parentId[0] === ROOT_ID ? parentId : `${ROOT_ID}.${parentId}`;
    return `${base}.${field.fieldName}(${field.stringifyArgs(variables)})`;
};
/**
 * Build the canonical connection key (filters-only identity) under the `@connection.` namespace, e.g.:
 *   @connection.posts({"category":"tech"})
 *   @connection.User:u1.posts({"category":"tech","sort":"hot"})
 *
 * - Uses `field.connectionKey` (directive key) when available; falls back to the field name.
 * - If `field.connectionFilters` is present, use only those arg names (when present in args).
 * - Otherwise, include all non-pagination args derived from `buildArgs(vars)`.
 */ const buildConnectionCanonicalKey = (field, parentId, variables)=>{
    const allArgs = field.buildArgs(variables) || {};
    const identity = {};
    // Compiler always sets connectionFilters as an array (explicit or inferred)
    // Note: Explicit filters from @connection directive could include pagination fields,
    // so we must filter them out here
    if (field.connectionFilters) {
        for(let i = 0; i < field.connectionFilters.length; i++){
            const name = field.connectionFilters[i];
            if (CONNECTION_FIELDS.has(name)) continue; // Skip pagination fields
            if (name in allArgs) identity[name] = allArgs[name];
        }
    }
    const keyPart = field.connectionKey || field.fieldName; // prefer directive key; fallback to field
    const parentPart = parentId === ROOT_ID ? "@connection." : `@connection.${parentId}.`;
    return `${parentPart}${keyPart}(${stableStringify(identity)})`;
};


}),
"../cachebay/src/compiler/variables.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  collectFieldVars: () => (collectFieldVars),
  collectPlanVars: () => (collectPlanVars),
  collectVarsFromSelectionSet: () => (collectVarsFromSelectionSet),
  makeMaskedVarsKeyFn: () => (makeMaskedVarsKeyFn)
});
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs");

/**
 * Extract all variable names referenced in a ValueNode (recursively).
 */ const collectVarsFromValue = (node, out)=>{
    switch(node.kind){
        case graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.VARIABLE:
            out.add(node.name.value);
            break;
        case graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.LIST:
            for (const v of node.values)collectVarsFromValue(v, out);
            break;
        case graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.OBJECT:
            for (const f of node.fields)collectVarsFromValue(f.value, out);
            break;
    }
};
/**
 * Collect all variable names used in arguments for a single field.
 * Returns both the full set and the arg names (for fingerprinting).
 */ const collectFieldVars = (fieldNode)=>{
    const vars = new Set();
    const argNames = [];
    if (fieldNode.arguments) {
        for (const arg of fieldNode.arguments){
            argNames.push(arg.name.value);
            collectVarsFromValue(arg.value, vars);
        }
    }
    return {
        vars,
        argNames
    };
};
/**
 * Recursively collect all variables used in a PlanField tree.
 * Also collects window args from connection fields.
 */ const collectPlanVars = (fields)=>{
    const strictVars = new Set();
    const windowArgs = new Set();
    const walk = (field)=>{
        // Collect vars from this field's args (already compiled, but we need the raw AST)
        // Since we don't have the raw AST here, we'll rely on the field's pageArgs
        // which were computed during lowering.
        if (field.isConnection && field.pageArgs) {
            for (const arg of field.pageArgs){
                windowArgs.add(arg);
            }
        }
        if (field.selectionSet) {
            for (const child of field.selectionSet){
                walk(child);
            }
        }
    };
    for (const field of fields){
        walk(field);
    }
    return {
        strictVars,
        windowArgs
    };
};
/**
 * Collect all variable names from a SelectionSet AST (recursively).
 * This walks the raw AST before lowering.
 */ const collectVarsFromSelectionSet = (selectionSet, fragmentsByName, visited = new Set())=>{
    const vars = new Set();
    for (const sel of selectionSet.selections){
        if (sel.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.FIELD) {
            const field = sel;
            if (field.arguments) {
                for (const arg of field.arguments){
                    collectVarsFromValue(arg.value, vars);
                }
            }
            if (field.selectionSet) {
                const childVars = collectVarsFromSelectionSet(field.selectionSet, fragmentsByName, visited);
                for (const v of childVars)vars.add(v);
            }
        } else if (sel.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.INLINE_FRAGMENT) {
            const ifrag = sel;
            const childVars = collectVarsFromSelectionSet(ifrag.selectionSet, fragmentsByName, visited);
            for (const v of childVars)vars.add(v);
        } else if (sel.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.FRAGMENT_SPREAD) {
            const spread = sel;
            const fragName = spread.name.value;
            if (!visited.has(fragName)) {
                visited.add(fragName);
                const frag = fragmentsByName.get(fragName);
                if (frag) {
                    const childVars = collectVarsFromSelectionSet(frag.selectionSet, fragmentsByName, visited);
                    for (const v of childVars)vars.add(v);
                }
            }
        }
    }
    return vars;
};
/**
 * Build a precompiled function that extracts masked variables and returns a stable key.
 * This is ultra-fast at runtime: just pick keys, sort, and stringify.
 */ const makeMaskedVarsKeyFn = (strictMask, canonicalMask)=>{
    // Pre-sort masks for stable output
    const strictSorted = strictMask.slice().sort();
    const canonicalSorted = canonicalMask.slice().sort();
    return (mode, vars)=>{
        const mask = mode === "strict" ? strictSorted : canonicalSorted;
        if (mask.length === 0) return "{}";
        const pairs = [];
        for(let i = 0; i < mask.length; i++){
            const k = mask[i];
            if (k in vars) {
                const v = vars[k];
                pairs.push(`${JSON.stringify(k)}:${JSON.stringify(v)}`);
            }
        }
        return `{${pairs.join(",")}}`;
    };
};


}),
"../cachebay/src/core/canonical.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  createCanonical: () => (createCanonical)
});
/* ESM import */var _compiler_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../cachebay/src/compiler/utils.ts");

/**
 * Creates the canonical connection manager that merges paginated data
 * using Relay-style splice-based merging with cursor relationships.
 * Highly optimized for large lists (thousands of items).
 */ const createCanonical = ({ graph, optimistic })=>{
    /**
   * Helper to get cursor index key for a canonical key.
   */ const getCursorIndexKey = (canonicalKey)=>{
        return `${canonicalKey}::cursorIndex`;
    };
    /**
   * Reads cursor index from graph.
   */ const readCursorIndex = (canonicalKey)=>{
        const index = graph.getRecord(getCursorIndexKey(canonicalKey));
        return index || {};
    };
    /**
   * Writes cursor index to graph.
   */ const writeCursorIndex = (canonicalKey, index)=>{
        graph.putRecord(getCursorIndexKey(canonicalKey), index);
    };
    /**
   * Gets cursor from an edge.
   */ const getEdgeCursor = (edgeRef)=>{
        const edge = graph.getRecord(edgeRef);
        return (edge === null || edge === void 0 ? void 0 : edge.cursor) || null;
    };
    /**
   * Builds a cursor-to-index map for O(1) lookups.
   */ const buildCursorIndex = (edgeRefs)=>{
        const index = {};
        for(let i = 0; i < edgeRefs.length; i++){
            const cursor = getEdgeCursor(edgeRefs[i]);
            if (cursor) {
                index[cursor] = i;
            }
        }
        return index;
    };
    /**
   * Finds cursor position using index (O(1)) or fallback to scan (O(N)).
   */ const findCursorIndex = (edgeRefs, cursor, cursorIndex)=>{
        // Try index first (O(1))
        if (cursorIndex && cursor in cursorIndex) {
            return cursorIndex[cursor];
        }
        // Fallback to linear scan (O(N))
        for(let i = 0; i < edgeRefs.length; i++){
            if (getEdgeCursor(edgeRefs[i]) === cursor) {
                return i;
            }
        }
        return -1;
    };
    /**
   * Extracts extra fields from connection (everything except edges, pageInfo, __typename).
   */ const getExtras = (connection)=>{
        const extras = {};
        const keys = Object.keys(connection || {});
        for(let i = 0; i < keys.length; i++){
            const key = keys[i];
            if (key === "edges" || key === "pageInfo" || key === "__typename") {
                continue;
            }
            extras[key] = connection[key];
        }
        return extras;
    };
    /**
   * Detects cursor role from variables (O(1) with buildArgs).
   */ const detectCursorRole = (field, variables)=>{
        const args = field.buildArgs ? field.buildArgs(variables) || {} : variables || {};
        const after = args.after ?? null;
        const before = args.before ?? null;
        const isLeader = !after && !before;
        return {
            after,
            before,
            isLeader
        };
    };
    /**
   * Ensures canonical record exists (prevents undefined reads).
   */ const ensureCanonical = (canonicalKey)=>{
        if (graph.getRecord(canonicalKey)) {
            return;
        }
        const pageInfoKey = `${canonicalKey}.pageInfo`;
        graph.putRecord(pageInfoKey, {
            __typename: "PageInfo",
            startCursor: null,
            endCursor: null,
            hasPreviousPage: false,
            hasNextPage: false
        });
        graph.putRecord(canonicalKey, {
            __typename: "Connection",
            edges: {
                __refs: []
            },
            pageInfo: {
                __ref: pageInfoKey
            }
        });
        writeCursorIndex(canonicalKey, {});
    };
    /**
   * Merges incoming page into canonical using Relay-style splice logic.
   * Handles forward (after), backward (before), and leader (reset) pagination.
   */ const updateConnection = (args)=>{
        var _normalizedPage_edges, _existing_edges, _normalizedPage_pageInfo, _existing_pageInfo;
        const { field, parentId, variables, normalizedPage } = args;
        const canonicalKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_0__.buildConnectionCanonicalKey)(field, parentId, variables);
        ensureCanonical(canonicalKey);
        const incomingEdgeRefs = ((_normalizedPage_edges = normalizedPage.edges) === null || _normalizedPage_edges === void 0 ? void 0 : _normalizedPage_edges.__refs) || [];
        // Page mode: replace entire canonical with incoming page
        if (field.connectionMode === "page") {
            var _normalizedPage_pageInfo1;
            const pageInfoRef = (_normalizedPage_pageInfo1 = normalizedPage.pageInfo) === null || _normalizedPage_pageInfo1 === void 0 ? void 0 : _normalizedPage_pageInfo1.__ref;
            const pageInfoData = pageInfoRef ? graph.getRecord(pageInfoRef) : null;
            const pageInfoKey = `${canonicalKey}.pageInfo`;
            graph.putRecord(pageInfoKey, {
                __typename: (pageInfoData === null || pageInfoData === void 0 ? void 0 : pageInfoData.__typename) || "PageInfo",
                startCursor: (pageInfoData === null || pageInfoData === void 0 ? void 0 : pageInfoData.startCursor) ?? null,
                endCursor: (pageInfoData === null || pageInfoData === void 0 ? void 0 : pageInfoData.endCursor) ?? null,
                hasPreviousPage: !!(pageInfoData === null || pageInfoData === void 0 ? void 0 : pageInfoData.hasPreviousPage),
                hasNextPage: !!(pageInfoData === null || pageInfoData === void 0 ? void 0 : pageInfoData.hasNextPage)
            });
            graph.putRecord(canonicalKey, {
                __typename: normalizedPage.__typename || "Connection",
                edges: {
                    __refs: incomingEdgeRefs
                },
                pageInfo: {
                    __ref: pageInfoKey
                },
                ...getExtras(normalizedPage)
            });
            writeCursorIndex(canonicalKey, buildCursorIndex(incomingEdgeRefs));
            optimistic.replayOptimistic({
                connections: [
                    canonicalKey
                ]
            });
            return;
        }
        // Infinite mode: merge using cursor relationships
        const { after, before, isLeader } = detectCursorRole(field, variables);
        // Cache existing data
        const existing = graph.getRecord(canonicalKey);
        const existingEdges = (existing === null || existing === void 0 ? void 0 : (_existing_edges = existing.edges) === null || _existing_edges === void 0 ? void 0 : _existing_edges.__refs) || [];
        const existingCursorIndex = readCursorIndex(canonicalKey);
        const incomingPageInfo = graph.getRecord((_normalizedPage_pageInfo = normalizedPage.pageInfo) === null || _normalizedPage_pageInfo === void 0 ? void 0 : _normalizedPage_pageInfo.__ref) || {};
        // Determine splice indices (no array allocations yet)
        let prefixEnd = 0;
        let suffixStart = 0;
        let isPureAppend = false;
        let isPurePrepend = false;
        if (isLeader) {
            // Leader: reset everything (discard all existing edges)
            prefixEnd = 0;
            suffixStart = existingEdges.length; // Start suffix past the end = no suffix
        } else if (after) {
            const idx = findCursorIndex(existingEdges, after, existingCursorIndex);
            if (idx >= 0) {
                prefixEnd = idx + 1;
                suffixStart = existingEdges.length;
                isPureAppend = idx === existingEdges.length - 1;
            } else {
                // Cursor not found - append to end
                prefixEnd = existingEdges.length;
                suffixStart = existingEdges.length;
                isPureAppend = true;
            }
        } else if (before) {
            const idx = findCursorIndex(existingEdges, before, existingCursorIndex);
            if (idx >= 0) {
                prefixEnd = 0;
                suffixStart = idx;
                isPurePrepend = idx === 0;
            } else {
                // Cursor not found - prepend to start
                prefixEnd = 0;
                suffixStart = 0;
                isPurePrepend = true;
            }
        }
        // Calculate total size and preallocate
        const prefixLen = prefixEnd;
        const suffixLen = existingEdges.length - suffixStart;
        const totalLen = prefixLen + incomingEdgeRefs.length + suffixLen;
        const mergedEdges = new Array(totalLen);
        // Copy ranges directly into preallocated array
        let writePos = 0;
        for(let i = 0; i < prefixEnd; i++){
            mergedEdges[writePos++] = existingEdges[i];
        }
        for(let i = 0; i < incomingEdgeRefs.length; i++){
            mergedEdges[writePos++] = incomingEdgeRefs[i];
        }
        for(let i = suffixStart; i < existingEdges.length; i++){
            mergedEdges[writePos++] = existingEdges[i];
        }
        // Build or update cursor index (copy-on-write optimization)
        let newCursorIndex = existingCursorIndex;
        let copied = false;
        const ensureCopy = ()=>{
            if (!copied) {
                newCursorIndex = {
                    ...existingCursorIndex
                };
                copied = true;
            }
        };
        if (isPureAppend && Object.keys(existingCursorIndex).length > 0) {
            // Incremental append: extend existing index
            let pos = existingEdges.length;
            for(let i = 0; i < incomingEdgeRefs.length; i++){
                const cursor = getEdgeCursor(incomingEdgeRefs[i]);
                if (cursor) {
                    ensureCopy();
                    newCursorIndex[cursor] = pos++;
                }
            }
        } else if (isPurePrepend && Object.keys(existingCursorIndex).length > 0) {
            // Incremental prepend: shift existing indices
            newCursorIndex = {};
            copied = true;
            const shift = incomingEdgeRefs.length;
            const existingKeys = Object.keys(existingCursorIndex);
            for(let i = 0; i < existingKeys.length; i++){
                const key = existingKeys[i];
                newCursorIndex[key] = existingCursorIndex[key] + shift;
            }
            for(let i = 0; i < incomingEdgeRefs.length; i++){
                const cursor = getEdgeCursor(incomingEdgeRefs[i]);
                if (cursor) {
                    newCursorIndex[cursor] = i;
                }
            }
        } else {
            // General case: rebuild full index
            newCursorIndex = {};
            copied = true;
            for(let i = 0; i < mergedEdges.length; i++){
                const cursor = getEdgeCursor(mergedEdges[i]);
                if (cursor) {
                    newCursorIndex[cursor] = i;
                }
            }
        }
        // Write cursor index only if changed
        if (copied) {
            writeCursorIndex(canonicalKey, newCursorIndex);
        }
        // Build pageInfo
        const existingPageInfo = graph.getRecord(existing === null || existing === void 0 ? void 0 : (_existing_pageInfo = existing.pageInfo) === null || _existing_pageInfo === void 0 ? void 0 : _existing_pageInfo.__ref) || {};
        // Extract boundary fields from incoming
        const { hasPreviousPage, hasNextPage, startCursor, endCursor, __typename, ...incomingPageInfoExtras } = incomingPageInfo;
        // Start from existing, apply incoming extras
        const pageInfo = {
            __typename,
            ...existingPageInfo,
            ...incomingPageInfoExtras
        };
        // Track if boundaries changed
        let boundariesChanged = false;
        // Override boundary fields based on position (Relay logic)
        if (prefixLen === 0) {
            if (hasPreviousPage !== undefined) {
                const newVal = !!hasPreviousPage;
                if (pageInfo.hasPreviousPage !== newVal) {
                    pageInfo.hasPreviousPage = newVal;
                    boundariesChanged = true;
                }
            }
            if (startCursor !== undefined) {
                if (pageInfo.startCursor !== startCursor) {
                    pageInfo.startCursor = startCursor;
                    boundariesChanged = true;
                }
            }
        }
        if (suffixLen === 0) {
            if (hasNextPage !== undefined) {
                const newVal = !!hasNextPage;
                if (pageInfo.hasNextPage !== newVal) {
                    pageInfo.hasNextPage = newVal;
                    boundariesChanged = true;
                }
            }
            if (endCursor !== undefined) {
                if (pageInfo.endCursor !== endCursor) {
                    pageInfo.endCursor = endCursor;
                    boundariesChanged = true;
                }
            }
        }
        // Fallback: infer cursors from edges if missing
        if (pageInfo.startCursor == null && mergedEdges.length > 0) {
            const firstEdgeCursor = getEdgeCursor(mergedEdges[0]);
            if (firstEdgeCursor) {
                pageInfo.startCursor = firstEdgeCursor;
                boundariesChanged = true;
            }
        }
        if (pageInfo.endCursor == null && mergedEdges.length > 0) {
            const lastEdgeCursor = getEdgeCursor(mergedEdges[mergedEdges.length - 1]);
            if (lastEdgeCursor) {
                pageInfo.endCursor = lastEdgeCursor;
                boundariesChanged = true;
            }
        }
        // Ensure pageInfo has required fields
        pageInfo.__typename = pageInfo.__typename || "PageInfo";
        pageInfo.startCursor = pageInfo.startCursor ?? null;
        pageInfo.endCursor = pageInfo.endCursor ?? null;
        pageInfo.hasPreviousPage = !!pageInfo.hasPreviousPage;
        pageInfo.hasNextPage = !!pageInfo.hasNextPage;
        // Write pageInfo only if changed
        const pageInfoKey = `${canonicalKey}.pageInfo`;
        if (boundariesChanged || !existingPageInfo) {
            graph.putRecord(pageInfoKey, pageInfo);
        }
        // Merge extra fields (incoming overrides existing)
        const existingExtras = existing ? getExtras(existing) : {};
        const incomingConnectionExtras = getExtras(normalizedPage);
        // Write canonical
        graph.putRecord(canonicalKey, {
            __typename: normalizedPage.__typename || (existing === null || existing === void 0 ? void 0 : existing.__typename) || "Connection",
            edges: {
                __refs: mergedEdges
            },
            pageInfo: {
                __ref: pageInfoKey
            },
            ...existingExtras,
            ...incomingConnectionExtras
        });
        optimistic.replayOptimistic({
            connections: [
                canonicalKey
            ]
        });
    };
    return {
        updateConnection
    };
};


}),
"../cachebay/src/core/client.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  createCachebay: () => (createCachebay)
});
/* ESM import */var _inspect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../cachebay/src/core/inspect.ts");
/* ESM import */var _ssr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../cachebay/src/core/ssr.ts");
/* ESM import */var _canonical__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../cachebay/src/core/canonical.ts");
/* ESM import */var _documents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../cachebay/src/core/documents.ts");
/* ESM import */var _fragments__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../cachebay/src/core/fragments.ts");
/* ESM import */var _graph__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../cachebay/src/core/graph.ts");
/* ESM import */var _optimistic__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../cachebay/src/core/optimistic.ts");
/* ESM import */var _planner__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../cachebay/src/core/planner.ts");
/* ESM import */var _queries__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../cachebay/src/core/queries.ts");
/* ESM import */var _operations__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../cachebay/src/core/operations.ts");










/**
 * Create a new Cachebay cache instance
 * @param options - Configuration options for the cache
 * @returns Configured cache instance with Villus plugin interface
 */ function createCachebay(options) {
    // Validate transport configuration
    if (!options.transport) {
        throw new Error("Cachebay: 'transport' is required. Please provide a transport object with 'http' function.\n" + "Example:\n" + "  createCachebay({\n" + "    transport: {\n" + "      http: async (context) => { /* HTTP implementation */ },\n" + "      ws: async (context) => { /* WebSocket implementation (optional) */ }\n" + "    }\n" + "  })");
    }
    if (typeof options.transport.http !== "function") {
        throw new Error("Cachebay: 'transport.http' must be a function.\n" + "Expected: async (context: HttpContext) => Promise<OperationResult>");
    }
    if (options.transport.ws && typeof options.transport.ws !== "function") {
        throw new Error("Cachebay: 'transport.ws' must be a function if provided.\n" + "Expected: async (context: WsContext) => Promise<ObservableLike<OperationResult>>");
    }
    const planner = (0,_planner__WEBPACK_IMPORTED_MODULE_7__.createPlanner)();
    let documents;
    let queries;
    let fragments;
    const graph = (0,_graph__WEBPACK_IMPORTED_MODULE_5__.createGraph)({
        keys: options.keys || {},
        interfaces: options.interfaces || {},
        onChange: (touchedIds)=>{
            queries.propagateData(touchedIds);
            fragments.propagateData(touchedIds);
        }
    });
    // Now create subsystems with graph
    const optimistic = (0,_optimistic__WEBPACK_IMPORTED_MODULE_6__.createOptimistic)({
        graph
    });
    const ssr = (0,_ssr__WEBPACK_IMPORTED_MODULE_1__.createSSR)({
        hydrationTimeout: options.hydrationTimeout
    }, {
        graph
    });
    const canonical = (0,_canonical__WEBPACK_IMPORTED_MODULE_2__.createCanonical)({
        graph,
        optimistic
    });
    documents = (0,_documents__WEBPACK_IMPORTED_MODULE_3__.createDocuments)({
        graph,
        planner,
        canonical
    });
    fragments = (0,_fragments__WEBPACK_IMPORTED_MODULE_4__.createFragments)({
        graph,
        planner,
        documents
    });
    // Create queries first
    queries = (0,_queries__WEBPACK_IMPORTED_MODULE_8__.createQueries)({
        documents,
        planner
    });
    // Operations (always created since transport is required)
    const operations = (0,_operations__WEBPACK_IMPORTED_MODULE_9__.createOperations)({
        cachePolicy: options.cachePolicy,
        transport: options.transport,
        suspensionTimeout: options.suspensionTimeout,
        onQueryError: (signature, error)=>{
            // Propagate errors to queries, which will notify watchers
            queries.propagateError(signature, error);
        },
        onQueryData: queries.handleQueryExecuted
    }, {
        planner,
        documents,
        ssr
    });
    const inspect = (0,_inspect__WEBPACK_IMPORTED_MODULE_0__.createInspect)({
        graph,
        optimistic
    });
    const cache = {};
    cache.identify = graph.identify;
    // Fragments API
    cache.readFragment = fragments.readFragment;
    cache.writeFragment = fragments.writeFragment;
    cache.watchFragment = fragments.watchFragment;
    // Queries API
    cache.readQuery = queries.readQuery;
    cache.writeQuery = queries.writeQuery;
    cache.watchQuery = queries.watchQuery;
    // Optimistic API
    cache.modifyOptimistic = optimistic.modifyOptimistic;
    // Operations API
    cache.executeQuery = operations.executeQuery;
    cache.executeMutation = operations.executeMutation;
    cache.executeSubscription = operations.executeSubscription;
    // Inspect (debug)
    cache.inspect = inspect;
    // SSR API
    cache.dehydrate = ssr.dehydrate;
    cache.hydrate = ssr.hydrate;
    cache.isHydrating = ssr.isHydrating;
    // Planner
    cache.getPlan = planner.getPlan;
    // Internals for tests
    cache.__internals = {
        graph,
        optimistic,
        planner,
        canonical,
        documents,
        fragments,
        queries,
        operations,
        ssr,
        inspect
    };
    return cache;
}


}),
"../cachebay/src/core/constants.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CONNECTION_FIELDS: () => (CONNECTION_FIELDS),
  IDENTITY_FIELDS: () => (IDENTITY_FIELDS),
  ID_FIELD: () => (ID_FIELD),
  ROOT_ID: () => (ROOT_ID),
  TYPENAME_FIELD: () => (TYPENAME_FIELD)
});
/**
 * Core constants used throughout the cache system
 */ const ROOT_ID = "@";
const ID_FIELD = "id";
const TYPENAME_FIELD = "__typename";
const IDENTITY_FIELDS = new Set([
    "__typename",
    "id"
]);
const CONNECTION_FIELDS = new Set([
    "first",
    "last",
    "after",
    "before"
]);


}),
"../cachebay/src/core/documents.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CONNECTION_MISSING: () => (CONNECTION_MISSING),
  EDGE_NODE_MISSING: () => (EDGE_NODE_MISSING),
  ENTITY_MISSING: () => (ENTITY_MISSING),
  FIELD_LINK_MISSING: () => (FIELD_LINK_MISSING),
  FINGERPRINT_KEY: () => (FINGERPRINT_KEY),
  PAGE_INFO_MISSING: () => (PAGE_INFO_MISSING),
  ROOT_LINK_MISSING: () => (ROOT_LINK_MISSING),
  SCALAR_MISSING: () => (SCALAR_MISSING),
  createDocuments: () => (createDocuments)
});
/* ESM import */var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../cachebay/src/core/utils.ts");
/* ESM import */var _compiler_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../cachebay/src/compiler/utils.ts");
/* ESM import */var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../cachebay/src/core/constants.ts");
/* ESM import */var _instrumentation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../cachebay/src/core/instrumentation.ts");





const ENTITY_MISSING = "entity-missing";
const ROOT_LINK_MISSING = "root-link-missing";
const FIELD_LINK_MISSING = "field-link-missing";
const CONNECTION_MISSING = "connection-missing";
const PAGE_INFO_MISSING = "pageinfo-missing";
const EDGE_NODE_MISSING = "edge-node-missing";
const SCALAR_MISSING = "scalar-missing";
const FINGERPRINT_KEY = "__version";
/**
 * Create documents instance for normalization and materialization
 * Handles writing GraphQL responses to cache and reading them back
 */ const createDocuments = (deps)=>{
    const { graph, planner, canonical } = deps;
    /**
   * WeakMap cache for materialized documents
   * Key: DocumentNode or CachePlan object
   * Value: Map of signature -> MaterializeDocumentResult
   */ const materializeCache = new _utils__WEBPACK_IMPORTED_MODULE_0__.WeakStringMap();
    /**
   * Helper to build materialize cache key
   * For regular queries: use precomputed signature + fingerprint flag
   * For entityId queries: prefix with entityId to ensure separate cache entries
   */ const getMaterializeCacheKey = (options)=>{
        const { signature, fingerprint, entityId } = options;
        const fpFlag = fingerprint ? "f" : "n";
        return entityId ? `entity:${entityId}|${fpFlag}|${signature}` : `${fpFlag}|${signature}`;
    };
    /**
   * Normalize a GraphQL response into the cache
   * Writes entities, connections, and links to the graph store
   */ const normalizeDocument = (options)=>{
        const { document, variables = {}, data, rootId } = options;
        const put = (id, patch)=>{
            graph.putRecord(id, patch);
        };
        const plan = planner.getPlan(document);
        const startId = rootId ?? _constants__WEBPACK_IMPORTED_MODULE_2__.ROOT_ID;
        const shouldLink = startId !== _constants__WEBPACK_IMPORTED_MODULE_2__.ROOT_ID || plan.operation === "query";
        if (startId === _constants__WEBPACK_IMPORTED_MODULE_2__.ROOT_ID) {
            put(_constants__WEBPACK_IMPORTED_MODULE_2__.ROOT_ID, {
                id: _constants__WEBPACK_IMPORTED_MODULE_2__.ROOT_ID,
                __typename: _constants__WEBPACK_IMPORTED_MODULE_2__.ROOT_ID
            });
        }
        const connectionPages = [];
        const initialFrame = {
            parentId: startId,
            fields: plan.root,
            fieldsMap: plan.rootSelectionMap ?? new Map(),
            insideConnection: false,
            pageKey: null
        };
        const writeScalar = (parentId, field, value)=>{
            const fieldKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildFieldKey)(field, variables);
            put(parentId, {
                [fieldKey]: value
            });
        };
        const linkTo = (parentId, field, targetId)=>{
            if (!shouldLink) {
                return;
            }
            const fieldKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildFieldKey)(field, variables);
            put(parentId, {
                [fieldKey]: {
                    __ref: targetId
                }
            });
        };
        const normalizeObjectFields = (obj, frame)=>{
            const keys = Object.keys(obj);
            for(let i = 0; i < keys.length; i++){
                var _frame_fieldsMap;
                const responseKey = keys[i];
                const value = obj[responseKey];
                const field = (_frame_fieldsMap = frame.fieldsMap) === null || _frame_fieldsMap === void 0 ? void 0 : _frame_fieldsMap.get(responseKey);
                normalizeValue(value, responseKey, field, frame);
            }
        };
        const normalizeEdgesArray = (pageKey, edges, edgesField, parentFrame)=>{
            const refs = new Array(edges.length);
            for(let i = 0; i < edges.length; i++){
                refs[i] = `${pageKey}.edges.${i}`;
            }
            put(pageKey, {
                edges: {
                    __refs: refs
                }
            });
            if (!(edgesField === null || edgesField === void 0 ? void 0 : edgesField.selectionSet)) {
                return;
            }
            const edgesSel = edgesField.selectionSet;
            const edgesSelMap = edgesField.selectionMap;
            for(let idx = 0; idx < edges.length; idx++){
                const edgeKey = `${pageKey}.edges.${idx}`;
                const edgeObj = edges[idx];
                const edgePatch = {};
                if (edgeObj && edgeObj.__typename) {
                    edgePatch.__typename = edgeObj.__typename;
                }
                const nodeObj = edgeObj === null || edgeObj === void 0 ? void 0 : edgeObj.node;
                if (nodeObj && typeof nodeObj === "object") {
                    const nodeId = graph.identify(nodeObj);
                    if (nodeId) {
                        edgePatch.node = {
                            __ref: nodeId
                        };
                    }
                }
                put(edgeKey, edgePatch);
                const edgeFrame = {
                    parentId: edgeKey,
                    fields: edgesSel,
                    fieldsMap: edgesSelMap,
                    insideConnection: true,
                    pageKey
                };
                if (edgeObj && typeof edgeObj === "object") {
                    normalizeObjectFields(edgeObj, edgeFrame);
                }
            }
        };
        const normalizeConnection = (value, field, frame)=>{
            const pageKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildConnectionKey)(field, frame.parentId, variables);
            const fieldKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildFieldKey)(field, variables);
            const pageRecord = {};
            if (value === null || value === void 0 ? void 0 : value.__typename) {
                pageRecord.__typename = value.__typename;
            }
            if (value && typeof value === "object") {
                const keys = Object.keys(value);
                for(let i = 0; i < keys.length; i++){
                    const key = keys[i];
                    if (key === "__typename" || key === "edges" || key === "pageInfo") {
                        continue;
                    }
                    const fieldValue = value[key];
                    const isScalarLike = fieldValue === null || typeof fieldValue !== "object";
                    const isInlineObject = fieldValue && typeof fieldValue === "object" && !fieldValue.__typename;
                    if (isScalarLike || Array.isArray(fieldValue) || isInlineObject) {
                        pageRecord[key] = fieldValue;
                    }
                }
            }
            put(pageKey, pageRecord);
            if (shouldLink) {
                put(frame.parentId, {
                    [fieldKey]: {
                        __ref: pageKey
                    }
                });
                connectionPages.push({
                    field,
                    parentId: frame.parentId,
                    pageKey
                });
            }
            const pageInfoObj = value === null || value === void 0 ? void 0 : value.pageInfo;
            if (pageInfoObj && typeof pageInfoObj === "object") {
                const pageInfoKey = `${pageKey}.pageInfo`;
                put(pageKey, {
                    pageInfo: {
                        __ref: pageInfoKey
                    }
                });
                if (pageInfoObj.__typename) {
                    put(pageInfoKey, {
                        __typename: pageInfoObj.__typename
                    });
                } else {
                    put(pageInfoKey, {});
                }
            }
            const nextFrame = {
                parentId: pageKey,
                fields: field.selectionSet,
                fieldsMap: field.selectionMap,
                insideConnection: true,
                pageKey
            };
            if (value && typeof value === "object") {
                normalizeObjectFields(value, nextFrame);
            }
        };
        const normalizeArrayOfObjectsWithSelection = (arr, field, frame)=>{
            const fieldKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildFieldKey)(field, variables);
            const baseKey = `${frame.parentId}.${fieldKey}`;
            const refs = new Array(arr.length);
            for(let i = 0; i < arr.length; i++){
                const item = arr[i];
                const entityId = item && typeof item === "object" ? graph.identify(item) : null;
                const itemKey = entityId ?? `${baseKey}.${i}`;
                if (item && typeof item === "object") {
                    if (item.__typename) {
                        put(itemKey, {
                            __typename: item.__typename
                        });
                    } else {
                        put(itemKey, {});
                    }
                }
                refs[i] = itemKey;
            }
            put(frame.parentId, {
                [fieldKey]: {
                    __refs: refs
                }
            });
            if (!field.selectionSet) {
                return;
            }
            for(let i = 0; i < arr.length; i++){
                const val = arr[i];
                if (!val || typeof val !== "object") {
                    continue;
                }
                const entityId = graph.identify(val);
                const itemKey = entityId ?? `${baseKey}.${i}`;
                const itemFrame = {
                    parentId: itemKey,
                    fields: field.selectionSet,
                    fieldsMap: field.selectionMap,
                    insideConnection: false,
                    pageKey: baseKey
                };
                normalizeObjectFields(val, itemFrame);
            }
        };
        const normalizeArray = (arr, responseKey, field, frame)=>{
            if (frame.insideConnection && responseKey === "edges" && typeof frame.pageKey === "string") {
                normalizeEdgesArray(frame.pageKey, arr, field, frame);
                return;
            }
            if (field && field.selectionSet) {
                normalizeArrayOfObjectsWithSelection(arr, field, frame);
                return;
            }
            if (field && !field.selectionSet) {
                const fieldKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildFieldKey)(field, variables);
                const out = new Array(arr.length);
                for(let i = 0; i < arr.length; i++){
                    out[i] = arr[i];
                }
                put(frame.parentId, {
                    [fieldKey]: out
                });
            }
        };
        const normalizeInlineContainer = (obj, field, frame)=>{
            const containerFieldKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildFieldKey)(field, variables);
            const containerKey = `${frame.parentId}.${containerFieldKey}`;
            if (obj === null || obj === void 0 ? void 0 : obj.__typename) {
                put(containerKey, {
                    __typename: obj.__typename
                });
            } else {
                put(containerKey, {});
            }
            if (shouldLink) {
                put(frame.parentId, {
                    [containerFieldKey]: {
                        __ref: containerKey
                    }
                });
            }
            if (frame.insideConnection && containerFieldKey === "pageInfo" && frame.pageKey) {
                put(frame.pageKey, {
                    pageInfo: {
                        __ref: containerKey
                    }
                });
            }
            const nextFrame = {
                parentId: containerKey,
                fields: field.selectionSet,
                fieldsMap: field.selectionMap,
                insideConnection: frame.insideConnection,
                pageKey: frame.pageKey
            };
            normalizeObjectFields(obj, nextFrame);
        };
        const normalizeEntityObject = (obj, field, frame)=>{
            const entityId = graph.identify(obj);
            if (!entityId) {
                return false;
            }
            if (obj.__typename) {
                put(entityId, {
                    __typename: obj.__typename
                });
            } else {
                put(entityId, {});
            }
            if (field && !(frame.insideConnection && field.responseKey === "node")) {
                linkTo(frame.parentId, field, entityId);
            }
            const fromNode = !!field && field.responseKey === "node";
            const nextFrame = {
                parentId: entityId,
                fields: field === null || field === void 0 ? void 0 : field.selectionSet,
                fieldsMap: field === null || field === void 0 ? void 0 : field.selectionMap,
                insideConnection: fromNode ? false : frame.insideConnection,
                pageKey: fromNode ? null : frame.pageKey
            };
            normalizeObjectFields(obj, nextFrame);
            return true;
        };
        const normalizeValue = (value, responseKey, field, frame)=>{
            if (Array.isArray(value)) {
                normalizeArray(value, responseKey, field, frame);
                return;
            }
            if (value && typeof value === "object") {
                if (field && !field.selectionSet) {
                    writeScalar(frame.parentId, field, value);
                    return;
                }
                if (field && field.isConnection) {
                    normalizeConnection(value, field, frame);
                    return;
                }
                if (normalizeEntityObject(value, field, frame)) {
                    return;
                }
                if (field && field.selectionSet) {
                    normalizeInlineContainer(value, field, frame);
                    return;
                }
                return;
            }
            if (typeof responseKey === "string" && field && !field.selectionSet) {
                writeScalar(frame.parentId, field, value);
            }
        };
        if (data && typeof data === "object") {
            normalizeObjectFields(data, initialFrame);
        }
        if (connectionPages.length > 0) {
            for(let i = 0; i < connectionPages.length; i++){
                const { field, parentId, pageKey } = connectionPages[i];
                const normalizedPage = graph.getRecord(pageKey);
                if (!normalizedPage) {
                    continue;
                }
                canonical.updateConnection({
                    field,
                    parentId,
                    variables,
                    pageKey,
                    normalizedPage
                });
            }
        }
    };
    /**
   * Materialize a document from cache
   * Reads normalized data and reconstructs the GraphQL response shape
   *
   * @param options.force - If false (default), returns cached result if available. If true, always re-materializes.
   */ const materializeDocument = (options)=>{
        const { document, variables = {}, canonical = true, entityId, fingerprint = true, force = false } = options;
        // Get plan once at the start
        const plan = planner.getPlan(document);
        const strictSignature = plan.makeSignature(false, variables);
        const canonicalSignature = canonical ? plan.makeSignature(true, variables) : undefined;
        const cacheKey = getMaterializeCacheKey({
            signature: canonical ? canonicalSignature : strictSignature,
            fingerprint,
            entityId
        });
        if (!force) {
            let cached = materializeCache.get(cacheKey);
            if (cached) {
                cached.hot = true;
                return cached;
            }
        }
        graph.flush();
        const dependencies = new Set();
        const touch = (id)=>{
            dependencies.add(id);
        };
        let strictOK = true;
        let canonicalOK = true;
        const misses = [];
        const miss = _instrumentation__WEBPACK_IMPORTED_MODULE_3__.__DEV__ ? (m)=>{
            misses.push(m);
        } : (_)=>{};
        const addPath = _instrumentation__WEBPACK_IMPORTED_MODULE_3__.__DEV__ ? (base, seg)=>base ? base + "." + seg : seg : (_base, _seg)=>"";
        const selectionAppliesToRuntime = (field, runtimeType)=>{
            const one = field.typeCondition || field.onType || field.typeName;
            if (one != null) {
                if (runtimeType == null) return true;
                if (runtimeType === one) return true;
                return graph.getImplementers(one).has(runtimeType);
            }
            const many = field.typeConditions || field.onTypes || field.typeNames;
            if (Array.isArray(many)) {
                if (runtimeType == null) return true;
                for(let i = 0; i < many.length; i++){
                    const expected = many[i];
                    if (runtimeType === expected || graph.getImplementers(expected).has(runtimeType)) {
                        return true;
                    }
                }
                return false;
            }
            return true;
        };
        const setFingerprint = (obj, fp)=>{
            if (!fingerprint) {
                return;
            }
            if (Array.isArray(obj)) {
                Object.defineProperty(obj, FINGERPRINT_KEY, {
                    value: fp,
                    writable: true,
                    enumerable: false,
                    configurable: true
                });
            } else {
                obj[FINGERPRINT_KEY] = fp;
            }
        };
        const getFingerprint = (obj)=>{
            if (!fingerprint) {
                return undefined;
            }
            return obj[FINGERPRINT_KEY];
        };
        const readScalar = (record, field, out, outKey, parentId, path)=>{
            if (field.fieldName === "__typename") {
                const typeName = record ? record.__typename : undefined;
                out[outKey] = typeName;
                return;
            }
            const storeKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildFieldKey)(field, variables);
            const value = record ? record[storeKey] : undefined;
            if (value === undefined && _instrumentation__WEBPACK_IMPORTED_MODULE_3__.__DEV__) {
                miss({
                    kind: SCALAR_MISSING,
                    at: path,
                    parentId,
                    fieldKey: storeKey
                });
            }
            out[outKey] = value;
        };
        const readPageInfo = (pageInfoId, field, outConn, path)=>{
            touch(pageInfoId);
            const record = graph.getRecord(pageInfoId) || {};
            const selection = field.selectionSet || [];
            const outPageInfo = {};
            for(let i = 0; i < selection.length; i++){
                const f = selection[i];
                if (f.selectionSet) {
                    continue;
                }
                readScalar(record, f, outPageInfo, f.responseKey, pageInfoId, addPath(path, f.responseKey));
            }
            outConn.pageInfo = outPageInfo;
            const pageInfoVersion = graph.getVersion(pageInfoId);
            setFingerprint(outPageInfo, pageInfoVersion);
            return pageInfoVersion;
        };
        const readEntity = (id, field, out, path)=>{
            touch(id);
            const record = graph.getRecord(id);
            if (!record) {
                strictOK = false;
                canonicalOK = false;
                miss({
                    kind: ENTITY_MISSING,
                    at: path,
                    id
                });
            }
            const snapshot = record || {};
            if (snapshot.__typename !== undefined) {
                out.__typename = snapshot.__typename;
            }
            const runtimeType = snapshot.__typename;
            const selection = field.selectionSet || [];
            const childFingerprints = [];
            for(let i = 0; i < selection.length; i++){
                const childField = selection[i];
                const outKey = childField.responseKey;
                if (!selectionAppliesToRuntime(childField, runtimeType)) {
                    continue;
                }
                if (childField.isConnection) {
                    readConnection(id, childField, out, outKey, addPath(path, outKey));
                    const connObj = out[outKey];
                    if (connObj && typeof connObj === "object") {
                        const fp = getFingerprint(connObj);
                        if (fp !== undefined) childFingerprints.push(fp);
                    }
                    continue;
                }
                if (childField.selectionSet && childField.selectionSet.length) {
                    const storeKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildFieldKey)(childField, variables);
                    const link = snapshot[storeKey];
                    if (link != null && Array.isArray(link.__refs)) {
                        const refs = link.__refs;
                        const outArray = new Array(refs.length);
                        out[outKey] = outArray;
                        const arrayFingerprints = [];
                        for(let j = 0; j < refs.length; j++){
                            const childOut = {};
                            outArray[j] = childOut;
                            readEntity(refs[j], childField, childOut, addPath(path, outKey + "[" + j + "]"));
                            const fp = getFingerprint(childOut);
                            if (fp !== undefined) {
                                arrayFingerprints.push(fp);
                            }
                        }
                        if (arrayFingerprints.length > 0) {
                            const arrayFp = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.fingerprintNodes)(0, arrayFingerprints);
                            setFingerprint(outArray, arrayFp);
                            childFingerprints.push(arrayFp);
                        }
                        continue;
                    }
                    if (!link || !link.__ref) {
                        out[outKey] = link === null ? null : undefined;
                        strictOK = false;
                        canonicalOK = false;
                        miss({
                            kind: FIELD_LINK_MISSING,
                            at: addPath(path, outKey),
                            parentId: id,
                            fieldKey: storeKey
                        });
                        continue;
                    }
                    const childId = link.__ref;
                    const childOut = {};
                    out[outKey] = childOut;
                    readEntity(childId, childField, childOut, addPath(path, outKey));
                    const fp = getFingerprint(childOut);
                    if (fp !== undefined) childFingerprints.push(fp);
                    continue;
                }
                readScalar(snapshot, childField, out, outKey, id, addPath(path, outKey));
            }
            if (Array.isArray(field.selectionSet) && field.selectionSet.length) {
                for(let i = 0; i < field.selectionSet.length; i++){
                    const pf = field.selectionSet[i];
                    if (pf.selectionSet) {
                        continue;
                    }
                    if (out[pf.responseKey] !== undefined) {
                        continue;
                    }
                    const storeKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildFieldKey)(pf, variables);
                    if (snapshot && storeKey in snapshot) {
                        out[pf.responseKey] = snapshot[storeKey];
                    }
                }
            }
            const entityVersion = graph.getVersion(id);
            const finalFingerprint = childFingerprints.length > 0 ? (0,_utils__WEBPACK_IMPORTED_MODULE_0__.fingerprintNodes)(entityVersion, childFingerprints) : entityVersion;
            setFingerprint(out, finalFingerprint);
        };
        const readEdge = (edgeId, field, outArray, index, path)=>{
            const record = graph.getRecord(edgeId) || {};
            const outEdge = {};
            outArray[index] = outEdge;
            if (record.__typename !== undefined) {
                outEdge.__typename = record.__typename;
            }
            const selection = field.selectionSet || [];
            const nodePlan = field.selectionMap ? field.selectionMap.get("node") : undefined;
            let nodeFingerprint;
            for(let i = 0; i < selection.length; i++){
                const f = selection[i];
                const outKey = f.responseKey;
                if (outKey === "node") {
                    const nlink = record.node;
                    if (!nlink || !nlink.__ref) {
                        outEdge.node = nlink === null ? null : undefined;
                        strictOK = false;
                        canonicalOK = false;
                        miss({
                            kind: EDGE_NODE_MISSING,
                            at: addPath(path, "node"),
                            edgeId
                        });
                    } else {
                        const nodeId = nlink.__ref;
                        const nodeOut = {};
                        outEdge.node = nodeOut;
                        readEntity(nodeId, nodePlan, nodeOut, addPath(path, "node"));
                        nodeFingerprint = getFingerprint(nodeOut);
                    }
                } else if (!f.selectionSet) {
                    readScalar(record, f, outEdge, outKey, edgeId, addPath(path, outKey));
                }
            }
            const edgeVersion = graph.getVersion(edgeId);
            const finalFingerprint = nodeFingerprint !== undefined ? (0,_utils__WEBPACK_IMPORTED_MODULE_0__.fingerprintNodes)(edgeVersion, [
                nodeFingerprint
            ]) : edgeVersion;
            setFingerprint(outEdge, finalFingerprint);
        };
        const readConnection = (parentId, field, out, outKey, path)=>{
            const canonicalKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildConnectionCanonicalKey)(field, parentId, variables);
            const strictKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildConnectionKey)(field, parentId, variables);
            if (canonical) {
                touch(canonicalKey);
            } else {
                touch(strictKey);
            }
            const pageCanonical = graph.getRecord(canonicalKey);
            const pageStrict = graph.getRecord(strictKey);
            canonicalOK &&= !!pageCanonical;
            strictOK &&= !!pageStrict;
            const requestedOK = canonical ? !!pageCanonical : !!pageStrict;
            const conn = {
                edges: [],
                pageInfo: {}
            };
            out[outKey] = conn;
            if (!requestedOK) {
                miss({
                    kind: CONNECTION_MISSING,
                    at: path,
                    mode: canonical ? "canonical" : "strict",
                    parentId,
                    canonicalKey,
                    strictKey,
                    hasCanonical: !!pageCanonical,
                    hasStrict: !!pageStrict
                });
                return;
            }
            const baseIsCanonical = canonical === true;
            const page = baseIsCanonical ? pageCanonical : pageStrict;
            const baseKey = baseIsCanonical ? canonicalKey : strictKey;
            const selMap = field.selectionMap;
            if (!selMap || selMap.size === 0) {
                return;
            }
            let pageInfoFingerprint;
            const edgeFingerprints = [];
            for (const [responseKey, childField] of selMap){
                if (responseKey === "pageInfo") {
                    const pageInfoLink = page.pageInfo;
                    if (pageInfoLink && pageInfoLink.__ref) {
                        pageInfoFingerprint = readPageInfo(pageInfoLink.__ref, childField, conn, addPath(path, "pageInfo"));
                    } else {
                        conn.pageInfo = {};
                        strictOK = false;
                        canonicalOK = false;
                        miss({
                            kind: PAGE_INFO_MISSING,
                            at: addPath(path, "pageInfo"),
                            pageId: baseKey + ".pageInfo"
                        });
                    }
                    continue;
                }
                if (responseKey === "edges") {
                    const refs = page.edges.__refs;
                    const outArr = new Array(refs.length);
                    conn.edges = outArr;
                    for(let i = 0; i < refs.length; i++){
                        readEdge(refs[i], childField, outArr, i, addPath(path, "edges[" + i + "]"));
                        const edge = outArr[i];
                        if (edge) {
                            const fp = getFingerprint(edge);
                            if (fp !== undefined) edgeFingerprints.push(fp);
                        }
                    }
                    if (edgeFingerprints.length > 0) {
                        const edgesArrayFp = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.fingerprintNodes)(0, edgeFingerprints);
                        setFingerprint(outArr, edgesArrayFp);
                    }
                    continue;
                }
                if (!childField.selectionSet) {
                    readScalar(page, childField, conn, childField.responseKey, baseKey, addPath(path, childField.responseKey));
                    continue;
                }
                if (childField.isConnection) {
                    readConnection(baseKey, childField, conn, childField.responseKey, addPath(path, childField.responseKey));
                    continue;
                }
                const link = page[(0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildFieldKey)(childField, variables)];
                if (link != null && Array.isArray(link.__refs)) {
                    const refs = link.__refs;
                    const outArray = new Array(refs.length);
                    conn[childField.responseKey] = outArray;
                    for(let j = 0; j < refs.length; j++){
                        const childOut = {};
                        outArray[j] = childOut;
                        readEntity(refs[j], childField, childOut, addPath(path, childField.responseKey + "[" + j + "]"));
                    }
                    continue;
                }
                if (!link || !link.__ref) {
                    conn[childField.responseKey] = link === null ? null : undefined;
                    strictOK = false;
                    canonicalOK = false;
                    miss({
                        kind: FIELD_LINK_MISSING,
                        at: addPath(path, childField.responseKey),
                        parentId: baseKey,
                        fieldKey: (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildFieldKey)(childField, variables)
                    });
                    continue;
                }
                const childId = link.__ref;
                const childOut = {};
                conn[childField.responseKey] = childOut;
                readEntity(childId, childField, childOut, addPath(path, childField.responseKey));
            }
            const pageVersion = graph.getVersion(baseKey);
            const connChildren = [];
            if (pageInfoFingerprint !== undefined) {
                connChildren.push(pageInfoFingerprint);
            }
            if (edgeFingerprints.length > 0) {
                connChildren.push((0,_utils__WEBPACK_IMPORTED_MODULE_0__.fingerprintNodes)(0, edgeFingerprints));
            }
            const connFingerprint = connChildren.length > 0 ? (0,_utils__WEBPACK_IMPORTED_MODULE_0__.fingerprintNodes)(pageVersion, connChildren) : pageVersion;
            setFingerprint(conn, connFingerprint);
        };
        const data = {};
        if (entityId) {
            const synthetic = {
                selectionSet: plan.root,
                selectionMap: plan.rootSelectionMap
            };
            readEntity(entityId, synthetic, data, entityId);
        } else {
            const rootRecord = graph.getRecord(_constants__WEBPACK_IMPORTED_MODULE_2__.ROOT_ID) || {};
            const rootSelection = plan.root;
            for(let i = 0; i < rootSelection.length; i++){
                const field = rootSelection[i];
                const path = addPath(_constants__WEBPACK_IMPORTED_MODULE_2__.ROOT_ID, field.responseKey);
                if (field.isConnection) {
                    readConnection(_constants__WEBPACK_IMPORTED_MODULE_2__.ROOT_ID, field, data, field.responseKey, path);
                    continue;
                }
                if (field.selectionSet && field.selectionSet.length) {
                    const fieldKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildFieldKey)(field, variables);
                    touch(_constants__WEBPACK_IMPORTED_MODULE_2__.ROOT_ID + "." + fieldKey);
                    const link = rootRecord[fieldKey];
                    if (!link || !link.__ref) {
                        data[field.responseKey] = link === null ? null : undefined;
                        strictOK = false;
                        canonicalOK = false;
                        miss({
                            kind: ROOT_LINK_MISSING,
                            at: path,
                            fieldKey
                        });
                    } else {
                        const childId = link.__ref;
                        const childOut = {};
                        data[field.responseKey] = childOut;
                        readEntity(childId, field, childOut, addPath(path, childId));
                    }
                } else {
                    readScalar(rootRecord, field, data, field.responseKey, _constants__WEBPACK_IMPORTED_MODULE_2__.ROOT_ID, path);
                }
            }
        }
        const requestedOK = canonical ? canonicalOK : strictOK;
        const rootFingerprints = [];
        if (entityId) {
            const fp = getFingerprint(data);
            if (fp !== undefined) rootFingerprints.push(fp);
        } else {
            for(let i = 0; i < plan.root.length; i++){
                const field = plan.root[i];
                const value = data[field.responseKey];
                if (value && typeof value === "object") {
                    const fp = getFingerprint(value);
                    if (fp !== undefined) rootFingerprints.push(fp);
                }
            }
        }
        if (requestedOK && rootFingerprints.length > 0) {
            const rootFingerprint = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.fingerprintNodes)(0, rootFingerprints);
            setFingerprint(data, rootFingerprint);
        }
        // Create result object (either "none" or with data)
        const result = !requestedOK ? {
            data: undefined,
            dependencies,
            source: "none",
            ok: {
                strict: strictOK,
                canonical: canonicalOK,
                miss: _instrumentation__WEBPACK_IMPORTED_MODULE_3__.__DEV__ ? misses : undefined,
                strictSignature,
                canonicalSignature
            },
            hot: false
        } : {
            data,
            dependencies,
            source: canonical ? "canonical" : "strict",
            ok: {
                strict: strictOK,
                canonical: canonicalOK,
                miss: _instrumentation__WEBPACK_IMPORTED_MODULE_3__.__DEV__ ? misses : undefined,
                strictSignature,
                canonicalSignature
            },
            hot: false
        };
        materializeCache.set(cacheKey, result);
        return result;
    };
    return {
        normalizeDocument,
        materializeDocument
    };
};


}),
"../cachebay/src/core/errors.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CacheMissError: () => (CacheMissError),
  CombinedError: () => (CombinedError),
  StaleResponseError: () => (StaleResponseError)
});
/**
 * Custom error types for cachebay
 */ /**
 * Error thrown when cache-only policy is used but no cached data exists
 */ class CacheMissError extends Error {
    constructor(message = 'Cache miss: no data available for cache-only query'){
        super(message);
        this.name = 'CacheMissError';
    }
}
/**
 * Error returned when a query response arrives after a newer request
 * for the same query+variables has been initiated.
 * This is expected behavior and should be ignored by consumers.
 */ class StaleResponseError extends Error {
    constructor(message = 'Response ignored: newer request in flight'){
        super(message);
        this.name = 'StaleResponseError';
    }
}
/**
 * Generate error message from network and GraphQL errors
 */ const generateErrorMessage = (networkError, graphqlErrors)=>{
    let error = "";
    if (networkError !== undefined) {
        return error = `[Network] ${networkError.message}`;
    }
    if (graphqlErrors !== undefined) {
        for(let i = 0; i < graphqlErrors.length; i++){
            error += `[GraphQL] ${graphqlErrors[i].message}\n`;
        }
    }
    return error.trim();
};
/**
 * CombinedError - handles both network and GraphQL errors
 */ class CombinedError extends Error {
    name;
    message;
    response;
    networkError;
    graphqlErrors;
    constructor({ response, networkError, graphqlErrors }){
        const message = generateErrorMessage(networkError, graphqlErrors);
        super(message);
        this.name = "CombinedError";
        this.response = response;
        this.message = message;
        this.networkError = networkError;
        this.graphqlErrors = graphqlErrors;
    }
    toString() {
        return this.message;
    }
}


}),
"../cachebay/src/core/fragments.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  createFragments: () => (createFragments)
});
/* ESM import */var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../cachebay/src/core/utils.ts");

const createFragments = ({ graph, planner, documents })=>{
    const watchers = new Map();
    const depIndex = new Map();
    let watcherSeq = 1;
    let pendingTouched = new Set();
    let flushScheduled = false;
    const scheduleFlush = ()=>{
        if (flushScheduled) return;
        flushScheduled = true;
        queueMicrotask(()=>{
            flushScheduled = false;
            if (pendingTouched.size === 0) return;
            const touched = Array.from(pendingTouched);
            pendingTouched.clear();
            const affected = new Set();
            for (const id of touched){
                const ws = depIndex.get(id);
                if (ws) for (const k of ws)affected.add(k);
            }
            if (affected.size === 0) return;
            for (const k of affected){
                const w = watchers.get(k);
                if (!w) continue;
                const result = documents.materializeDocument({
                    document: planner.getPlan(w.fragment, {
                        fragmentName: w.fragmentName
                    }),
                    variables: w.variables,
                    canonical: true,
                    entityId: w.id,
                    fingerprint: true,
                    force: true
                });
                updateWatcherDeps(k, result.dependencies);
                if (result.source !== "none") {
                    const recycled = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.recycleSnapshots)(w.lastData, result.data);
                    if (recycled !== w.lastData) {
                        w.lastData = recycled;
                        try {
                            w.onData(recycled);
                        } catch (e) {
                            var _w_onError;
                            (_w_onError = w.onError) === null || _w_onError === void 0 ? void 0 : _w_onError.call(w, e);
                        }
                    }
                }
            // Don't call onError for cache miss - entity might be deleted or not loaded yet
            }
        });
    };
    const propagateData = (touched)=>{
        for (const value of touched){
            pendingTouched.add(value);
        }
        scheduleFlush();
    };
    const updateWatcherDeps = (watcherId, nextDepsArr)=>{
        const watcher = watchers.get(watcherId);
        if (!watcher) return;
        const old = watcher.deps;
        const next = new Set(nextDepsArr);
        // fast path: identical
        if (old.size === next.size) {
            let same = true;
            for (const d of old)if (!next.has(d)) {
                same = false;
                break;
            }
            if (same) return;
        }
        for (const d of old){
            const set = depIndex.get(d);
            if (set) {
                set.delete(watcherId);
                if (set.size === 0) depIndex.delete(d);
            }
        }
        for (const d of next){
            let set = depIndex.get(d);
            if (!set) depIndex.set(d, set = new Set());
            set.add(watcherId);
        }
        watcher.deps = next;
    };
    // --- Public API ---
    const readFragment = ({ id, fragment, fragmentName, variables = {} })=>{
        const result = documents.materializeDocument({
            document: planner.getPlan(fragment, {
                fragmentName
            }),
            variables: variables,
            canonical: true,
            entityId: id,
            fingerprint: true,
            force: true
        });
        if (result.source !== "none") {
            return result.data;
        }
        return null;
    };
    const writeFragment = ({ id, fragment, fragmentName, data, variables = {} })=>{
        const plan = planner.getPlan(fragment, {
            fragmentName
        });
        documents.normalizeDocument({
            document: plan,
            variables: variables,
            data,
            // write "under" this entity and create links to connection pages
            rootId: id
        });
    };
    const watchFragment = ({ id, fragment, fragmentName, variables = {}, onData, onError, immediate = true })=>{
        const watcherId = watcherSeq++;
        const watcher = {
            id,
            fragment,
            fragmentName,
            variables: variables || {},
            onData,
            onError,
            deps: new Set(),
            lastData: undefined
        };
        watchers.set(watcherId, watcher);
        const initial = documents.materializeDocument({
            document: planner.getPlan(fragment, {
                fragmentName
            }),
            variables: variables,
            canonical: true,
            entityId: id,
            fingerprint: true
        });
        updateWatcherDeps(watcherId, initial.dependencies);
        if (initial.source !== "none") {
            watcher.lastData = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.recycleSnapshots)(undefined, initial.data);
            if (immediate) {
                try {
                    onData(initial.data);
                } catch (e) {
                    onError === null || onError === void 0 ? void 0 : onError(e);
                }
            }
        }
        // Don't call onError for initial cache miss - entity might not be loaded yet
        return {
            unsubscribe: ()=>{
                const w = watchers.get(watcherId);
                if (!w) return;
                for (const d of w.deps){
                    const set = depIndex.get(d);
                    if (set) {
                        set.delete(watcherId);
                        if (set.size === 0) depIndex.delete(d);
                    }
                }
                watchers.delete(watcherId);
            },
            update: ({ id: newId, variables: newVariables, immediate = true })=>{
                const w = watchers.get(watcherId);
                if (!w) return;
                // Update watcher state
                if (newId !== undefined) w.id = newId;
                if (newVariables !== undefined) w.variables = newVariables;
                // If immediate, materialize and emit synchronously
                if (immediate) {
                    const res = documents.materializeDocument({
                        document: planner.getPlan(w.fragment, {
                            fragmentName: w.fragmentName
                        }),
                        variables: w.variables,
                        canonical: true,
                        entityId: w.id,
                        fingerprint: true,
                        force: false
                    });
                    updateWatcherDeps(watcherId, res.dependencies);
                    if (res.source !== "none") {
                        // recycleSnapshots automatically preserves object identity for unchanged parts
                        const recycled = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.recycleSnapshots)(w.lastData, res.data);
                        // Only emit if data actually changed
                        if (recycled !== w.lastData) {
                            w.lastData = recycled;
                            try {
                                w.onData(recycled);
                            } catch (e) {
                                var _w_onError;
                                (_w_onError = w.onError) === null || _w_onError === void 0 ? void 0 : _w_onError.call(w, e);
                            }
                        }
                    }
                // No else - watchers simply don't emit on cache miss, entity might not be loaded yet
                }
            }
        };
    };
    return {
        readFragment,
        writeFragment,
        watchFragment,
        propagateData
    };
};


}),
"../cachebay/src/core/graph.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  createGraph: () => (createGraph)
});
/* ESM import */var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../cachebay/src/core/constants.ts");
/* ESM import */var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../cachebay/src/core/utils.ts");


const EMPTY_SET = new Set();
/**
 * Diff field changes and track what changed
 * Uses deep equality for objects/arrays to avoid false positives from JSON.parse
 * @private
 */ const commitChanges = (currentSnapshot, partialSnapshot)=>{
    let hasChanges = false;
    for(let i = 0, fields = Object.keys(partialSnapshot); i < fields.length; i++){
        const fieldName = fields[i];
        const incomingValue = partialSnapshot[fieldName];
        if (incomingValue === undefined) {
            continue;
        }
        if (fieldName === _constants__WEBPACK_IMPORTED_MODULE_0__.ID_FIELD) {
            const normalizedId = incomingValue ? String(incomingValue) : null;
            if (currentSnapshot[_constants__WEBPACK_IMPORTED_MODULE_0__.ID_FIELD] === normalizedId) {
                continue;
            }
            currentSnapshot[_constants__WEBPACK_IMPORTED_MODULE_0__.ID_FIELD] = normalizedId;
            hasChanges = true;
            continue;
        }
        const currentValue = currentSnapshot[fieldName];
        // Fast path: reference equality (handles primitives and same object references)
        if (currentValue === incomingValue) {
            continue;
        }
        // Only use deep equality for objects/arrays to avoid false positives from JSON.parse
        if (typeof incomingValue === 'object' && incomingValue !== null && typeof currentValue === 'object' && currentValue !== null) {
            if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.isDataDeepEqual)(currentValue, incomingValue)) {
                continue;
            }
        }
        currentSnapshot[fieldName] = incomingValue;
        hasChanges = true;
    }
    return hasChanges;
};
/**
 * Identity manager for entity key generation and interface resolution
 * Handles typename mapping, key parsing, and custom key functions
 * @private
 */ class IdentityManager {
    keyStore = new Map();
    interfaceStore = new Map();
    keyers = new Map();
    constructor(config){
        for (const [typename, keyFunction] of Object.entries(config.keys || {})){
            this.keyers.set(typename, keyFunction);
        }
        if (config.interfaces) {
            const interfaces = Object.keys(config.interfaces);
            for(let i = 0; i < interfaces.length; i++){
                const interfaceTypename = interfaces[i];
                const implementors = config.interfaces[interfaceTypename] || [];
                for(let j = 0; j < implementors.length; j++){
                    this.interfaceStore.set(implementors[j], interfaceTypename);
                }
            }
        }
    }
    getCanonicalTypename(typename) {
        return this.interfaceStore.get(typename) || typename;
    }
    parseKey(key) {
        const cached = this.keyStore.get(key);
        if (cached) {
            return cached;
        }
        const parsed = key.split(":", 2);
        this.keyStore.set(key, parsed);
        return parsed;
    }
    stringifyKey(object) {
        var _this_keyers_get;
        if (!(0,_utils__WEBPACK_IMPORTED_MODULE_1__.isObject)(object)) {
            return null;
        }
        const typename = this.getCanonicalTypename(object[_constants__WEBPACK_IMPORTED_MODULE_0__.TYPENAME_FIELD]) || object[_constants__WEBPACK_IMPORTED_MODULE_0__.TYPENAME_FIELD];
        if (!typename) {
            return null;
        }
        const id = ((_this_keyers_get = this.keyers.get(typename)) === null || _this_keyers_get === void 0 ? void 0 : _this_keyers_get(object)) ?? object[_constants__WEBPACK_IMPORTED_MODULE_0__.ID_FIELD];
        if (id === undefined || id === null) {
            return null;
        }
        return `${typename}:${id}`;
    }
    clear() {
        this.keyStore.clear();
    }
}
/**
 * Create a normalized graph store
 * @param options - Configuration for keys and interfaces
 * @returns Graph store instance with CRUD and read methods
 */ const createGraph = (options = {})=>{
    const { onChange = ()=>{} } = options;
    const identityManager = new IdentityManager({
        keys: options.keys || {},
        interfaces: options.interfaces || {}
    });
    const implementersMap = new Map();
    const recordStore = new Map();
    const recordVersionStore = new Map();
    const pendingChanges = new Set();
    let isFlushing = false;
    let versionClock = 0;
    for(const name in options.interfaces){
        const implementors = options.interfaces[name];
        if (Array.isArray(implementors) && implementors.length > 0) {
            implementersMap.set(name, new Set(implementors));
        } else {
            implementersMap.set(name, EMPTY_SET);
        }
    }
    const notifyChange = (recordId)=>{
        const shouldSchedule = pendingChanges.size === 0;
        pendingChanges.add(recordId);
        if (shouldSchedule) {
            queueMicrotask(flush);
        }
    };
    /**
   * Get implementers for a given interface
   */ const getImplementers = (interfaceName)=>{
        return implementersMap.get(interfaceName) || EMPTY_SET;
    };
    /**
   * Get stable key for object using configured resolvers
   */ const identify = (object)=>{
        return identityManager.stringifyKey(object);
    };
    /**
   * Get raw record data by ID
   */ const getRecord = (recordId)=>{
        return recordStore.get(recordId);
    };
    /**
   * Update record with partial data, undefined values are ignored
   */ const putRecord = (recordId, partialSnapshot)=>{
        const currentSnapshot = recordStore.get(recordId) || {};
        const hasChanges = commitChanges(currentSnapshot, partialSnapshot); // NOTE: Don't destructure for performance
        if (!hasChanges) {
            return;
        }
        versionClock++;
        recordStore.set(recordId, currentSnapshot);
        recordVersionStore.set(recordId, versionClock);
        if (recordId === _constants__WEBPACK_IMPORTED_MODULE_0__.ROOT_ID) {
            for(let i = 0, keys = Object.keys(partialSnapshot); i < keys.length; i++){
                const key = keys[i];
                notifyChange(`${recordId}.${key}`);
            }
        }
        notifyChange(recordId);
    };
    /**
   * Delete record from store
   */ const removeRecord = (recordId)=>{
        recordStore.delete(recordId);
        recordVersionStore.delete(recordId);
        notifyChange(recordId);
    };
    /**
  * Get version of record
  */ const getVersion = (recordId)=>{
        return recordVersionStore.get(recordId) || 0;
    };
    /**
   * Flush pending onChange notifications immediately (for sync reads after writes)
   */ const flush = ()=>{
        if (isFlushing) {
            return;
        }
        if (pendingChanges.size === 0) {
            return;
        }
        isFlushing = true;
        try {
            onChange(pendingChanges);
            pendingChanges.clear();
        } finally{
            isFlushing = false;
        }
    };
    /**
   * Get all record IDs
   */ const keys = ()=>{
        return Array.from(recordStore.keys());
    };
    /**
   * Clear all data
   */ const clear = ()=>{
        recordStore.clear();
        recordVersionStore.clear();
    };
    /**
   * Debug inspection of current state
   */ const inspect = ()=>{
        const records = {};
        for (const [recordId, currentSnapshot] of recordStore.entries()){
            records[recordId] = currentSnapshot;
        }
        return {
            records,
            options: {
                keys: options.keys || {},
                interfaces: options.interfaces || {}
            }
        };
    };
    return {
        getImplementers,
        identify,
        putRecord,
        getRecord,
        removeRecord,
        getVersion,
        flush,
        keys,
        clear,
        inspect
    };
};


}),
"../cachebay/src/core/inspect.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  createInspect: () => (createInspect)
});
/* ESM import */var _core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../cachebay/src/core/constants.ts");
/* ESM import */var _compiler_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../cachebay/src/compiler/utils.ts");


const PAGINATION_ARGS = new Set([
    "first",
    "last",
    "after",
    "before",
    "offset",
    "limit",
    "page",
    "cursor"
]);
/* ────────────────────────────────────────────────────────────────────────────
 * Small helpers (allocation-lean)
 * -------------------------------------------------------------------------- */ const isRootRecord = (id)=>{
    return id === "@";
};
const isEdgeRecord = (id)=>{
    return id.includes(".edges.");
};
const isPageRecord = (id)=>{
    return id.startsWith("@.") && !isEdgeRecord(id);
};
const parentId = (parent)=>{
    if (!parent || parent === "Query" || parent === "@") {
        return "";
    }
    if (typeof parent === "string") {
        return parent;
    }
    return `${parent.__typename}:${String(parent.id)}`;
};
/** Root pages: '@.<field>(...)' → last '.' before '(' is exactly index 1. */ const isPageUnderParent = (pageKey, p)=>{
    if (!isPageRecord(pageKey)) {
        return false;
    }
    const pid = parentId(p);
    if (!pid) {
        const paren = pageKey.indexOf("(");
        const stop = paren >= 0 ? paren : pageKey.length;
        const lastDot = pageKey.lastIndexOf(".", stop);
        return lastDot === 1;
    }
    return pageKey.startsWith(`@.${pid}.`);
};
const fieldOf = (pageKey)=>{
    const paren = pageKey.indexOf("(");
    const end = paren >= 0 ? paren : pageKey.length;
    const dot = pageKey.lastIndexOf(".", end);
    if (dot < 0) {
        return null;
    }
    return pageKey.slice(dot + 1, end);
};
const argsOf = (pageKey)=>{
    const i = pageKey.indexOf("(");
    if (i < 0) {
        return "";
    }
    const j = pageKey.lastIndexOf(")");
    if (j <= i) {
        return "";
    }
    return pageKey.slice(i + 1, j).trim();
};
/** Parse filters from raw '(...)' JSON; drop pagination args. */ const parseFilters = (raw)=>{
    if (!raw) {
        return {};
    }
    try {
        const src = JSON.parse(raw);
        const out = {};
        const keys = Object.keys(src);
        for(let i = 0; i < keys.length; i++){
            const k = keys[i];
            if (!PAGINATION_ARGS.has(k)) {
                out[k] = src[k];
            }
        }
        return out;
    } catch  {
        // Non-JSON args are ignored for inspection; return empty to be safe.
        return {};
    }
};
const unique = (xs)=>{
    if (xs.length < 2) {
        return xs;
    }
    return Array.from(new Set(xs));
};
/* ────────────────────────────────────────────────────────────────────────────
 * Public API
 * -------------------------------------------------------------------------- */ /**
 * Create debug inspection API for cache internals
 * Provides methods to inspect entities, connections, and optimistic state
 * @param deps - Required dependencies (graph, optimistic)
 * @returns Inspect API with record, entityKeys, connectionKeys, config, and optimistic methods
 */ const createInspect = ({ graph, optimistic })=>{
    const getRecord = (id)=>{
        return graph.getRecord(id);
    };
    /**
   * List entity record ids (excludes root, pages, edges). Optional typename filter.
   * @param typename Optional typename prefix to filter, e.g. "User".
   */ const getEntityKeys = (typename)=>{
        const all = graph.keys();
        const out = [];
        for(let i = 0; i < all.length; i++){
            const k = all[i];
            if (isRootRecord(k) || isPageRecord(k) || isEdgeRecord(k)) {
                continue;
            }
            if (typename && !k.startsWith(typename + ":")) {
                continue;
            }
            out.push(k);
        }
        return out;
    };
    /**
   * List canonical @connection keys for pages that match the filter.
   * Pagination args are removed; remaining args become the connection filters.
   */ const getConnectionKeys = (opts = {})=>{
        const all = graph.keys();
        const results = [];
        const wantField = opts.key;
        const testArgs = opts.argsFn;
        const hasParentFilter = opts.parent !== undefined;
        for(let i = 0; i < all.length; i++){
            const k = all[i];
            if (!isPageRecord(k)) {
                continue;
            }
            if (hasParentFilter && !isPageUnderParent(k, opts.parent)) {
                continue;
            }
            if (wantField) {
                const f = fieldOf(k);
                if (f !== wantField) {
                    continue;
                }
            }
            if (testArgs) {
                const raw = argsOf(k);
                if (!testArgs(raw)) {
                    continue;
                }
            }
            // Convert page key → canonical connection key using the shared builder.
            const paren = k.indexOf("(");
            const end = paren >= 0 ? paren : k.length;
            const lastDot = k.lastIndexOf(".", end);
            const hasParent = lastDot > 1;
            const parentStr = hasParent ? k.slice(2, lastDot) : _core_constants__WEBPACK_IMPORTED_MODULE_0__.ROOT_ID;
            const fieldName = k.slice(lastDot + 1, end);
            const filters = parseFilters(argsOf(k));
            const filterKeys = Object.keys(filters);
            const canonical = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildConnectionCanonicalKey)({
                fieldName,
                buildArgs: (v)=>v || {},
                connectionFilters: filterKeys
            }, parentStr, filters);
            results.push(canonical);
        }
        return unique(results);
    };
    /** Return the graph creation options (keys, interfaces). */ const config = ()=>{
        var _graph_inspect;
        const snap = (_graph_inspect = graph.inspect) === null || _graph_inspect === void 0 ? void 0 : _graph_inspect.call(graph);
        return (snap === null || snap === void 0 ? void 0 : snap.options) ?? {
            keys: {},
            interfaces: {}
        };
    };
    return {
        getRecord,
        getEntityKeys,
        getConnectionKeys,
        config,
        optimistic: ()=>optimistic.inspect()
    };
};


}),
"../cachebay/src/core/instrumentation.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  __DEV__: () => (__DEV__)
});
/**
 * Development mode flag - computed once at module load.
 * Tree-shaken in production builds.
 */ const __DEV__ = "development" === 'development';


}),
"../cachebay/src/core/operations.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  CACHE_AND_NETWORK: () => (CACHE_AND_NETWORK),
  CACHE_FIRST: () => (CACHE_FIRST),
  CACHE_ONLY: () => (CACHE_ONLY),
  NETWORK_ONLY: () => (NETWORK_ONLY),
  createOperations: () => (createOperations)
});
/* ESM import */var _instrumentation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../cachebay/src/core/instrumentation.ts");
/* ESM import */var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../cachebay/src/core/errors.ts");


const CACHE_AND_NETWORK = "cache-and-network";
const NETWORK_ONLY = "network-only";
const CACHE_FIRST = "cache-first";
const CACHE_ONLY = "cache-only";
/**
 * Valid cache policies
 */ const VALID_CACHE_POLICIES = [
    "cache-and-network",
    "network-only",
    "cache-first",
    "cache-only"
];
/**
 * Validate and normalize cache policy
 * In dev: throws on invalid policy
 * In prod: warns and returns default policy
 */ function validateCachePolicy(policy, defaultPolicy = 'cache-first') {
    if (!policy) {
        return defaultPolicy;
    }
    if (VALID_CACHE_POLICIES.includes(policy)) {
        return policy;
    }
    const errorMessage = `Invalid cache policy: "${policy}". Valid policies are: ${VALID_CACHE_POLICIES.join(', ')}`;
    if (_instrumentation__WEBPACK_IMPORTED_MODULE_0__.__DEV__) {
        throw new Error(errorMessage);
    } else {
        console.warn(`[cachebay] ${errorMessage}. Falling back to "${defaultPolicy}".`);
        return defaultPolicy;
    }
}
const createOperations = ({ transport, suspensionTimeout = 1000, onQueryError, onQueryData, cachePolicy: defaultCachePolicy }, { planner, documents, ssr })=>{
    // Track query epochs to prevent stale responses from notifying watchers
    // Key: query signature, Value: current epoch number
    const queryEpochs = new Map();
    // Suspension tracking: last terminal emit time per query signature
    const lastEmitBySig = new Map();
    // No need for error tracking maps - just call onQueryError callback
    /**
   * Check if we're within the suspension window for a query signature
   */ const isWithinSuspension = (signature)=>{
        const last = lastEmitBySig.get(signature);
        return last != null && performance.now() - last <= suspensionTimeout;
    };
    /**
   * Mark a query signature as having emitted (for suspension tracking)
   */ const markEmitted = (signature)=>{
        lastEmitBySig.set(signature, performance.now());
    };
    /**
   * Execute a GraphQL query with suspension and hydration support
   */ const executeQuery = async ({ query, variables = {}, cachePolicy, onSuccess, onError, onCachedData })=>{
        // Validate and normalize cache policy
        const rawPolicy = cachePolicy ?? defaultCachePolicy;
        const effectiveCachePolicy = validateCachePolicy(rawPolicy, 'network-only');
        const plan = planner.getPlan(query);
        const signature = plan.makeSignature(true, variables); // Always canonical
        // Read from cache using documents directly
        // Always read cache during SSR hydration, even for network-only
        let cached;
        if (effectiveCachePolicy !== 'network-only' || ssr.isHydrating()) {
            cached = documents.materializeDocument({
                document: query,
                variables,
                canonical: true,
                fingerprint: true,
                force: false
            });
        }
        const performRequest = async ()=>{
            try {
                const currentEpoch = (queryEpochs.get(signature) || 0) + 1;
                queryEpochs.set(signature, currentEpoch);
                // Network fetch
                const context = {
                    query: plan.networkQuery,
                    variables,
                    operationType: "query",
                    compiledQuery: plan
                };
                const result = await transport.http(context);
                const isStale = queryEpochs.get(signature) !== currentEpoch;
                // If stale, return null data with StaleResponseError wrapped in CombinedError
                if (isStale) {
                    throw new _errors__WEBPACK_IMPORTED_MODULE_1__.StaleResponseError();
                }
                // Write result to cache if we have data (even with partial errors)
                // This matches Relay/Apollo behavior: partial data is still useful
                if (result.data) {
                    documents.normalizeDocument({
                        document: query,
                        variables,
                        data: result.data
                    });
                    // Read back from cache to get normalized/materialized data
                    // This ensures the same reference as watchQuery would emit
                    const cachedAfterWrite = documents.materializeDocument({
                        document: query,
                        variables,
                        canonical: true,
                        fingerprint: true,
                        force: true
                    });
                    // Notify watchers about query execution with data and dependencies
                    onQueryData === null || onQueryData === void 0 ? void 0 : onQueryData({
                        signature,
                        data: cachedAfterWrite.data,
                        dependencies: cachedAfterWrite.dependencies,
                        cachePolicy: effectiveCachePolicy
                    });
                    // Validate that we can materialize the data we just wrote
                    if (cachedAfterWrite.source === "none") {
                        if (_instrumentation__WEBPACK_IMPORTED_MODULE_0__.__DEV__ && cachedAfterWrite.ok.miss) {
                            console.error('[cachebay] Failed to materialize query after network response.\n' + 'This usually means the response is missing required fields.\n' + 'Missing data:', cachedAfterWrite.ok.miss);
                        }
                        return {
                            data: null,
                            error: new _errors__WEBPACK_IMPORTED_MODULE_1__.CombinedError({
                                networkError: new Error('Failed to materialize query after write. ' + 'The response may be missing required fields like __typename or id.')
                            })
                        };
                    }
                    markEmitted(signature);
                    const successResult = {
                        data: cachedAfterWrite.data,
                        error: result.error || null,
                        meta: {
                            source: 'network'
                        }
                    };
                    onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(successResult.data);
                    return successResult;
                }
                // Mark as emitted for suspension tracking
                markEmitted(signature);
                // If we have an error but no data, propagate the error
                if (result.error) {
                    const combinedError = result.error instanceof _errors__WEBPACK_IMPORTED_MODULE_1__.CombinedError ? result.error : new _errors__WEBPACK_IMPORTED_MODULE_1__.CombinedError({
                        networkError: result.error
                    });
                    onError === null || onError === void 0 ? void 0 : onError(combinedError);
                    onQueryError === null || onQueryError === void 0 ? void 0 : onQueryError(signature, combinedError);
                }
                return result;
            } catch (error) {
                const combinedError = new _errors__WEBPACK_IMPORTED_MODULE_1__.CombinedError({
                    networkError: error
                });
                // Only notify error callbacks if not a stale response
                // Stale errors should be silently dropped
                if (!(error instanceof _errors__WEBPACK_IMPORTED_MODULE_1__.StaleResponseError)) {
                    onError === null || onError === void 0 ? void 0 : onError(combinedError);
                    onQueryError === null || onQueryError === void 0 ? void 0 : onQueryError(signature, combinedError);
                }
                return {
                    data: null,
                    error: combinedError
                };
            }
        };
        // SSR hydration or suspension window: return cached data if available
        if (ssr.isHydrating() || isWithinSuspension(signature)) {
            if (cached && cached.source !== "none") {
                // Call onCachedData for SSR/suspension to set data synchronously
                onCachedData === null || onCachedData === void 0 ? void 0 : onCachedData(cached.data);
                const result = {
                    data: cached.data,
                    error: null
                };
                onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(result.data);
                return result;
            }
        }
        // Call onCachedData synchronously for all cache policies (except network-only) when we have cached data
        // This prevents loading flash by setting data before first render
        if (effectiveCachePolicy !== 'network-only' && cached && cached.data) {
            onCachedData === null || onCachedData === void 0 ? void 0 : onCachedData(cached.data);
        }
        if (effectiveCachePolicy === 'cache-only') {
            if (!cached || cached.source === "none") {
                const error = new _errors__WEBPACK_IMPORTED_MODULE_1__.CombinedError({
                    networkError: new _errors__WEBPACK_IMPORTED_MODULE_1__.CacheMissError()
                });
                onError === null || onError === void 0 ? void 0 : onError(error);
                // Notify error callback
                onQueryError === null || onQueryError === void 0 ? void 0 : onQueryError(signature, error);
                return {
                    data: null,
                    error
                };
            }
            // Notify watchers about cache-only hit with data and dependencies
            onQueryData === null || onQueryData === void 0 ? void 0 : onQueryData({
                signature,
                data: cached.data,
                dependencies: cached.dependencies,
                cachePolicy: effectiveCachePolicy
            });
            const result = {
                data: cached.data,
                error: null
            };
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(result.data);
            return result;
        }
        if (effectiveCachePolicy === 'cache-first') {
            if (cached && cached.ok.canonical && cached.ok.strict) {
                // Check if strict signature matches (pagination args haven't changed)
                // If strictSignature is present and matches, return cached data
                // If strictSignature doesn't match, fetch from network (pagination changed)
                const strictSignature = plan.makeSignature(false, variables);
                const strictMatches = cached.ok.strictSignature === strictSignature;
                if (strictMatches) {
                    // Strict match: pagination args haven't changed, return cached data
                    onQueryData === null || onQueryData === void 0 ? void 0 : onQueryData({
                        signature,
                        data: cached.data,
                        dependencies: cached.dependencies,
                        cachePolicy: effectiveCachePolicy
                    });
                    const result = {
                        data: cached.data,
                        error: null
                    };
                    onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(result.data);
                    return result;
                }
            // No strict match: pagination args changed, fall through to network fetch
            }
        }
        if (effectiveCachePolicy === 'cache-and-network') {
            if (cached && cached.ok.canonical) {
                // Notify watchers so lastData is set (prevents duplicate emission if network data is same)
                onQueryData === null || onQueryData === void 0 ? void 0 : onQueryData({
                    signature,
                    data: cached.data,
                    dependencies: cached.dependencies,
                    cachePolicy: effectiveCachePolicy
                });
                // Return the network request Promise (resolves with fresh network data)
                return performRequest();
            }
        }
        return performRequest();
    };
    /**
   * Execute a GraphQL mutation
   */ const executeMutation = async ({ query, variables, ...restOptions })=>{
        const vars = variables || {};
        const compiledQuery = planner.getPlan(query);
        const context = {
            query,
            variables: vars,
            operationType: "mutation",
            compiledQuery
        };
        try {
            const result = await transport.http(context);
            // Write successful mutation result to cache
            if (result.data && !result.error) {
                documents.normalizeDocument({
                    document: query,
                    variables: vars,
                    data: result.data
                });
            }
            return result;
        } catch (err) {
            return {
                data: null,
                error: new _errors__WEBPACK_IMPORTED_MODULE_1__.CombinedError({
                    networkError: err
                })
            };
        }
    };
    /**
   * Execute a GraphQL subscription - returns observable that writes data to cache
   */ const executeSubscription = async ({ query, variables })=>{
        if (!transport.ws) {
            throw new Error("WebSocket transport is not configured. Please provide 'transport.ws' in createCachebay options to use subscriptions.");
        }
        const vars = variables || {};
        const plan = planner.getPlan(query);
        const context = {
            query: plan.networkQuery,
            variables: vars,
            operationType: "subscription",
            compiledQuery: plan
        };
        try {
            const observable = await transport.ws(context);
            // Wrap observable to write incoming data to cache
            return {
                subscribe (observer) {
                    return observable.subscribe({
                        next: (result)=>{
                            // Write successful subscription data to cache
                            if (result.data && !result.error) {
                                documents.normalizeDocument({
                                    document: query,
                                    variables: vars,
                                    data: result.data
                                });
                            }
                            // Forward to observer
                            if (observer.next) {
                                observer.next(result);
                            }
                        },
                        error: (err)=>{
                            // Forward error to observer
                            if (observer.error) {
                                observer.error(err);
                            }
                        },
                        complete: ()=>{
                            // Forward completion to observer
                            if (observer.complete) {
                                observer.complete();
                            }
                        }
                    });
                }
            };
        } catch (err) {
            return {
                subscribe (observer) {
                    if (observer.error) {
                        observer.error(err);
                    }
                    return {
                        unsubscribe: ()=>{}
                    };
                }
            };
        }
    };
    return {
        executeQuery,
        executeMutation,
        executeSubscription
    };
};


}),
"../cachebay/src/core/optimistic.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  createOptimistic: () => (createOptimistic)
});
/* ESM import */var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../cachebay/src/core/constants.ts");
/* ESM import */var _compiler_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../cachebay/src/compiler/utils.ts");


const ENTITY_WRITE = Symbol("EntityWrite");
const ENTITY_DELETE = Symbol("EntityDelete");
const CONNECTION_ADD_NODE = Symbol("ConnectionAddNode");
const CONNECTION_REMOVE_NODE = Symbol("ConnectionRemoveNode");
const CONNECTION_PATCH = Symbol("ConnectionPatch");
const EDGE_INDEX_REGEX = /\.edges:(\d+)$/;
const cloneJSON = (value)=>{
    return JSON.parse(JSON.stringify(value));
};
const parseRecordId = (recordId)=>{
    const colonIndex = recordId.indexOf(":");
    if (colonIndex < 0) {
        return {};
    }
    return {
        typename: recordId.slice(0, colonIndex) || undefined,
        id: recordId.slice(colonIndex + 1) || undefined
    };
};
const isCanonicalKey = (id)=>{
    return id.startsWith("@connection.");
};
const extractEdgeMeta = (meta)=>{
    if (!meta || typeof meta !== "object") {
        return undefined;
    }
    const result = {};
    for(const key in meta){
        if (key !== "cursor") {
            result[key] = meta[key];
        }
    }
    return Object.keys(result).length > 0 ? result : undefined;
};
const getCursorIndexKey = (canonicalKey)=>{
    return `${canonicalKey}::cursorIndex`;
};
const readCursorIndex = (graph, canonicalKey)=>{
    const index = graph.getRecord(getCursorIndexKey(canonicalKey));
    return index || {};
};
const writeCursorIndex = (graph, canonicalKey, index)=>{
    graph.putRecord(getCursorIndexKey(canonicalKey), index);
};
const writeCursorIndexPatch = (graph, canonicalKey, patch)=>{
    graph.putRecord(getCursorIndexKey(canonicalKey), patch);
};
const getEdgeCursor = (graph, edgeRef)=>{
    const edge = graph.getRecord(edgeRef);
    return (edge === null || edge === void 0 ? void 0 : edge.cursor) || null;
};
const shiftCursorIndicesAfter = (graph, canonicalKey, fromPosition, shift)=>{
    if (shift === 0) {
        return;
    }
    const cursorIndex = readCursorIndex(graph, canonicalKey);
    const keys = Object.keys(cursorIndex);
    if (keys.length === 0) {
        return;
    }
    const patch = {};
    let hasChanges = false;
    for(let i = 0; i < keys.length; i++){
        const cursor = keys[i];
        const pos = cursorIndex[cursor];
        if (pos >= fromPosition) {
            patch[cursor] = pos + shift;
            hasChanges = true;
        }
    }
    if (hasChanges) {
        writeCursorIndexPatch(graph, canonicalKey, patch);
    }
};
const addCursorToIndex = (graph, canonicalKey, cursor, position)=>{
    const cursorIndex = readCursorIndex(graph, canonicalKey);
    if (cursor in cursorIndex) {
        return;
    }
    writeCursorIndexPatch(graph, canonicalKey, {
        [cursor]: position
    });
};
const removeCursorFromIndex = (graph, canonicalKey, cursor)=>{
    const cursorIndex = readCursorIndex(graph, canonicalKey);
    if (!(cursor in cursorIndex)) {
        return;
    }
    graph.putRecord(getCursorIndexKey(canonicalKey), {
        [cursor]: undefined
    });
};
const getEdgeRefs = (canonical)=>{
    const edgesField = canonical === null || canonical === void 0 ? void 0 : canonical.edges;
    if (!edgesField || typeof edgesField !== "object") {
        return [];
    }
    return Array.isArray(edgesField.__refs) ? edgesField.__refs : [];
};
const setEdgeRefs = (canonical, refs)=>{
    if (!canonical.edges || typeof canonical.edges !== "object") {
        canonical.edges = {
            __refs: refs
        };
    } else {
        canonical.edges.__refs = refs;
    }
};
const shallowCopy = (source)=>{
    const result = {};
    for(const key in source){
        result[key] = source[key];
    }
    return result;
};
// === Edge key counter (avoids O(n) scans for next index) ===
const getEdgeCounterKey = (canonicalKey)=>{
    return `${canonicalKey}::edgeCounter`;
};
const readEdgeCounter = (graph, canonicalKey)=>{
    const rec = graph.getRecord(getEdgeCounterKey(canonicalKey));
    // Store as object { value } to align with patch semantics of putRecord
    if (rec && typeof rec === "object" && typeof rec.value === "number") {
        return rec.value;
    }
    return 0;
};
const nextEdgeIndex = (graph, canonicalKey)=>{
    const next = readEdgeCounter(graph, canonicalKey) + 1;
    graph.putRecord(getEdgeCounterKey(canonicalKey), {
        value: next
    });
    return next;
};
// Kept for back-compat in case it's ever called elsewhere.
// Now falls back to regex scan ONLY if no counter is present.
const findNextEdgeIndex = (canonical, graph, canonicalKey)=>{
    if (graph && canonicalKey) {
        return nextEdgeIndex(graph, canonicalKey);
    }
    const refs = getEdgeRefs(canonical);
    if (refs.length === 0) {
        return 0;
    }
    let maxIndex = -1;
    for(let i = 0; i < refs.length; i++){
        var _refs_i;
        const match = (_refs_i = refs[i]) === null || _refs_i === void 0 ? void 0 : _refs_i.match(EDGE_INDEX_REGEX);
        if (match) {
            const number = Number(match[1]);
            if (!Number.isNaN(number) && number > maxIndex) {
                maxIndex = number;
            }
        }
    }
    return maxIndex + 1;
};
const findEdgeByNode = (graph, refs, entityKey)=>{
    for(let i = 0; i < refs.length; i++){
        var _edge_node;
        const edge = graph.getRecord(refs[i]);
        if ((edge === null || edge === void 0 ? void 0 : (_edge_node = edge.node) === null || _edge_node === void 0 ? void 0 : _edge_node.__ref) === entityKey) {
            return i;
        }
    }
    return -1;
};
const findAnchorIndex = (graph, refs, anchorKey)=>{
    for(let i = 0; i < refs.length; i++){
        var _edge_node;
        const edge = graph.getRecord(refs[i]);
        if ((edge === null || edge === void 0 ? void 0 : (_edge_node = edge.node) === null || _edge_node === void 0 ? void 0 : _edge_node.__ref) === anchorKey) {
            return i;
        }
    }
    const anchorId = anchorKey.includes(":") ? anchorKey.slice(anchorKey.indexOf(":") + 1) : anchorKey;
    for(let i = 0; i < refs.length; i++){
        var _edge_node1;
        const edge = graph.getRecord(refs[i]);
        const nodeKey = edge === null || edge === void 0 ? void 0 : (_edge_node1 = edge.node) === null || _edge_node1 === void 0 ? void 0 : _edge_node1.__ref;
        if (!nodeKey) {
            continue;
        }
        const node = graph.getRecord(nodeKey);
        if ((node === null || node === void 0 ? void 0 : node.id) != null && String(node.id) === String(anchorId)) {
            return i;
        }
    }
    return -1;
};
const insertEdge = (graph, canonicalKey, canonical, entityKey, edgeMeta, position, anchorKey)=>{
    var _entityKey_split_;
    const refs = getEdgeRefs(canonical);
    const existingIndex = findEdgeByNode(graph, refs, entityKey);
    if (existingIndex >= 0) {
        if (edgeMeta) {
            graph.putRecord(refs[existingIndex], shallowCopy(edgeMeta));
        }
        return;
    }
    // Use O(1) counter instead of scanning existing refs
    const edgeIndex = findNextEdgeIndex(canonical, graph, canonicalKey);
    const edgeKey = `${canonicalKey}.edges.${edgeIndex}`;
    const nodeType = ((_entityKey_split_ = entityKey.split(":")[0]) === null || _entityKey_split_ === void 0 ? void 0 : _entityKey_split_.trim()) || "";
    const edgeTypename = nodeType ? `${nodeType}Edge` : "Edge";
    const edgeRecord = {
        __typename: edgeTypename,
        node: {
            __ref: entityKey
        }
    };
    if (edgeMeta) {
        for(const key in edgeMeta){
            edgeRecord[key] = edgeMeta[key];
        }
    }
    graph.putRecord(edgeKey, edgeRecord);
    const newRefs = [
        ...refs
    ];
    let insertPosition;
    if (position === "start") {
        newRefs.unshift(edgeKey);
        insertPosition = 0;
    } else if (position === "end") {
        newRefs.push(edgeKey);
        insertPosition = newRefs.length - 1;
    } else {
        const insertAt = anchorKey ? findAnchorIndex(graph, refs, anchorKey) : -1;
        if (insertAt < 0) {
            if (position === "before") {
                newRefs.unshift(edgeKey);
                insertPosition = 0;
            } else {
                newRefs.push(edgeKey);
                insertPosition = newRefs.length - 1;
            }
        } else {
            insertPosition = position === "before" ? insertAt : insertAt + 1;
            newRefs.splice(insertPosition, 0, edgeKey);
        }
    }
    setEdgeRefs(canonical, newRefs);
    const cursor = getEdgeCursor(graph, edgeKey);
    if (cursor) {
        if (insertPosition < refs.length) {
            shiftCursorIndicesAfter(graph, canonicalKey, insertPosition, 1);
        }
        addCursorToIndex(graph, canonicalKey, cursor, insertPosition);
    } else if (insertPosition < refs.length) {
        shiftCursorIndicesAfter(graph, canonicalKey, insertPosition, 1);
    }
};
const removeEdge = (graph, canonicalKey, canonical, entityKey)=>{
    const refs = getEdgeRefs(canonical);
    for(let i = 0; i < refs.length; i++){
        var _edge_node;
        const edge = graph.getRecord(refs[i]);
        if ((edge === null || edge === void 0 ? void 0 : (_edge_node = edge.node) === null || _edge_node === void 0 ? void 0 : _edge_node.__ref) === entityKey) {
            const newRefs = [
                ...refs
            ];
            newRefs.splice(i, 1);
            setEdgeRefs(canonical, newRefs);
            const cursor = getEdgeCursor(graph, refs[i]);
            if (cursor) {
                removeCursorFromIndex(graph, canonicalKey, cursor);
            }
            shiftCursorIndicesAfter(graph, canonicalKey, i + 1, -1);
            return true;
        }
    }
    return false;
};
const createEmptyCanonical = (canonicalKey)=>{
    return {
        __typename: "Connection",
        edges: {
            __refs: []
        },
        pageInfo: {
            __ref: `${canonicalKey}.pageInfo`
        }
    };
};
const cloneCanonical = (canonical)=>{
    return {
        __typename: canonical.__typename,
        edges: {
            __refs: [
                ...getEdgeRefs(canonical)
            ]
        },
        pageInfo: canonical.pageInfo || {}
    };
};
const ensurePageInfo = (graph, canonicalKey)=>{
    const pageInfoKey = `${canonicalKey}.pageInfo`;
    if (!graph.getRecord(pageInfoKey)) {
        graph.putRecord(pageInfoKey, {
            __typename: "PageInfo"
        });
    }
};
const patchPageInfo = (graph, canonical, pageInfoPatch)=>{
    var _canonical_pageInfo;
    const pageInfoRef = (_canonical_pageInfo = canonical.pageInfo) === null || _canonical_pageInfo === void 0 ? void 0 : _canonical_pageInfo.__ref;
    if (!pageInfoRef) {
        return;
    }
    const current = graph.getRecord(pageInfoRef) || {};
    const updated = shallowCopy(current);
    for(const key in pageInfoPatch){
        updated[key] = pageInfoPatch[key];
    }
    graph.putRecord(pageInfoRef, updated);
};
const writeEntity = (graph, recordId, patch, policy)=>{
    const prevRecord = graph.getRecord(recordId);
    const { typename, id } = parseRecordId(recordId);
    if (policy === "replace" || !prevRecord) {
        const nextTypename = patch.__typename ?? typename ?? (prevRecord === null || prevRecord === void 0 ? void 0 : prevRecord.__typename);
        const nextId = (patch.id != null ? String(patch.id) : undefined) ?? id ?? (prevRecord === null || prevRecord === void 0 ? void 0 : prevRecord.id);
        const record = shallowCopy(patch);
        if (record.__typename === undefined && nextTypename) {
            record.__typename = nextTypename;
        }
        if (record.id === undefined && nextId) {
            record.id = nextId;
        }
        graph.putRecord(recordId, record);
    } else {
        graph.putRecord(recordId, patch);
    }
};
const deleteEntity = (graph, recordId)=>{
    graph.removeRecord(recordId);
};
const restoreEntity = (graph, recordId, snapshot)=>{
    if (snapshot === null) {
        graph.removeRecord(recordId);
        return;
    }
    const current = graph.getRecord(recordId);
    if (current) {
        const deletions = {};
        for(const key in current){
            if (!(key in snapshot)) {
                deletions[key] = undefined;
            }
        }
        if (Object.keys(deletions).length > 0) {
            graph.putRecord(recordId, deletions);
        }
    }
    graph.putRecord(recordId, snapshot);
};
const captureBaseline = (layer, graph, recordId)=>{
    if (layer.touched.has(recordId)) {
        return;
    }
    layer.touched.add(recordId);
    if (!layer.localBase.has(recordId)) {
        const snapshot = graph.getRecord(recordId);
        layer.localBase.set(recordId, snapshot ? cloneJSON(snapshot) : null);
    }
};
const applyEntityOp = (graph, op)=>{
    if (op.kind === ENTITY_WRITE) {
        writeEntity(graph, op.recordId, op.patch, op.policy);
    } else {
        deleteEntity(graph, op.recordId);
    }
};
const applyConnectionOp = (graph, op)=>{
    let canonical = graph.getRecord(op.connectionKey);
    if (!canonical || typeof canonical !== "object") {
        canonical = createEmptyCanonical(op.connectionKey);
        if (op.kind !== CONNECTION_REMOVE_NODE) {
            ensurePageInfo(graph, op.connectionKey);
        }
    } else {
        canonical = cloneCanonical(canonical);
    }
    if (op.kind === CONNECTION_ADD_NODE) {
        insertEdge(graph, op.connectionKey, canonical, op.entityKey, op.meta, op.position, op.anchor);
    } else if (op.kind === CONNECTION_REMOVE_NODE) {
        removeEdge(graph, op.connectionKey, canonical, op.entityKey);
    } else {
        if (op.patch.pageInfo) {
            patchPageInfo(graph, canonical, op.patch.pageInfo);
        }
        for(const key in op.patch){
            if (key !== "pageInfo") {
                canonical[key] = op.patch[key];
            }
        }
    }
    graph.putRecord(op.connectionKey, canonical);
};
const recordOp = (layer, graph, op)=>{
    const recordId = "recordId" in op ? op.recordId : op.connectionKey;
    captureBaseline(layer, graph, recordId);
    if ("recordId" in op) {
        applyEntityOp(graph, op);
    } else {
        applyConnectionOp(graph, op);
    }
};
const revertEntities = (layer, graph)=>{
    for (const [recordId, snapshot] of layer.localBase){
        if (!isCanonicalKey(recordId)) {
            restoreEntity(graph, recordId, snapshot);
        }
    }
};
const revertConnectionOp = (layer, graph, op)=>{
    let canonical = graph.getRecord(op.connectionKey);
    if (!canonical || typeof canonical !== "object") {
        canonical = createEmptyCanonical(op.connectionKey);
    } else {
        canonical = cloneCanonical(canonical);
    }
    if (op.kind === CONNECTION_ADD_NODE) {
        removeEdge(graph, op.connectionKey, canonical, op.entityKey);
        graph.putRecord(op.connectionKey, canonical);
        return;
    }
    if (op.kind === CONNECTION_REMOVE_NODE) {
        const baseline = layer.localBase.get(op.connectionKey) || {};
        const baseRefs = getEdgeRefs(baseline);
        let edgeRef = null;
        for(let i = 0; i < baseRefs.length; i++){
            var _edge_node;
            const edge = graph.getRecord(baseRefs[i]);
            if ((edge === null || edge === void 0 ? void 0 : (_edge_node = edge.node) === null || _edge_node === void 0 ? void 0 : _edge_node.__ref) === op.entityKey) {
                edgeRef = baseRefs[i];
                break;
            }
        }
        if (edgeRef) {
            const wantIndex = baseRefs.indexOf(edgeRef);
            const currentRefs = getEdgeRefs(canonical);
            if (!currentRefs.includes(edgeRef)) {
                const newRefs = [
                    ...currentRefs
                ];
                const insertPosition = Math.max(0, Math.min(wantIndex, newRefs.length));
                newRefs.splice(insertPosition, 0, edgeRef);
                setEdgeRefs(canonical, newRefs);
                const cursor = getEdgeCursor(graph, edgeRef);
                if (cursor) {
                    if (insertPosition < currentRefs.length) {
                        shiftCursorIndicesAfter(graph, op.connectionKey, insertPosition, 1);
                    }
                    addCursorToIndex(graph, op.connectionKey, cursor, insertPosition);
                } else if (insertPosition < currentRefs.length) {
                    shiftCursorIndicesAfter(graph, op.connectionKey, insertPosition, 1);
                }
            }
        } else {
            insertEdge(graph, op.connectionKey, canonical, op.entityKey, undefined, "end", null);
        }
        graph.putRecord(op.connectionKey, canonical);
        return;
    }
    if (op.kind === CONNECTION_PATCH) {
        const baseline = layer.localBase.get(op.connectionKey) || {};
        if (op.patch.pageInfo) {
            var _canonical_pageInfo;
            const pageInfoRef = (_canonical_pageInfo = canonical.pageInfo) === null || _canonical_pageInfo === void 0 ? void 0 : _canonical_pageInfo.__ref;
            if (pageInfoRef) {
                var _baseline_pageInfo;
                const basePageInfo = ((_baseline_pageInfo = baseline.pageInfo) === null || _baseline_pageInfo === void 0 ? void 0 : _baseline_pageInfo.__ref) ? graph.getRecord(baseline.pageInfo.__ref) || {} : {};
                const current = graph.getRecord(pageInfoRef) || {};
                const updated = shallowCopy(current);
                for(const key in op.patch.pageInfo){
                    const baseValue = basePageInfo[key];
                    if (baseValue === undefined) {
                        delete updated[key];
                    } else {
                        updated[key] = baseValue;
                    }
                }
                graph.putRecord(pageInfoRef, updated);
            }
        }
        for(const key in op.patch){
            if (key === "pageInfo") {
                continue;
            }
            const baseValue = baseline[key];
            if (baseValue === undefined) {
                delete canonical[key];
            } else {
                canonical[key] = baseValue;
            }
        }
        graph.putRecord(op.connectionKey, canonical);
    }
};
const revertConnections = (layer, graph)=>{
    for(let i = layer.connectionOps.length - 1; i >= 0; i--){
        revertConnectionOp(layer, graph, layer.connectionOps[i]);
    }
};
const createOptimistic = ({ graph })=>{
    const pending = new Set();
    let nextLayerId = 1;
    const resolveParentId = (parent)=>{
        if (typeof parent === "string") {
            return parent === "Query" ? _constants__WEBPACK_IMPORTED_MODULE_0__.ROOT_ID : parent;
        }
        if (parent === "Query") {
            return _constants__WEBPACK_IMPORTED_MODULE_0__.ROOT_ID;
        }
        return graph.identify(parent) || _constants__WEBPACK_IMPORTED_MODULE_0__.ROOT_ID;
    };
    const createBuilder = (layer, recording)=>{
        const ensureEntity = (node)=>{
            const entityKey = graph.identify(node);
            if (!entityKey) {
                return null;
            }
            // Avoid no-op writes (perf): if node only has __typename/id, skip the merge
            const patch = {};
            for(const key in node){
                if (key !== "__typename" && key !== "id") {
                    patch[key] = node[key];
                }
            }
            const hasFields = Object.keys(patch).length > 0;
            const op = {
                kind: ENTITY_WRITE,
                recordId: entityKey,
                patch,
                policy: "merge"
            };
            if (recording) {
                if (hasFields) {
                    layer.entityOps.push(op);
                    recordOp(layer, graph, op);
                }
            } else {
                if (hasFields) {
                    writeEntity(graph, entityKey, patch, "merge");
                }
            }
            return entityKey;
        };
        const resolveAnchor = (anchor)=>{
            if (!anchor) {
                return null;
            }
            return typeof anchor === "string" ? anchor : graph.identify(anchor) || null;
        };
        return {
            patch (target, patchOrFn, opts) {
                const recordId = typeof target === "string" ? target : graph.identify(target);
                if (!recordId) {
                    return;
                }
                const previous = graph.getRecord(recordId) || {};
                const delta = typeof patchOrFn === "function" ? patchOrFn(cloneJSON(previous)) : patchOrFn;
                if (!delta || typeof delta !== "object") {
                    return;
                }
                // Skip empty patch objects
                let hasAny = false;
                for(const _ in delta){
                    hasAny = true;
                    break;
                }
                if (!hasAny) {
                    return;
                }
                const mode = (opts === null || opts === void 0 ? void 0 : opts.mode) ?? "merge";
                const patch = shallowCopy(delta);
                const op = {
                    kind: ENTITY_WRITE,
                    recordId,
                    patch,
                    policy: mode
                };
                if (recording) {
                    layer.entityOps.push(op);
                    recordOp(layer, graph, op);
                } else {
                    writeEntity(graph, recordId, patch, mode);
                }
            },
            delete (target) {
                const recordId = typeof target === "string" ? target : graph.identify(target);
                if (!recordId) {
                    return;
                }
                const op = {
                    kind: ENTITY_DELETE,
                    recordId
                };
                if (recording) {
                    layer.entityOps.push(op);
                    recordOp(layer, graph, op);
                } else {
                    deleteEntity(graph, recordId);
                }
            },
            connection (input) {
                let canonicalKey;
                if (typeof input === "string") {
                    canonicalKey = input;
                } else {
                    const parent = resolveParentId(input.parent);
                    const filters = input.filters || {};
                    const filterKeys = Object.keys(filters);
                    canonicalKey = (0,_compiler_utils__WEBPACK_IMPORTED_MODULE_1__.buildConnectionCanonicalKey)({
                        fieldName: input.key,
                        buildArgs: (v)=>v || {},
                        connectionFilters: filterKeys
                    }, parent, filters);
                }
                return {
                    addNode (node, opts = {}) {
                        const entityKey = ensureEntity(node);
                        if (!entityKey) {
                            return;
                        }
                        const meta = extractEdgeMeta(opts.edge);
                        const position = opts.position ?? "end";
                        const anchor = resolveAnchor(opts.anchor);
                        const op = {
                            kind: CONNECTION_ADD_NODE,
                            connectionKey: canonicalKey,
                            entityKey,
                            meta,
                            position,
                            anchor
                        };
                        if (recording) {
                            layer.connectionOps.push(op);
                            recordOp(layer, graph, op);
                        } else {
                            applyConnectionOp(graph, op);
                        }
                    },
                    removeNode (ref) {
                        const entityKey = typeof ref === "string" ? ref : graph.identify(ref);
                        if (!entityKey) {
                            return;
                        }
                        const op = {
                            kind: CONNECTION_REMOVE_NODE,
                            connectionKey: canonicalKey,
                            entityKey
                        };
                        if (recording) {
                            layer.connectionOps.push(op);
                            recordOp(layer, graph, op);
                        } else {
                            applyConnectionOp(graph, op);
                        }
                    },
                    patch (patchOrFn) {
                        const previous = graph.getRecord(canonicalKey) || {};
                        const delta = typeof patchOrFn === "function" ? patchOrFn(cloneJSON(previous)) : patchOrFn;
                        if (!delta || typeof delta !== "object") {
                            return;
                        }
                        // Skip empty patch objects
                        let hasAny = false;
                        for(const _ in delta){
                            hasAny = true;
                            break;
                        }
                        if (!hasAny) {
                            return;
                        }
                        const patch = shallowCopy(delta);
                        const op = {
                            kind: CONNECTION_PATCH,
                            connectionKey: canonicalKey,
                            patch
                        };
                        if (recording) {
                            layer.connectionOps.push(op);
                            recordOp(layer, graph, op);
                        } else {
                            applyConnectionOp(graph, op);
                        }
                    },
                    key: canonicalKey
                };
            }
        };
    };
    const modifyOptimistic = (builder)=>{
        const layer = {
            id: nextLayerId++,
            entityOps: [],
            connectionOps: [],
            touched: new Set(),
            localBase: new Map(),
            builder
        };
        pending.add(layer);
        builder(createBuilder(layer, true), {
            phase: "optimistic"
        });
        return {
            commit (data) {
                revertEntities(layer, graph);
                revertConnections(layer, graph);
                layer.localBase.clear();
                layer.entityOps.length = 0;
                layer.connectionOps.length = 0;
                layer.touched.clear();
                layer.builder(createBuilder(layer, false), {
                    phase: "commit",
                    data
                });
                pending.delete(layer);
            },
            revert () {
                if (!pending.delete(layer)) {
                    return;
                }
                revertEntities(layer, graph);
                revertConnections(layer, graph);
                layer.localBase.clear();
                layer.entityOps.length = 0;
                layer.connectionOps.length = 0;
                layer.touched.clear();
            }
        };
    };
    const replayOptimistic = (hint)=>{
        const connectionScope = (hint === null || hint === void 0 ? void 0 : hint.connections) ? new Set(hint.connections) : null;
        const entityScope = (hint === null || hint === void 0 ? void 0 : hint.entities) ? new Set(hint.entities) : null;
        const added = [];
        const removed = [];
        const sortedLayers = Array.from(pending).sort((a, b)=>a.id - b.id);
        for (const layer of sortedLayers){
            for (const op of layer.entityOps){
                if (entityScope && !entityScope.has(op.recordId)) {
                    continue;
                }
                applyEntityOp(graph, op);
            }
            for (const op of layer.connectionOps){
                if (connectionScope && !connectionScope.has(op.connectionKey)) {
                    continue;
                }
                if (op.kind === CONNECTION_ADD_NODE) {
                    added.push(op.entityKey);
                } else if (op.kind === CONNECTION_REMOVE_NODE) {
                    removed.push(op.entityKey);
                }
                applyConnectionOp(graph, op);
            }
        }
        return {
            added,
            removed
        };
    };
    const inspect = ()=>{
        const sortedLayers = Array.from(pending).sort((a, b)=>a.id - b.id);
        const layers = [];
        for (const layer of sortedLayers){
            const entityOps = [];
            for (const op of layer.entityOps){
                entityOps.push(shallowCopy(op));
            }
            const connectionOps = [];
            for (const op of layer.connectionOps){
                connectionOps.push(shallowCopy(op));
            }
            const touched = [];
            for (const key of layer.touched){
                touched.push(key);
            }
            const localBaseKeys = [];
            const localBase = {};
            for (const [key, value] of layer.localBase){
                localBaseKeys.push(key);
                localBase[key] = cloneJSON(value);
            }
            layers.push({
                id: layer.id,
                entityOps,
                connectionOps,
                touched,
                localBaseKeys,
                localBase
            });
        }
        return {
            total: layers.length,
            layers
        };
    };
    return {
        modifyOptimistic,
        replayOptimistic,
        inspect
    };
};


}),
"../cachebay/src/core/planner.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  createPlanner: () => (createPlanner)
});
/* ESM import */var _compiler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../cachebay/src/compiler/index.ts");

const createPlanner = ()=>{
    // Cache for DocumentNode → (fragmentName|"" → plan)
    const docCache = new WeakMap();
    // Cache for string docs → key = doc + "::" + fragmentName
    const strCache = new Map();
    const getPlan = (docOrPlan, opts)=>{
        // Already compiled? just return it
        if ((0,_compiler__WEBPACK_IMPORTED_MODULE_0__.isCachePlan)(docOrPlan)) return docOrPlan;
        const fragKey = (opts === null || opts === void 0 ? void 0 : opts.fragmentName) ?? "";
        if (typeof docOrPlan === "string") {
            const key = `${docOrPlan}::${fragKey}`;
            const hit = strCache.get(key);
            if (hit) return hit;
            const plan = (0,_compiler__WEBPACK_IMPORTED_MODULE_0__.compilePlan)(docOrPlan, opts ?? {});
            strCache.set(key, plan);
            return plan;
        }
        // DocumentNode path
        let inner = docCache.get(docOrPlan);
        if (!inner) {
            inner = new Map();
            docCache.set(docOrPlan, inner);
        }
        const hit = inner.get(fragKey);
        if (hit) return hit;
        const plan = (0,_compiler__WEBPACK_IMPORTED_MODULE_0__.compilePlan)(docOrPlan, opts ?? {});
        inner.set(fragKey, plan);
        return plan;
    };
    return {
        getPlan
    };
};


}),
"../cachebay/src/core/queries.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  createQueries: () => (createQueries)
});
/* ESM import */var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../cachebay/src/core/utils.ts");
// src/core/queries.ts

const createQueries = ({ documents, planner })=>{
    const watchers = new Map();
    const depIndex = new Map();
    const signatureToWatchers = new Map(); // Multiple watchers per signature
    let watcherSeq = 1;
    // --- Batched broadcasting ---
    let pendingTouched = new Set();
    let flushScheduled = false;
    const scheduleFlush = ()=>{
        if (flushScheduled) {
            return;
        }
        flushScheduled = true;
        queueMicrotask(()=>{
            flushScheduled = false;
            if (pendingTouched.size === 0) {
                return;
            }
            const touched = Array.from(pendingTouched);
            pendingTouched.clear();
            const affected = new Set();
            for (const id of touched){
                const ws = depIndex.get(id);
                if (ws) {
                    for (const k of ws)affected.add(k);
                }
            }
            if (affected.size === 0) {
                return;
            }
            for (const k of affected){
                const w = watchers.get(k);
                if (!w) continue;
                // Skip if recently emitted by handleQueryExecuted (coalescing)
                if (w.skipNextPropagate) {
                    continue;
                }
                const result = documents.materializeDocument({
                    document: w.query,
                    variables: w.variables,
                    canonical: true,
                    fingerprint: true,
                    force: true
                });
                // Always refresh deps so missing -> fulfilled transitions trigger
                updateWatcherDependencies(k, result.dependencies);
                if (result.source === "none") {
                    continue;
                }
                const recycled = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.recycleSnapshots)(w.lastData, result.data);
                if (recycled !== w.lastData) {
                    w.lastData = recycled;
                    try {
                        w.onData(recycled);
                    } catch (e) {
                        var _w_onError;
                        (_w_onError = w.onError) === null || _w_onError === void 0 ? void 0 : _w_onError.call(w, e);
                    }
                }
            }
        });
    };
    /**
   * Propagate data changes to watchers tracking the given dependencies
   */ const propagateData = (touched)=>{
        for (const value of touched){
            pendingTouched.add(value);
        }
        scheduleFlush();
    };
    /**
   * Propagate error to all watchers with the given signature
   */ const propagateError = (signature, error)=>{
        // Find all watchers with this signature
        const watcherSet = signatureToWatchers.get(signature);
        if (!watcherSet) return;
        for (const watcherId of watcherSet){
            const watcher = watchers.get(watcherId);
            if (watcher === null || watcher === void 0 ? void 0 : watcher.onError) {
                watcher.onError(error);
            }
        }
    };
    // --- Dep index maintenance ---
    const updateWatcherDependencies = (watcherId, nextDeps)=>{
        const watcher = watchers.get(watcherId);
        if (!watcher) return;
        const old = watcher.deps;
        const next = nextDeps;
        // fast path
        if (old.size === next.size) {
            let same = true;
            for (const d of old)if (!next.has(d)) {
                same = false;
                break;
            }
            if (same) return;
        }
        // remove old
        for (const d of old){
            if (!next.has(d)) {
                const set = depIndex.get(d);
                if (set) {
                    set.delete(watcherId);
                    if (set.size === 0) depIndex.delete(d);
                }
            }
        }
        // add new
        for (const d of next){
            if (!old.has(d)) {
                let set = depIndex.get(d);
                if (!set) depIndex.set(d, set = new Set());
                set.add(watcherId);
            }
        }
        watcher.deps = next;
    };
    // --- Public API ---
    const readQuery = ({ query, variables = {} })=>{
        const result = documents.materializeDocument({
            document: query,
            variables,
            canonical: true,
            fingerprint: true,
            force: true
        });
        if (result.source !== "none") {
            return result.data;
        }
        return null;
    };
    const writeQuery = ({ query, variables = {}, data })=>{
        documents.normalizeDocument({
            document: query,
            variables,
            data
        });
    };
    const watchQuery = ({ query, variables = {}, onData, onError, immediate = true })=>{
        const watcherId = watcherSeq++;
        // Generate signature for error tracking (always canonical)
        const plan = planner.getPlan(query);
        const signature = plan.makeSignature(true, variables);
        const watcher = {
            query,
            variables,
            signature,
            onData,
            onError,
            deps: new Set(),
            lastData: undefined
        };
        watchers.set(watcherId, watcher);
        // Add to signature → watchers mapping (multiple watchers per signature)
        let watcherSet = signatureToWatchers.get(signature);
        if (!watcherSet) {
            watcherSet = new Set();
            signatureToWatchers.set(signature, watcherSet);
        }
        watcherSet.add(watcherId);
        // If immediate, materialize synchronously to get initial data
        if (immediate) {
            const initial = documents.materializeDocument({
                document: query,
                variables,
                canonical: true,
                fingerprint: true,
                force: false
            });
            // Track deps even if initial data is missing
            updateWatcherDependencies(watcherId, initial.dependencies);
            if (initial.source !== "none") {
                watcher.lastData = initial.data;
                try {
                    onData(initial.data);
                } catch (e) {
                    onError === null || onError === void 0 ? void 0 : onError(e);
                }
            }
        // No else - watchers simply don't emit on cache miss, they wait for data
        } else {
            // Even with immediate: false, register basic dependencies from query plan
            // This ensures the watcher is notified when entities are added to the cache
            // Use canonical mode to match the signature mode (watchers use canonical signatures)
            const basicDeps = plan.getDependencies(true, variables);
            updateWatcherDependencies(watcherId, basicDeps);
        }
        return {
            unsubscribe: ()=>{
                const w = watchers.get(watcherId);
                if (!w) return;
                // Remove from dep index
                for (const d of w.deps){
                    const set = depIndex.get(d);
                    if (set) {
                        set.delete(watcherId);
                        if (set.size === 0) depIndex.delete(d);
                    }
                }
                // Remove from signature → watchers mapping
                const watcherSet = signatureToWatchers.get(w.signature);
                if (watcherSet) {
                    watcherSet.delete(watcherId);
                    if (watcherSet.size === 0) {
                        signatureToWatchers.delete(w.signature);
                    }
                }
                watchers.delete(watcherId);
            },
            update: ({ variables: newVariables = {}, immediate = true })=>{
                const w = watchers.get(watcherId);
                if (!w) return;
                // Update watcher state
                w.variables = newVariables;
                const plan = planner.getPlan(w.query);
                const newSignature = plan.makeSignature(true, newVariables);
                // Update signature mapping if signature changed
                if (w.signature !== newSignature) {
                    // Remove from old signature set
                    const oldSet = signatureToWatchers.get(w.signature);
                    if (oldSet) {
                        oldSet.delete(watcherId);
                        if (oldSet.size === 0) {
                            signatureToWatchers.delete(w.signature);
                        }
                    }
                    // Add to new signature set
                    w.signature = newSignature;
                    let newSet = signatureToWatchers.get(newSignature);
                    if (!newSet) {
                        newSet = new Set();
                        signatureToWatchers.set(newSignature, newSet);
                    }
                    newSet.add(watcherId);
                }
                // If immediate, materialize and emit synchronously
                if (immediate) {
                    const res = documents.materializeDocument({
                        document: w.query,
                        variables: newVariables,
                        canonical: true,
                        fingerprint: true,
                        force: false
                    });
                    updateWatcherDependencies(watcherId, res.dependencies);
                    if (res.source !== "none") {
                        // recycleSnapshots automatically preserves object identity for unchanged parts
                        const recycled = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.recycleSnapshots)(w.lastData, res.data);
                        // Only emit if data actually changed
                        if (recycled !== w.lastData) {
                            w.lastData = recycled;
                            try {
                                w.onData(recycled);
                            } catch (e) {
                                var _w_onError;
                                (_w_onError = w.onError) === null || _w_onError === void 0 ? void 0 : _w_onError.call(w, e);
                            }
                        }
                    }
                // No else - watchers simply don't emit on cache miss, they wait for data
                }
            }
        };
    };
    /**
   * Callback handler from operations - updates watcher dependencies and directly emits data
   * Handles multiple watchers per signature
   */ const handleQueryExecuted = ({ signature, data, dependencies })=>{
        // Find all watchers with this signature
        const watcherSet = signatureToWatchers.get(signature);
        if (!watcherSet) return;
        // Emit to all watchers with this signature
        for (const watcherId of watcherSet){
            const w = watchers.get(watcherId);
            if (!w) continue;
            // Update dependencies
            updateWatcherDependencies(watcherId, dependencies);
            // Directly emit data to watcher (avoid redundant materialize)
            // recycleSnapshots to preserve object identity
            const recycled = (0,_utils__WEBPACK_IMPORTED_MODULE_0__.recycleSnapshots)(w.lastData, data);
            if (recycled !== w.lastData) {
                w.lastData = recycled;
                // Set flag to skip next propagateData emission (coalescing)
                // This prevents double emission when normalize triggers graph.onChange
                w.skipNextPropagate = true;
                Promise.resolve().then(()=>{
                    w.skipNextPropagate = false;
                });
                try {
                    w.onData(recycled);
                } catch (e) {
                    if (w.onError) {
                        w.onError(e);
                    }
                }
            }
        }
    };
    return {
        readQuery,
        writeQuery,
        watchQuery,
        propagateData,
        propagateError,
        handleQueryExecuted
    };
};


}),
"../cachebay/src/core/ssr.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  createSSR: () => (createSSR)
});
/**
 * JSON-only deep clone for snapshots
 * @private
 */ const cloneJSON = (data)=>JSON.parse(JSON.stringify(data));
/**
 * Create SSR de/hydration layer for graph store
 * @param options - SSR configuration
 * @param deps - Required dependencies (graph)
 * @returns SSR instance with dehydrate, hydrate, and isHydrating methods
 */ const createSSR = (options = {}, { graph })=>{
    let hydrating = false;
    const { hydrationTimeout = 100 } = options;
    /** Serialize all graph records. */ const dehydrate = ()=>{
        const ids = graph.keys();
        const out = new Array(ids.length);
        for(let i = 0; i < ids.length; i++){
            const id = ids[i];
            const snap = graph.getRecord(id);
            out[i] = [
                id,
                snap != null ? cloneJSON(snap) : undefined
            ];
        }
        return {
            records: out
        };
    };
    /**
   * Hydrate a snapshot into the graph.
   * - input can be a plain snapshot or a function that emits it (stream-friendly)
   * - clears the graph first, then restores records
   * - `isHydrating()` is true until the next microtask
   */ const hydrate = (input)=>{
        const run = (snapshot)=>{
            if (!snapshot || !Array.isArray(snapshot.records)) return;
            graph.clear();
            for(let i = 0; i < snapshot.records.length; i++){
                const entry = snapshot.records[i];
                if (!entry) continue;
                const [id, snap] = entry;
                if (!id || !snap || typeof snap !== "object") continue;
                graph.putRecord(id, snap);
            }
        };
        if (hydrationTimeout !== 0) {
            hydrating = true;
            setTimeout(()=>{
                hydrating = false;
            }, hydrationTimeout);
        }
        if (typeof input === "function") {
            input((s)=>run(s));
        } else {
            run(input);
        }
    };
    return {
        dehydrate,
        hydrate,
        isHydrating: ()=>hydrating
    };
};


}),
"../cachebay/src/core/utils.ts": (function (__unused_webpack_module, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WeakStringMap: () => (WeakStringMap),
  fingerprintNodes: () => (fingerprintNodes),
  hasTypename: () => (hasTypename),
  isDataDeepEqual: () => (isDataDeepEqual),
  isObject: () => (isObject),
  recycleSnapshots: () => (recycleSnapshots),
  stableStringify: () => (stableStringify)
});
class WeakStringMap {
    constructor(){
        this.objectToKey = new WeakMap(); // object -> string
        this.keyToRef = new Map(); // string -> WeakRef(object)
        this.registry = new FinalizationRegistry((key)=>{
            // Object was GC'd; drop the stale string->ref mapping
            this.keyToRef.delete(key);
        });
    }
    set(key, obj) {
        // If this object was previously bound to another key, clear that old key.
        const oldKey = this.objectToKey.get(obj);
        if (oldKey && oldKey !== key) {
            this.keyToRef.delete(oldKey);
        }
        // If this key was previously bound to another object, unlink it.
        const prevRef = this.keyToRef.get(key);
        const prevObj = prevRef === null || prevRef === void 0 ? void 0 : prevRef.deref();
        if (prevObj && prevObj !== obj) {
            this.objectToKey.delete(prevObj);
            this.registry.unregister(prevObj);
        }
        this.objectToKey.set(obj, key);
        this.keyToRef.set(key, new WeakRef(obj));
        // Use the object itself as the unregister token (we don't keep a strong ref to it).
        this.registry.register(obj, key, obj);
    }
    get(key) {
        const ref = this.keyToRef.get(key);
        if (!ref) {
            return undefined;
        }
        const obj = ref.deref();
        if (!obj) {
            // Stale entry; prune eagerly.
            this.keyToRef.delete(key);
        }
        return obj;
    }
    has(key) {
        const ref = this.keyToRef.get(key);
        if (!ref) {
            return false;
        }
        const obj = ref.deref();
        if (!obj) {
            this.keyToRef.delete(key);
            return false;
        }
        return true;
    }
    delete(key) {
        const ref = this.keyToRef.get(key);
        if (!ref) {
            return false;
        }
        this.keyToRef.delete(key);
        const obj = ref.deref();
        if (obj) {
            this.objectToKey.delete(obj);
            this.registry.unregister(obj);
        }
        return true;
    }
    // Optional helper: retrieve the string key by object.
    keyOf(obj) {
        return this.objectToKey.get(obj);
    }
    // Optional: sweep all keys and prune any now-stale refs.
    prune() {
        for (const [k, ref] of this.keyToRef){
            if (!ref.deref()) {
                this.keyToRef.delete(k);
            }
        }
    }
}
const isObject = (value)=>{
    return value !== null && typeof value === "object";
};
/**
 * Deep equality comparison for JSON data structures (normalized cache data).
 * Optimized for common patterns: __ref objects, __refs arrays, primitives.
 * Not a true deep equal - designed specifically for cache comparison.
 */ const isDataDeepEqual = (a, b)=>{
    // Fast path: reference equality (includes null === null, undefined === undefined)
    if (a === b) return true;
    // null and undefined are different values
    if (a == null || b == null) return false;
    // Fast path: different types (string vs number, etc)
    const typeA = typeof a;
    const typeB = typeof b;
    if (typeA !== typeB) return false;
    // Fast path: primitives (already handled by a === b above, but helps V8 optimize)
    if (typeA !== 'object') return false;
    // Special case: __ref objects (very common in normalized cache)
    if (a.__ref !== undefined && b.__ref !== undefined) {
        return a.__ref === b.__ref;
    }
    // Special case: __refs arrays (single-level array of refs, no recursion needed)
    if (Array.isArray(a.__refs) && Array.isArray(b.__refs)) {
        if (a.__refs.length !== b.__refs.length) return false;
        for(let i = 0; i < a.__refs.length; i++){
            if (a.__refs[i] !== b.__refs[i]) return false;
        }
        return true;
    }
    // Fast path: array vs non-array
    const isArrayA = Array.isArray(a);
    const isArrayB = Array.isArray(b);
    if (isArrayA !== isArrayB) return false;
    // Arrays
    if (isArrayA) {
        if (a.length !== b.length) return false;
        for(let i = 0; i < a.length; i++){
            if (!isDataDeepEqual(a[i], b[i])) return false;
        }
        return true;
    }
    // Objects - check key count first (fast rejection)
    const keysA = Object.keys(a);
    const keysB = Object.keys(b);
    if (keysA.length !== keysB.length) return false;
    // Compare object properties
    for(let i = 0; i < keysA.length; i++){
        const key = keysA[i];
        if (!isDataDeepEqual(a[key], b[key])) return false;
    }
    return true;
};
const hasTypename = (value)=>{
    return !!(value && typeof value === "object" && typeof value.__typename === "string");
};
const stableStringify = (object)=>{
    const walk = (object)=>{
        if (!isObject(object)) {
            return object;
        }
        if (Array.isArray(object)) {
            return object.map(walk);
        }
        const result = {};
        for(let i = 0, keys = Object.keys(object).sort(); i < keys.length; i++){
            const key = keys[i];
            result[key] = walk(object[key]);
        }
        return result;
    };
    try {
        return JSON.stringify(walk(object));
    } catch  {
        return "";
    }
};
/**
 * FNV-1a hash utilities for fingerprinting
 * 32-bit FNV-1a style mixer; fast & stable enough for fingerprints
 * https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function
 */ const FNV_SEED = 0x811c9dc5 | 0;
const FNV_PRIME = 16777619;
/**
 * Combine base node fingerprint with child fingerprints using FNV-1a.
 * Order-dependent: child order matters for the final hash.
 * Inlined mixing for maximum performance.
 *
 * For arrays without a base node, pass 0 as baseNode.
 */ const fingerprintNodes = (baseNode, childNodes)=>{
    let h = Math.imul(FNV_SEED ^ baseNode, FNV_PRIME) | 0;
    for(let i = 0; i < childNodes.length; i++){
        h = Math.imul(h ^ childNodes[i], FNV_PRIME) | 0;
    }
    return h >>> 0;
};
const FINGERPRINT_KEY = '__version';
/**
 * Recycles subtrees from prevData by replacing equal subtrees in nextData.
 * Uses __version fingerprints for O(1) equality checks.
 *
 * IMPORTANT: Only works with materialized results that have __version fingerprints.
 *
 * @param prevData - Previous materialized snapshot
 * @param nextData - New materialized snapshot to recycle into
 * @returns Recycled snapshot (reuses prevData subtrees where possible)
 */ function recycleSnapshots(prevData, nextData) {
    // Fast path: reference equality
    if (prevData === nextData) {
        return nextData;
    }
    // Only recycle objects and arrays
    if (typeof prevData !== 'object' || !prevData || typeof nextData !== 'object' || !nextData) {
        return nextData;
    }
    // Only recycle plain objects and arrays
    const prevIsArray = Array.isArray(prevData);
    const nextIsArray = Array.isArray(nextData);
    if (prevIsArray !== nextIsArray) {
        return nextData;
    }
    if (!prevIsArray && prevData.constructor !== Object) {
        return nextData;
    }
    if (!nextIsArray && nextData.constructor !== Object) {
        return nextData;
    }
    // Compare fingerprints - materialized results always have __version
    const prevVersion = prevData[FINGERPRINT_KEY];
    const nextVersion = nextData[FINGERPRINT_KEY];
    if (prevVersion === nextVersion) {
        // Fingerprints match - data is identical, reuse prevData
        return prevData;
    }
    // Fingerprints differ - recycle children
    if (prevIsArray && nextIsArray) {
        const prevArray = prevData;
        const nextArray = nextData;
        // Try to recycle each element by comparing all elements
        // This handles both append and prepend cases
        let allEqual = prevArray.length === nextArray.length;
        for(let i = 0; i < nextArray.length; i++){
            const nextItem = nextArray[i];
            const nextFp = nextItem === null || nextItem === void 0 ? void 0 : nextItem[FINGERPRINT_KEY];
            // Try to find matching item in prevArray by fingerprint
            let recycled = nextItem;
            if (nextFp !== undefined) {
                for(let j = 0; j < prevArray.length; j++){
                    const prevItem = prevArray[j];
                    const prevFp = prevItem === null || prevItem === void 0 ? void 0 : prevItem[FINGERPRINT_KEY];
                    if (prevFp === nextFp) {
                        recycled = prevItem;
                        break;
                    }
                }
            }
            if (recycled !== nextItem) {
                nextArray[i] = recycled;
            }
            if (i >= prevArray.length || recycled !== prevArray[i]) {
                allEqual = false;
            }
        }
        return allEqual ? prevData : nextData;
    } else {
        // Both are plain objects
        const prevObject = prevData;
        const nextObject = nextData;
        const prevKeys = Object.keys(prevObject);
        const nextKeys = Object.keys(nextObject);
        if (prevKeys.length !== nextKeys.length) {
            return nextData;
        }
        let allEqual = true;
        for (const key of nextKeys){
            const recycled = recycleSnapshots(prevObject[key], nextObject[key]);
            if (recycled !== nextObject[key]) {
                nextObject[key] = recycled;
            }
            if (recycled !== prevObject[key]) {
                allEqual = false;
            }
        }
        return allEqual ? prevData : nextData;
    }
}


}),
"mitata": (function (module) {
"use strict";
module.exports = require("mitata");

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/arrayLikeToArray.js": (function (module) {
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js": (function (module, __unused_webpack_exports, __webpack_require__) {
var arrayLikeToArray = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/arrayLikeToArray.js");
function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return arrayLikeToArray(r);
}
module.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/construct.js": (function (module, __unused_webpack_exports, __webpack_require__) {
var isNativeReflectConstruct = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js");
var setPrototypeOf = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/setPrototypeOf.js");
function _construct(t, e, r) {
  if (isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return r && setPrototypeOf(p, r.prototype), p;
}
module.exports = _construct, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js": (function (module, __unused_webpack_exports, __webpack_require__) {
var unsupportedIterableToArray = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");
function _createForOfIteratorHelper(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (!t) {
    if (Array.isArray(r) || (t = unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
      t && (r = t);
      var _n = 0,
        F = function F() {};
      return {
        s: F,
        n: function n() {
          return _n >= r.length ? {
            done: !0
          } : {
            done: !1,
            value: r[_n++]
          };
        },
        e: function e(r) {
          throw r;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o,
    a = !0,
    u = !1;
  return {
    s: function s() {
      t = t.call(r);
    },
    n: function n() {
      var r = t.next();
      return a = r.done, r;
    },
    e: function e(r) {
      u = !0, o = r;
    },
    f: function f() {
      try {
        a || null == t["return"] || t["return"]();
      } finally {
        if (u) throw o;
      }
    }
  };
}
module.exports = _createForOfIteratorHelper, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/defineProperty.js": (function (module, __unused_webpack_exports, __webpack_require__) {
var toPropertyKey = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/toPropertyKey.js");
function _defineProperty(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}
module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/getPrototypeOf.js": (function (module) {
function _getPrototypeOf(t) {
  return module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _getPrototypeOf(t);
}
module.exports = _getPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/inheritsLoose.js": (function (module, __unused_webpack_exports, __webpack_require__) {
var setPrototypeOf = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/setPrototypeOf.js");
function _inheritsLoose(t, o) {
  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, setPrototypeOf(t, o);
}
module.exports = _inheritsLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/interopRequireDefault.js": (function (module) {
function _interopRequireDefault(e) {
  return e && e.__esModule ? e : {
    "default": e
  };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/isNativeFunction.js": (function (module) {
function _isNativeFunction(t) {
  try {
    return -1 !== Function.toString.call(t).indexOf("[native code]");
  } catch (n) {
    return "function" == typeof t;
  }
}
module.exports = _isNativeFunction, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js": (function (module) {
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
  } catch (t) {}
  return (module.exports = _isNativeReflectConstruct = function _isNativeReflectConstruct() {
    return !!t;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports)();
}
module.exports = _isNativeReflectConstruct, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/iterableToArray.js": (function (module) {
function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}
module.exports = _iterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/nonIterableSpread.js": (function (module) {
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectSpread2.js": (function (module, __unused_webpack_exports, __webpack_require__) {
var defineProperty = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/defineProperty.js");
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function (r) {
      return Object.getOwnPropertyDescriptor(e, r).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {
      defineProperty(e, r, t[r]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {
      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
    });
  }
  return e;
}
module.exports = _objectSpread2, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js": (function (module) {
function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (-1 !== e.indexOf(n)) continue;
    t[n] = r[n];
  }
  return t;
}
module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/setPrototypeOf.js": (function (module) {
function _setPrototypeOf(t, e) {
  return module.exports = _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {
    return t.__proto__ = e, t;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _setPrototypeOf(t, e);
}
module.exports = _setPrototypeOf, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/toConsumableArray.js": (function (module, __unused_webpack_exports, __webpack_require__) {
var arrayWithoutHoles = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js");
var iterableToArray = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/iterableToArray.js");
var unsupportedIterableToArray = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");
var nonIterableSpread = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/nonIterableSpread.js");
function _toConsumableArray(r) {
  return arrayWithoutHoles(r) || iterableToArray(r) || unsupportedIterableToArray(r) || nonIterableSpread();
}
module.exports = _toConsumableArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/toPrimitive.js": (function (module, __unused_webpack_exports, __webpack_require__) {
var _typeof = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/typeof.js")/* ["default"] */["default"]);
function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
module.exports = toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/toPropertyKey.js": (function (module, __unused_webpack_exports, __webpack_require__) {
var _typeof = (__webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/typeof.js")/* ["default"] */["default"]);
var toPrimitive = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/toPrimitive.js");
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}
module.exports = toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/typeof.js": (function (module) {
function _typeof(o) {
  "@babel/helpers - typeof";

  return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(o);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js": (function (module, __unused_webpack_exports, __webpack_require__) {
var arrayLikeToArray = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/arrayLikeToArray.js");
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? arrayLikeToArray(r, a) : void 0;
  }
}
module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/wrapNativeSuper.js": (function (module, __unused_webpack_exports, __webpack_require__) {
var getPrototypeOf = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/getPrototypeOf.js");
var setPrototypeOf = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/setPrototypeOf.js");
var isNativeFunction = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/isNativeFunction.js");
var construct = __webpack_require__("../../node_modules/.pnpm/@babel+runtime@7.28.4/node_modules/@babel/runtime/helpers/construct.js");
function _wrapNativeSuper(t) {
  var r = "function" == typeof Map ? new Map() : void 0;
  return module.exports = _wrapNativeSuper = function _wrapNativeSuper(t) {
    if (null === t || !isNativeFunction(t)) return t;
    if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== r) {
      if (r.has(t)) return r.get(t);
      r.set(t, Wrapper);
    }
    function Wrapper() {
      return construct(t, arguments, getPrototypeOf(this).constructor);
    }
    return Wrapper.prototype = Object.create(t.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), setPrototypeOf(Wrapper, t);
  }, module.exports.__esModule = true, module.exports["default"] = module.exports, _wrapNativeSuper(t);
}
module.exports = _wrapNativeSuper, module.exports.__esModule = true, module.exports["default"] = module.exports;

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/core/cache.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ApolloCache: () => (ApolloCache)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/fragments.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/sizes.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/getFromAST.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/.pnpm/zen-observable-ts@1.2.5/node_modules/zen-observable-ts/module.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/mergeDeep.js");
/* ESM import */var _wry_caches__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@wry+caches@1.0.1/node_modules/@wry/caches/lib/weak.js");
/* ESM import */var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/getMemoryInternals.js");
/* ESM import */var _core_equalByQuery_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/core/equalByQuery.js");
/* ESM import */var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var _masking_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/masking/maskFragment.js");
/* ESM import */var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/deprecation/index.js");









var ApolloCache = /** @class */ (function () {
    function ApolloCache() {
        this.assumeImmutableResults = false;
        // Make sure we compute the same (===) fragment query document every
        // time we receive the same fragment in readFragment.
        this.getFragmentDoc = (0,optimism__WEBPACK_IMPORTED_MODULE_0__.wrap)(_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentQueryDocument, {
            max: _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.cacheSizes["cache.fragmentQueryDocuments"] ||
                1000 /* defaultCacheSizes["cache.fragmentQueryDocuments"] */,
            cache: _wry_caches__WEBPACK_IMPORTED_MODULE_4__.WeakCache,
        });
    }
    // Function used to lookup a fragment when a fragment definition is not part
    // of the GraphQL document. This is useful for caches, such as InMemoryCache,
    // that register fragments ahead of time so they can be referenced by name.
    ApolloCache.prototype.lookupFragment = function (fragmentName) {
        return null;
    };
    // Transactional API
    // The batch method is intended to replace/subsume both performTransaction
    // and recordOptimisticTransaction, but performTransaction came first, so we
    // provide a default batch implementation that's just another way of calling
    // performTransaction. Subclasses of ApolloCache (such as InMemoryCache) can
    // override the batch method to do more interesting things with its options.
    ApolloCache.prototype.batch = function (options) {
        var _this = this;
        var optimisticId = typeof options.optimistic === "string" ? options.optimistic
            : options.optimistic === false ? null
                : void 0;
        var updateResult;
        this.performTransaction(function () { return (updateResult = options.update(_this)); }, optimisticId);
        return updateResult;
    };
    ApolloCache.prototype.recordOptimisticTransaction = function (transaction, optimisticId) {
        this.performTransaction(transaction, optimisticId);
    };
    // Optional API
    // Called once per input document, allowing the cache to make static changes
    // to the query, such as adding __typename fields.
    ApolloCache.prototype.transformDocument = function (document) {
        return document;
    };
    // Called before each ApolloLink request, allowing the cache to make dynamic
    // changes to the query, such as filling in missing fragment definitions.
    ApolloCache.prototype.transformForLink = function (document) {
        return document;
    };
    ApolloCache.prototype.identify = function (object) {
        return;
    };
    ApolloCache.prototype.gc = function () {
        return [];
    };
    ApolloCache.prototype.modify = function (options) {
        return false;
    };
    // DataProxy API
    ApolloCache.prototype.readQuery = function (options, optimistic) {
        var _this = this;
        if (optimistic === void 0) { optimistic = !!options.optimistic; }
        if (globalThis.__DEV__ !== false) {
            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(options, "canonizeResults", "cache.readQuery");
        }
        return (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)("canonizeResults", function () {
            return _this.read((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), { rootId: options.id || "ROOT_QUERY", optimistic: optimistic }));
        });
    };
    /** {@inheritDoc @apollo/client!ApolloClient#watchFragment:member(1)} */
    ApolloCache.prototype.watchFragment = function (options) {
        var _this = this;
        var fragment = options.fragment, fragmentName = options.fragmentName, from = options.from, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, otherOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(options, ["fragment", "fragmentName", "from", "optimistic"]);
        var query = this.getFragmentDoc(fragment, fragmentName);
        // While our TypeScript types do not allow for `undefined` as a valid
        // `from`, its possible `useFragment` gives us an `undefined` since it
        // calls` cache.identify` and provides that value to `from`. We are
        // adding this fix here however to ensure those using plain JavaScript
        // and using `cache.identify` themselves will avoid seeing the obscure
        // warning.
        var id = typeof from === "undefined" || typeof from === "string" ?
            from
            : this.identify(from);
        var dataMasking = !!options[Symbol.for("apollo.dataMasking")];
        if (globalThis.__DEV__ !== false) {
            var actualFragmentName = fragmentName || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getFragmentDefinition)(fragment).name.value;
            if (!id) {
                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(1, actualFragmentName);
            }
        }
        var diffOptions = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, otherOptions), { returnPartialData: true, id: id, query: query, optimistic: optimistic });
        var latestDiff;
        return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.Observable(function (observer) {
            return _this.watch((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, diffOptions), { immediate: true, callback: function (diff) {
                    var data = dataMasking ?
                        (0,_masking_index_js__WEBPACK_IMPORTED_MODULE_9__.maskFragment)(diff.result, fragment, _this, fragmentName)
                        : diff.result;
                    if (
                    // Always ensure we deliver the first result
                    latestDiff &&
                        (0,_core_equalByQuery_js__WEBPACK_IMPORTED_MODULE_10__.equalByQuery)(query, { data: latestDiff.result }, { data: data }, 
                        // TODO: Fix the type on WatchFragmentOptions so that TVars
                        // extends OperationVariables
                        options.variables)) {
                        return;
                    }
                    var result = {
                        data: data,
                        complete: !!diff.complete,
                    };
                    if (diff.missing) {
                        result.missing = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.mergeDeepArray)(diff.missing.map(function (error) { return error.missing; }));
                    }
                    latestDiff = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, diff), { result: data });
                    observer.next(result);
                } }));
        });
    };
    ApolloCache.prototype.readFragment = function (options, optimistic) {
        var _this = this;
        if (optimistic === void 0) { optimistic = !!options.optimistic; }
        if (globalThis.__DEV__ !== false) {
            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(options, "canonizeResults", "cache.readFragment");
        }
        return (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)("canonizeResults", function () {
            return _this.read((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), { query: _this.getFragmentDoc(options.fragment, options.fragmentName), rootId: options.id, optimistic: optimistic }));
        });
    };
    ApolloCache.prototype.writeQuery = function (_a) {
        var id = _a.id, data = _a.data, options = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(_a, ["id", "data"]);
        return this.write(Object.assign(options, {
            dataId: id || "ROOT_QUERY",
            result: data,
        }));
    };
    ApolloCache.prototype.writeFragment = function (_a) {
        var id = _a.id, data = _a.data, fragment = _a.fragment, fragmentName = _a.fragmentName, options = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(_a, ["id", "data", "fragment", "fragmentName"]);
        return this.write(Object.assign(options, {
            query: this.getFragmentDoc(fragment, fragmentName),
            dataId: id,
            result: data,
        }));
    };
    ApolloCache.prototype.updateQuery = function (options, update) {
        if (globalThis.__DEV__ !== false) {
            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(options, "canonizeResults", "cache.updateQuery");
        }
        return this.batch({
            update: function (cache) {
                var value = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)("canonizeResults", function () {
                    return cache.readQuery(options);
                });
                var data = update(value);
                if (data === void 0 || data === null)
                    return value;
                cache.writeQuery((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), { data: data }));
                return data;
            },
        });
    };
    ApolloCache.prototype.updateFragment = function (options, update) {
        if (globalThis.__DEV__ !== false) {
            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.warnRemovedOption)(options, "canonizeResults", "cache.updateFragment");
        }
        return this.batch({
            update: function (cache) {
                var value = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_5__.muteDeprecations)("canonizeResults", function () {
                    return cache.readFragment(options);
                });
                var data = update(value);
                if (data === void 0 || data === null)
                    return value;
                cache.writeFragment((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, options), { data: data }));
                return data;
            },
        });
    };
    return ApolloCache;
}());

if (globalThis.__DEV__ !== false) {
    ApolloCache.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_12__.getApolloCacheMemoryInternals;
}
//# sourceMappingURL=cache.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/core/types/common.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  MissingFieldError: () => (MissingFieldError)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");

var MissingFieldError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(MissingFieldError, _super);
    function MissingFieldError(message, path, query, variables) {
        var _a;
        // 'Error' breaks prototype chain here
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.path = path;
        _this.query = query;
        _this.variables = variables;
        if (Array.isArray(_this.path)) {
            _this.missing = _this.message;
            for (var i = _this.path.length - 1; i >= 0; --i) {
                _this.missing = (_a = {}, _a[_this.path[i]] = _this.missing, _a);
            }
        }
        else {
            _this.missing = _this.path;
        }
        // We're not using `Object.setPrototypeOf` here as it isn't fully supported
        // on Android (see issue #3236).
        _this.__proto__ = MissingFieldError.prototype;
        return _this;
    }
    return MissingFieldError;
}(Error));

//# sourceMappingURL=common.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/entityStore.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  EntityStore: () => (EntityStore),
  maybeDependOnExistenceOfEntity: () => (maybeDependOnExistenceOfEntity),
  supportsResultCaching: () => (supportsResultCaching)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js");
/* ESM import */var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js");
/* ESM import */var _wry_trie__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/@wry+trie@0.5.0/node_modules/@wry/trie/lib/index.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/storeUtils.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/mergeDeep.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/objects.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/canUse.js");
/* ESM import */var _helpers_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/helpers.js");







var DELETE = Object.create(null);
var delModifier = function () { return DELETE; };
var INVALIDATE = Object.create(null);
var EntityStore = /** @class */ (function () {
    function EntityStore(policies, group) {
        var _this = this;
        this.policies = policies;
        this.group = group;
        this.data = Object.create(null);
        // Maps root entity IDs to the number of times they have been retained, minus
        // the number of times they have been released. Retained entities keep other
        // entities they reference (even indirectly) from being garbage collected.
        this.rootIds = Object.create(null);
        // Lazily tracks { __ref: <dataId> } strings contained by this.data[dataId].
        this.refs = Object.create(null);
        // Bound function that can be passed around to provide easy access to fields
        // of Reference objects as well as ordinary objects.
        this.getFieldValue = function (objectOrReference, storeFieldName) {
            return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objectOrReference) ?
                _this.get(objectOrReference.__ref, storeFieldName)
                : objectOrReference && objectOrReference[storeFieldName]);
        };
        // Returns true for non-normalized StoreObjects and non-dangling
        // References, indicating that readField(name, objOrRef) has a chance of
        // working. Useful for filtering out dangling references from lists.
        this.canRead = function (objOrRef) {
            return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objOrRef) ?
                _this.has(objOrRef.__ref)
                : typeof objOrRef === "object";
        };
        // Bound function that converts an id or an object with a __typename and
        // primary key fields to a Reference object. If called with a Reference object,
        // that same Reference object is returned. Pass true for mergeIntoStore to persist
        // an object into the store.
        this.toReference = function (objOrIdOrRef, mergeIntoStore) {
            if (typeof objOrIdOrRef === "string") {
                return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(objOrIdOrRef);
            }
            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(objOrIdOrRef)) {
                return objOrIdOrRef;
            }
            var id = _this.policies.identify(objOrIdOrRef)[0];
            if (id) {
                var ref = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(id);
                if (mergeIntoStore) {
                    _this.merge(id, objOrIdOrRef);
                }
                return ref;
            }
        };
    }
    // Although the EntityStore class is abstract, it contains concrete
    // implementations of the various NormalizedCache interface methods that
    // are inherited by the Root and Layer subclasses.
    EntityStore.prototype.toObject = function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.data);
    };
    EntityStore.prototype.has = function (dataId) {
        return this.lookup(dataId, true) !== void 0;
    };
    EntityStore.prototype.get = function (dataId, fieldName) {
        this.group.depend(dataId, fieldName);
        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId)) {
            var storeObject = this.data[dataId];
            if (storeObject && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(storeObject, fieldName)) {
                return storeObject[fieldName];
            }
        }
        if (fieldName === "__typename" &&
            _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.policies.rootTypenamesById, dataId)) {
            return this.policies.rootTypenamesById[dataId];
        }
        if (this instanceof Layer) {
            return this.parent.get(dataId, fieldName);
        }
    };
    EntityStore.prototype.lookup = function (dataId, dependOnExistence) {
        // The has method (above) calls lookup with dependOnExistence = true, so
        // that it can later be invalidated when we add or remove a StoreObject for
        // this dataId. Any consumer who cares about the contents of the StoreObject
        // should not rely on this dependency, since the contents could change
        // without the object being added or removed.
        if (dependOnExistence)
            this.group.depend(dataId, "__exists");
        if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId)) {
            return this.data[dataId];
        }
        if (this instanceof Layer) {
            return this.parent.lookup(dataId, dependOnExistence);
        }
        if (this.policies.rootTypenamesById[dataId]) {
            return Object.create(null);
        }
    };
    EntityStore.prototype.merge = function (older, newer) {
        var _this = this;
        var dataId;
        // Convert unexpected references to ID strings.
        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(older))
            older = older.__ref;
        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(newer))
            newer = newer.__ref;
        var existing = typeof older === "string" ? this.lookup((dataId = older)) : older;
        var incoming = typeof newer === "string" ? this.lookup((dataId = newer)) : newer;
        // If newer was a string ID, but that ID was not defined in this store,
        // then there are no fields to be merged, so we're done.
        if (!incoming)
            return;
        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(typeof dataId === "string", 2);
        var merged = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.DeepMerger(storeObjectReconciler).merge(existing, incoming);
        // Even if merged === existing, existing may have come from a lower
        // layer, so we always need to set this.data[dataId] on this level.
        this.data[dataId] = merged;
        if (merged !== existing) {
            delete this.refs[dataId];
            if (this.group.caching) {
                var fieldsToDirty_1 = Object.create(null);
                // If we added a new StoreObject where there was previously none, dirty
                // anything that depended on the existence of this dataId, such as the
                // EntityStore#has method.
                if (!existing)
                    fieldsToDirty_1.__exists = 1;
                // Now invalidate dependents who called getFieldValue for any fields
                // that are changing as a result of this merge.
                Object.keys(incoming).forEach(function (storeFieldName) {
                    if (!existing ||
                        existing[storeFieldName] !== merged[storeFieldName]) {
                        // Always dirty the full storeFieldName, which may include
                        // serialized arguments following the fieldName prefix.
                        fieldsToDirty_1[storeFieldName] = 1;
                        // Also dirty fieldNameFromStoreName(storeFieldName) if it's
                        // different from storeFieldName and this field does not have
                        // keyArgs configured, because that means the cache can't make
                        // any assumptions about how field values with the same field
                        // name but different arguments might be interrelated, so it
                        // must err on the side of invalidating all field values that
                        // share the same short fieldName, regardless of arguments.
                        var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);
                        if (fieldName !== storeFieldName &&
                            !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {
                            fieldsToDirty_1[fieldName] = 1;
                        }
                        // If merged[storeFieldName] has become undefined, and this is the
                        // Root layer, actually delete the property from the merged object,
                        // which is guaranteed to have been created fresh in this method.
                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {
                            delete merged[storeFieldName];
                        }
                    }
                });
                if (fieldsToDirty_1.__typename &&
                    !(existing && existing.__typename) &&
                    // Since we return default root __typename strings
                    // automatically from store.get, we don't need to dirty the
                    // ROOT_QUERY.__typename field if merged.__typename is equal
                    // to the default string (usually "Query").
                    this.policies.rootTypenamesById[dataId] === merged.__typename) {
                    delete fieldsToDirty_1.__typename;
                }
                Object.keys(fieldsToDirty_1).forEach(function (fieldName) {
                    return _this.group.dirty(dataId, fieldName);
                });
            }
        }
    };
    EntityStore.prototype.modify = function (dataId, fields) {
        var _this = this;
        var storeObject = this.lookup(dataId);
        if (storeObject) {
            var changedFields_1 = Object.create(null);
            var needToMerge_1 = false;
            var allDeleted_1 = true;
            var sharedDetails_1 = {
                DELETE: DELETE,
                INVALIDATE: INVALIDATE,
                isReference: _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference,
                toReference: this.toReference,
                canRead: this.canRead,
                readField: function (fieldNameOrOptions, from) {
                    return _this.policies.readField(typeof fieldNameOrOptions === "string" ?
                        {
                            fieldName: fieldNameOrOptions,
                            from: from || (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.makeReference)(dataId),
                        }
                        : fieldNameOrOptions, { store: _this });
                },
            };
            Object.keys(storeObject).forEach(function (storeFieldName) {
                var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);
                var fieldValue = storeObject[storeFieldName];
                if (fieldValue === void 0)
                    return;
                var modify = typeof fields === "function" ? fields : (fields[storeFieldName] || fields[fieldName]);
                if (modify) {
                    var newValue = modify === delModifier ? DELETE : (modify((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.maybeDeepFreeze)(fieldValue), (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, sharedDetails_1), { fieldName: fieldName, storeFieldName: storeFieldName, storage: _this.getStorage(dataId, storeFieldName) })));
                    if (newValue === INVALIDATE) {
                        _this.group.dirty(dataId, storeFieldName);
                    }
                    else {
                        if (newValue === DELETE)
                            newValue = void 0;
                        if (newValue !== fieldValue) {
                            changedFields_1[storeFieldName] = newValue;
                            needToMerge_1 = true;
                            fieldValue = newValue;
                            if (globalThis.__DEV__ !== false) {
                                var checkReference = function (ref) {
                                    if (_this.lookup(ref.__ref) === undefined) {
                                        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(3, ref);
                                        return true;
                                    }
                                };
                                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(newValue)) {
                                    checkReference(newValue);
                                }
                                else if (Array.isArray(newValue)) {
                                    // Warn about writing "mixed" arrays of Reference and non-Reference objects
                                    var seenReference = false;
                                    var someNonReference = void 0;
                                    for (var _i = 0, newValue_1 = newValue; _i < newValue_1.length; _i++) {
                                        var value = newValue_1[_i];
                                        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(value)) {
                                            seenReference = true;
                                            if (checkReference(value))
                                                break;
                                        }
                                        else {
                                            // Do not warn on primitive values, since those could never be represented
                                            // by a reference. This is a valid (albeit uncommon) use case.
                                            if (typeof value === "object" && !!value) {
                                                var id = _this.policies.identify(value)[0];
                                                // check if object could even be referenced, otherwise we are not interested in it for this warning
                                                if (id) {
                                                    someNonReference = value;
                                                }
                                            }
                                        }
                                        if (seenReference && someNonReference !== undefined) {
                                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(4, someNonReference);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (fieldValue !== void 0) {
                    allDeleted_1 = false;
                }
            });
            if (needToMerge_1) {
                this.merge(dataId, changedFields_1);
                if (allDeleted_1) {
                    if (this instanceof Layer) {
                        this.data[dataId] = void 0;
                    }
                    else {
                        delete this.data[dataId];
                    }
                    this.group.dirty(dataId, "__exists");
                }
                return true;
            }
        }
        return false;
    };
    // If called with only one argument, removes the entire entity
    // identified by dataId. If called with a fieldName as well, removes all
    // fields of that entity whose names match fieldName according to the
    // fieldNameFromStoreName helper function. If called with a fieldName
    // and variables, removes all fields of that entity whose names match fieldName
    // and whose arguments when cached exactly match the variables passed.
    EntityStore.prototype.delete = function (dataId, fieldName, args) {
        var _a;
        var storeObject = this.lookup(dataId);
        if (storeObject) {
            var typename = this.getFieldValue(storeObject, "__typename");
            var storeFieldName = fieldName && args ?
                this.policies.getStoreFieldName({ typename: typename, fieldName: fieldName, args: args })
                : fieldName;
            return this.modify(dataId, storeFieldName ? (_a = {},
                _a[storeFieldName] = delModifier,
                _a) : delModifier);
        }
        return false;
    };
    EntityStore.prototype.evict = function (options, limit) {
        var evicted = false;
        if (options.id) {
            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, options.id)) {
                evicted = this.delete(options.id, options.fieldName, options.args);
            }
            if (this instanceof Layer && this !== limit) {
                evicted = this.parent.evict(options, limit) || evicted;
            }
            // Always invalidate the field to trigger rereading of watched
            // queries, even if no cache data was modified by the eviction,
            // because queries may depend on computed fields with custom read
            // functions, whose values are not stored in the EntityStore.
            if (options.fieldName || evicted) {
                this.group.dirty(options.id, options.fieldName || "__exists");
            }
        }
        return evicted;
    };
    EntityStore.prototype.clear = function () {
        this.replace(null);
    };
    EntityStore.prototype.extract = function () {
        var _this = this;
        var obj = this.toObject();
        var extraRootIds = [];
        this.getRootIdSet().forEach(function (id) {
            if (!_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(_this.policies.rootTypenamesById, id)) {
                extraRootIds.push(id);
            }
        });
        if (extraRootIds.length) {
            obj.__META = { extraRootIds: extraRootIds.sort() };
        }
        return obj;
    };
    EntityStore.prototype.replace = function (newData) {
        var _this = this;
        Object.keys(this.data).forEach(function (dataId) {
            if (!(newData && _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(newData, dataId))) {
                _this.delete(dataId);
            }
        });
        if (newData) {
            var __META = newData.__META, rest_1 = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__rest)(newData, ["__META"]);
            Object.keys(rest_1).forEach(function (dataId) {
                _this.merge(dataId, rest_1[dataId]);
            });
            if (__META) {
                __META.extraRootIds.forEach(this.retain, this);
            }
        }
    };
    EntityStore.prototype.retain = function (rootId) {
        return (this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1);
    };
    EntityStore.prototype.release = function (rootId) {
        if (this.rootIds[rootId] > 0) {
            var count = --this.rootIds[rootId];
            if (!count)
                delete this.rootIds[rootId];
            return count;
        }
        return 0;
    };
    // Return a Set<string> of all the ID strings that have been retained by
    // this layer/root *and* any layers/roots beneath it.
    EntityStore.prototype.getRootIdSet = function (ids) {
        if (ids === void 0) { ids = new Set(); }
        Object.keys(this.rootIds).forEach(ids.add, ids);
        if (this instanceof Layer) {
            this.parent.getRootIdSet(ids);
        }
        else {
            // Official singleton IDs like ROOT_QUERY and ROOT_MUTATION are
            // always considered roots for garbage collection, regardless of
            // their retainment counts in this.rootIds.
            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);
        }
        return ids;
    };
    // The goal of garbage collection is to remove IDs from the Root layer of the
    // store that are no longer reachable starting from any IDs that have been
    // explicitly retained (see retain and release, above). Returns an array of
    // dataId strings that were removed from the store.
    EntityStore.prototype.gc = function () {
        var _this = this;
        var ids = this.getRootIdSet();
        var snapshot = this.toObject();
        ids.forEach(function (id) {
            if (_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(snapshot, id)) {
                // Because we are iterating over an ECMAScript Set, the IDs we add here
                // will be visited in later iterations of the forEach loop only if they
                // were not previously contained by the Set.
                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);
                // By removing IDs from the snapshot object here, we protect them from
                // getting removed from the root store layer below.
                delete snapshot[id];
            }
        });
        var idsToRemove = Object.keys(snapshot);
        if (idsToRemove.length) {
            var root_1 = this;
            while (root_1 instanceof Layer)
                root_1 = root_1.parent;
            idsToRemove.forEach(function (id) { return root_1.delete(id); });
        }
        return idsToRemove;
    };
    EntityStore.prototype.findChildRefIds = function (dataId) {
        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.refs, dataId)) {
            var found_1 = (this.refs[dataId] = Object.create(null));
            var root = this.data[dataId];
            if (!root)
                return found_1;
            var workSet_1 = new Set([root]);
            // Within the store, only arrays and objects can contain child entity
            // references, so we can prune the traversal using this predicate:
            workSet_1.forEach(function (obj) {
                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isReference)(obj)) {
                    found_1[obj.__ref] = true;
                    // In rare cases, a { __ref } Reference object may have other fields.
                    // This often indicates a mismerging of References with StoreObjects,
                    // but garbage collection should not be fooled by a stray __ref
                    // property in a StoreObject (ignoring all the other fields just
                    // because the StoreObject looks like a Reference). To avoid this
                    // premature termination of findChildRefIds recursion, we fall through
                    // to the code below, which will handle any other properties of obj.
                }
                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(obj)) {
                    Object.keys(obj).forEach(function (key) {
                        var child = obj[key];
                        // No need to add primitive values to the workSet, since they cannot
                        // contain reference objects.
                        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(child)) {
                            workSet_1.add(child);
                        }
                    });
                }
            });
        }
        return this.refs[dataId];
    };
    EntityStore.prototype.makeCacheKey = function () {
        return this.group.keyMaker.lookupArray(arguments);
    };
    return EntityStore;
}());

// A single CacheGroup represents a set of one or more EntityStore objects,
// typically the Root store in a CacheGroup by itself, and all active Layer
// stores in a group together. A single EntityStore object belongs to only
// one CacheGroup, store.group. The CacheGroup is responsible for tracking
// dependencies, so store.group is helpful for generating unique keys for
// cached results that need to be invalidated when/if those dependencies
// change. If we used the EntityStore objects themselves as cache keys (that
// is, store rather than store.group), the cache would become unnecessarily
// fragmented by all the different Layer objects. Instead, the CacheGroup
// approach allows all optimistic Layer objects in the same linked list to
// belong to one CacheGroup, with the non-optimistic Root object belonging
// to another CacheGroup, allowing resultCaching dependencies to be tracked
// separately for optimistic and non-optimistic entity data.
var CacheGroup = /** @class */ (function () {
    function CacheGroup(caching, parent) {
        if (parent === void 0) { parent = null; }
        this.caching = caching;
        this.parent = parent;
        this.d = null;
        this.resetCaching();
    }
    CacheGroup.prototype.resetCaching = function () {
        this.d = this.caching ? (0,optimism__WEBPACK_IMPORTED_MODULE_1__.dep)() : null;
        this.keyMaker = new _wry_trie__WEBPACK_IMPORTED_MODULE_3__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.canUseWeakMap);
    };
    CacheGroup.prototype.depend = function (dataId, storeFieldName) {
        if (this.d) {
            this.d(makeDepKey(dataId, storeFieldName));
            var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_7__.fieldNameFromStoreName)(storeFieldName);
            if (fieldName !== storeFieldName) {
                // Fields with arguments that contribute extra identifying
                // information to the fieldName (thus forming the storeFieldName)
                // depend not only on the full storeFieldName but also on the
                // short fieldName, so the field can be invalidated using either
                // level of specificity.
                this.d(makeDepKey(dataId, fieldName));
            }
            if (this.parent) {
                this.parent.depend(dataId, storeFieldName);
            }
        }
    };
    CacheGroup.prototype.dirty = function (dataId, storeFieldName) {
        if (this.d) {
            this.d.dirty(makeDepKey(dataId, storeFieldName), 
            // When storeFieldName === "__exists", that means the entity identified
            // by dataId has either disappeared from the cache or was newly added,
            // so the result caching system would do well to "forget everything it
            // knows" about that object. To achieve that kind of invalidation, we
            // not only dirty the associated result cache entry, but also remove it
            // completely from the dependency graph. For the optimism implementation
            // details, see https://github.com/benjamn/optimism/pull/195.
            storeFieldName === "__exists" ? "forget" : "setDirty");
        }
    };
    return CacheGroup;
}());
function makeDepKey(dataId, storeFieldName) {
    // Since field names cannot have '#' characters in them, this method
    // of joining the field name and the ID should be unambiguous, and much
    // cheaper than JSON.stringify([dataId, fieldName]).
    return storeFieldName + "#" + dataId;
}
function maybeDependOnExistenceOfEntity(store, entityId) {
    if (supportsResultCaching(store)) {
        // We use this pseudo-field __exists elsewhere in the EntityStore code to
        // represent changes in the existence of the entity object identified by
        // entityId. This dependency gets reliably dirtied whenever an object with
        // this ID is deleted (or newly created) within this group, so any result
        // cache entries (for example, StoreReader#executeSelectionSet results) that
        // depend on __exists for this entityId will get dirtied as well, leading to
        // the eventual recomputation (instead of reuse) of those result objects the
        // next time someone reads them from the cache.
        store.group.depend(entityId, "__exists");
    }
}
(function (EntityStore) {
    // Refer to this class as EntityStore.Root outside this namespace.
    var Root = /** @class */ (function (_super) {
        (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Root, _super);
        function Root(_a) {
            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;
            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;
            _this.stump = new Stump(_this);
            _this.storageTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_3__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.canUseWeakMap);
            if (seed)
                _this.replace(seed);
            return _this;
        }
        Root.prototype.addLayer = function (layerId, replay) {
            // Adding an optimistic Layer on top of the Root actually adds the Layer
            // on top of the Stump, so the Stump always comes between the Root and
            // any Layer objects that we've added.
            return this.stump.addLayer(layerId, replay);
        };
        Root.prototype.removeLayer = function () {
            // Never remove the root layer.
            return this;
        };
        Root.prototype.getStorage = function () {
            return this.storageTrie.lookupArray(arguments);
        };
        return Root;
    }(EntityStore));
    EntityStore.Root = Root;
})(EntityStore || (EntityStore = {}));
// Not exported, since all Layer instances are created by the addLayer method
// of the EntityStore.Root class.
var Layer = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Layer, _super);
    function Layer(id, parent, replay, group) {
        var _this = _super.call(this, parent.policies, group) || this;
        _this.id = id;
        _this.parent = parent;
        _this.replay = replay;
        _this.group = group;
        replay(_this);
        return _this;
    }
    Layer.prototype.addLayer = function (layerId, replay) {
        return new Layer(layerId, this, replay, this.group);
    };
    Layer.prototype.removeLayer = function (layerId) {
        var _this = this;
        // Remove all instances of the given id, not just the first one.
        var parent = this.parent.removeLayer(layerId);
        if (layerId === this.id) {
            if (this.group.caching) {
                // Dirty every ID we're removing. Technically we might be able to avoid
                // dirtying fields that have values in higher layers, but we don't have
                // easy access to higher layers here, and we're about to recreate those
                // layers anyway (see parent.addLayer below).
                Object.keys(this.data).forEach(function (dataId) {
                    var ownStoreObject = _this.data[dataId];
                    var parentStoreObject = parent["lookup"](dataId);
                    if (!parentStoreObject) {
                        // The StoreObject identified by dataId was defined in this layer
                        // but will be undefined in the parent layer, so we can delete the
                        // whole entity using this.delete(dataId). Since we're about to
                        // throw this layer away, the only goal of this deletion is to dirty
                        // the removed fields.
                        _this.delete(dataId);
                    }
                    else if (!ownStoreObject) {
                        // This layer had an entry for dataId but it was undefined, which
                        // means the entity was deleted in this layer, and it's about to
                        // become undeleted when we remove this layer, so we need to dirty
                        // all fields that are about to be reexposed.
                        _this.group.dirty(dataId, "__exists");
                        Object.keys(parentStoreObject).forEach(function (storeFieldName) {
                            _this.group.dirty(dataId, storeFieldName);
                        });
                    }
                    else if (ownStoreObject !== parentStoreObject) {
                        // If ownStoreObject is not exactly the same as parentStoreObject,
                        // dirty any fields whose values will change as a result of this
                        // removal.
                        Object.keys(ownStoreObject).forEach(function (storeFieldName) {
                            if (!(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {
                                _this.group.dirty(dataId, storeFieldName);
                            }
                        });
                    }
                });
            }
            return parent;
        }
        // No changes are necessary if the parent chain remains identical.
        if (parent === this.parent)
            return this;
        // Recreate this layer on top of the new parent.
        return parent.addLayer(this.id, this.replay);
    };
    Layer.prototype.toObject = function () {
        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, this.parent.toObject()), this.data);
    };
    Layer.prototype.findChildRefIds = function (dataId) {
        var fromParent = this.parent.findChildRefIds(dataId);
        return _helpers_js__WEBPACK_IMPORTED_MODULE_7__.hasOwn.call(this.data, dataId) ? (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;
    };
    Layer.prototype.getStorage = function () {
        var p = this.parent;
        while (p.parent)
            p = p.parent;
        return p.getStorage.apply(p, 
        // @ts-expect-error
        arguments);
    };
    return Layer;
}(EntityStore));
// Represents a Layer permanently installed just above the Root, which allows
// reading optimistically (and registering optimistic dependencies) even when
// no optimistic layers are currently active. The stump.group CacheGroup object
// is shared by any/all Layer objects added on top of the Stump.
var Stump = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__extends)(Stump, _super);
    function Stump(root) {
        return _super.call(this, "EntityStore.Stump", root, function () { }, new CacheGroup(root.group.caching, root.group)) || this;
    }
    Stump.prototype.removeLayer = function () {
        // Never remove the Stump layer.
        return this;
    };
    Stump.prototype.merge = function (older, newer) {
        // We never want to write any data into the Stump, so we forward any merge
        // calls to the Root instead. Another option here would be to throw an
        // exception, but the toReference(object, true) function can sometimes
        // trigger Stump writes (which used to be Root writes, before the Stump
        // concept was introduced).
        return this.parent.merge(older, newer);
    };
    return Stump;
}(Layer));
function storeObjectReconciler(existingObject, incomingObject, property) {
    var existingValue = existingObject[property];
    var incomingValue = incomingObject[property];
    // Wherever there is a key collision, prefer the incoming value, unless
    // it is deeply equal to the existing value. It's worth checking deep
    // equality here (even though blindly returning incoming would be
    // logically correct) because preserving the referential identity of
    // existing data can prevent needless rereading and rerendering.
    return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(existingValue, incomingValue) ? existingValue : incomingValue;
}
function supportsResultCaching(store) {
    // When result caching is disabled, store.depend will be null.
    return !!(store instanceof EntityStore && store.group.caching);
}
//# sourceMappingURL=entityStore.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/helpers.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  TypeOrFieldNameRegExp: () => (TypeOrFieldNameRegExp),
  defaultDataIdFromObject: () => (defaultDataIdFromObject),
  extractFragmentContext: () => (extractFragmentContext),
  fieldNameFromStoreName: () => (fieldNameFromStoreName),
  getTypenameFromStoreObject: () => (getTypenameFromStoreObject),
  hasOwn: () => (hasOwn),
  isArray: () => (/* reexport safe */ _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray),
  isNullish: () => (isNullish),
  makeProcessedFieldsMerger: () => (makeProcessedFieldsMerger),
  normalizeConfig: () => (normalizeConfig),
  selectionSetMatchesResult: () => (selectionSetMatchesResult),
  shouldCanonizeResults: () => (shouldCanonizeResults),
  storeValueIsStoreObject: () => (storeValueIsStoreObject)
});
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/arrays.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/compact.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/storeUtils.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/objects.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/directives.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/mergeDeep.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/fragments.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/getFromAST.js");

var hasOwn = Object.prototype.hasOwnProperty;
function isNullish(value) {
    return value === null || value === void 0;
}

function defaultDataIdFromObject(_a, context) {
    var __typename = _a.__typename, id = _a.id, _id = _a._id;
    if (typeof __typename === "string") {
        if (context) {
            context.keyObject =
                !isNullish(id) ? { id: id }
                    : !isNullish(_id) ? { _id: _id }
                        : void 0;
        }
        // If there is no object.id, fall back to object._id.
        if (isNullish(id) && !isNullish(_id)) {
            id = _id;
        }
        if (!isNullish(id)) {
            return "".concat(__typename, ":").concat(typeof id === "number" || typeof id === "string" ?
                id
                : JSON.stringify(id));
        }
    }
}
var defaultConfig = {
    dataIdFromObject: defaultDataIdFromObject,
    addTypename: true,
    resultCaching: true,
    // Thanks to the shouldCanonizeResults helper, this should be the only line
    // you have to change to reenable canonization by default in the future.
    canonizeResults: false,
};
function normalizeConfig(config) {
    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.compact)(defaultConfig, config);
}
function shouldCanonizeResults(config) {
    var value = config.canonizeResults;
    return value === void 0 ? defaultConfig.canonizeResults : value;
}
function getTypenameFromStoreObject(store, objectOrReference) {
    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isReference)(objectOrReference) ?
        store.get(objectOrReference.__ref, "__typename")
        : objectOrReference && objectOrReference.__typename;
}
var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;
function fieldNameFromStoreName(storeFieldName) {
    var match = storeFieldName.match(TypeOrFieldNameRegExp);
    return match ? match[0] : storeFieldName;
}
function selectionSetMatchesResult(selectionSet, result, variables) {
    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullObject)(result)) {
        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(result) ?
            result.every(function (item) {
                return selectionSetMatchesResult(selectionSet, item, variables);
            })
            : selectionSet.selections.every(function (field) {
                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isField)(field) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.shouldInclude)(field, variables)) {
                    var key = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.resultKeyNameFromField)(field);
                    return (hasOwn.call(result, key) &&
                        (!field.selectionSet ||
                            selectionSetMatchesResult(field.selectionSet, result[key], variables)));
                }
                // If the selection has been skipped with @skip(true) or
                // @include(false), it should not count against the matching. If
                // the selection is not a field, it must be a fragment (inline or
                // named). We will determine if selectionSetMatchesResult for that
                // fragment when we get to it, so for now we return true.
                return true;
            });
    }
    return false;
}
function storeValueIsStoreObject(value) {
    return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullObject)(value) && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isReference)(value) && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_0__.isArray)(value);
}
function makeProcessedFieldsMerger() {
    return new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DeepMerger();
}
function extractFragmentContext(document, fragments) {
    // FragmentMap consisting only of fragments defined directly in document, not
    // including other fragments registered in the FragmentRegistry.
    var fragmentMap = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getFragmentDefinitions)(document));
    return {
        fragmentMap: fragmentMap,
        lookupFragment: function (name) {
            var def = fragmentMap[name];
            if (!def && fragments) {
                def = fragments.lookup(name);
            }
            return def || null;
        },
    };
}
//# sourceMappingURL=helpers.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/inMemoryCache.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  InMemoryCache: () => (InMemoryCache)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js");
/* ESM import */var _wry_equality__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js");
/* ESM import */var _core_cache_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/core/cache.js");
/* ESM import */var _core_types_common_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/core/types/common.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/DocumentTransform.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/transform.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/sizes.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/canonicalStringify.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/print.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/storeUtils.js");
/* ESM import */var _readFromStore_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/readFromStore.js");
/* ESM import */var _writeToStore_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/writeToStore.js");
/* ESM import */var _entityStore_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/entityStore.js");
/* ESM import */var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/reactiveVars.js");
/* ESM import */var _policies_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/policies.js");
/* ESM import */var _helpers_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/helpers.js");
/* ESM import */var _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/getMemoryInternals.js");
/* ESM import */var _utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/deprecation/index.js");


// Make builtins like Map and Set safe to use with non-extensible objects.














var InMemoryCache = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__extends)(InMemoryCache, _super);
    function InMemoryCache(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this) || this;
        _this.watches = new Set();
        _this.addTypenameTransform = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.DocumentTransform(_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.addTypenameToDocument);
        // Override the default value, since InMemoryCache result objects are frozen
        // in development and expected to remain logically immutable in production.
        _this.assumeImmutableResults = true;
        _this.makeVar = _reactiveVars_js__WEBPACK_IMPORTED_MODULE_7__.makeVar;
        _this.txCount = 0;
        if (globalThis.__DEV__ !== false) {
            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_8__.warnRemovedOption)(config, "addTypename", "InMemoryCache", "Please remove the `addTypename` option when initializing `InMemoryCache`.");
            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_8__.warnRemovedOption)(config, "canonizeResults", "InMemoryCache", "Please remove the `canonizeResults` option when initializing `InMemoryCache`.");
        }
        _this.config = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_9__.normalizeConfig)(config);
        _this.addTypename = !!_this.config.addTypename;
        _this.policies = new _policies_js__WEBPACK_IMPORTED_MODULE_10__.Policies({
            cache: _this,
            dataIdFromObject: _this.config.dataIdFromObject,
            possibleTypes: _this.config.possibleTypes,
            typePolicies: _this.config.typePolicies,
        });
        _this.init();
        return _this;
    }
    InMemoryCache.prototype.init = function () {
        // Passing { resultCaching: false } in the InMemoryCache constructor options
        // will completely disable dependency tracking, which will improve memory
        // usage but worsen the performance of repeated reads.
        var rootStore = (this.data = new _entityStore_js__WEBPACK_IMPORTED_MODULE_11__.EntityStore.Root({
            policies: this.policies,
            resultCaching: this.config.resultCaching,
        }));
        // When no optimistic writes are currently active, cache.optimisticData ===
        // cache.data, so there are no additional layers on top of the actual data.
        // When an optimistic update happens, this.optimisticData will become a
        // linked list of EntityStore Layer objects that terminates with the
        // original this.data cache object.
        this.optimisticData = rootStore.stump;
        this.resetResultCache();
    };
    InMemoryCache.prototype.resetResultCache = function (resetResultIdentities) {
        var _this = this;
        var previousReader = this.storeReader;
        var fragments = this.config.fragments;
        this.addTypenameTransform.resetCache();
        fragments === null || fragments === void 0 ? void 0 : fragments.resetCaches();
        // The StoreWriter is mostly stateless and so doesn't really need to be
        // reset, but it does need to have its writer.storeReader reference updated,
        // so it's simpler to update this.storeWriter as well.
        this.storeWriter = new _writeToStore_js__WEBPACK_IMPORTED_MODULE_12__.StoreWriter(this, (this.storeReader = new _readFromStore_js__WEBPACK_IMPORTED_MODULE_13__.StoreReader({
            cache: this,
            addTypename: this.addTypename,
            resultCacheMaxSize: this.config.resultCacheMaxSize,
            canonizeResults: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_9__.shouldCanonizeResults)(this.config),
            canon: resetResultIdentities ? void 0 : (previousReader && previousReader.canon),
            fragments: fragments,
        })), fragments);
        this.maybeBroadcastWatch = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function (c, options) {
            return _this.broadcastWatch(c, options);
        }, {
            max: this.config.resultCacheMaxSize ||
                _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.cacheSizes["inMemoryCache.maybeBroadcastWatch"] ||
                5000 /* defaultCacheSizes["inMemoryCache.maybeBroadcastWatch"] */,
            makeCacheKey: function (c) {
                // Return a cache key (thus enabling result caching) only if we're
                // currently using a data store that can track cache dependencies.
                var store = c.optimistic ? _this.optimisticData : _this.data;
                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_11__.supportsResultCaching)(store)) {
                    var optimistic = c.optimistic, id = c.id, variables = c.variables;
                    return store.makeCacheKey(c.query, 
                    // Different watches can have the same query, optimistic
                    // status, rootId, and variables, but if their callbacks are
                    // different, the (identical) result needs to be delivered to
                    // each distinct callback. The easiest way to achieve that
                    // separation is to include c.callback in the cache key for
                    // maybeBroadcastWatch calls. See issue #5733.
                    c.callback, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.canonicalStringify)({ optimistic: optimistic, id: id, variables: variables }));
                }
            },
        });
        // Since we have thrown away all the cached functions that depend on the
        // CacheGroup dependencies maintained by EntityStore, we should also reset
        // all CacheGroup dependency information.
        new Set([this.data.group, this.optimisticData.group]).forEach(function (group) {
            return group.resetCaching();
        });
    };
    InMemoryCache.prototype.restore = function (data) {
        this.init();
        // Since calling this.init() discards/replaces the entire StoreReader, along
        // with the result caches it maintains, this.data.replace(data) won't have
        // to bother deleting the old data.
        if (data)
            this.data.replace(data);
        return this;
    };
    InMemoryCache.prototype.extract = function (optimistic) {
        if (optimistic === void 0) { optimistic = false; }
        return (optimistic ? this.optimisticData : this.data).extract();
    };
    InMemoryCache.prototype.read = function (options) {
        if (globalThis.__DEV__ !== false) {
            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_8__.warnRemovedOption)(options, "canonizeResults", "cache.read");
        }
        var 
        // Since read returns data or null, without any additional metadata
        // about whether/where there might have been missing fields, the
        // default behavior cannot be returnPartialData = true (like it is
        // for the diff method), since defaulting to true would violate the
        // integrity of the T in the return type. However, partial data may
        // be useful in some cases, so returnPartialData:true may be
        // specified explicitly.
        _a = options.returnPartialData, 
        // Since read returns data or null, without any additional metadata
        // about whether/where there might have been missing fields, the
        // default behavior cannot be returnPartialData = true (like it is
        // for the diff method), since defaulting to true would violate the
        // integrity of the T in the return type. However, partial data may
        // be useful in some cases, so returnPartialData:true may be
        // specified explicitly.
        returnPartialData = _a === void 0 ? false : _a;
        try {
            return (this.storeReader.diffQueryAgainstStore((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), { store: options.optimistic ? this.optimisticData : this.data, config: this.config, returnPartialData: returnPartialData })).result || null);
        }
        catch (e) {
            if (e instanceof _core_types_common_js__WEBPACK_IMPORTED_MODULE_16__.MissingFieldError) {
                // Swallow MissingFieldError and return null, so callers do not need to
                // worry about catching "normal" exceptions resulting from incomplete
                // cache data. Unexpected errors will be re-thrown. If you need more
                // information about which fields were missing, use cache.diff instead,
                // and examine diffResult.missing.
                return null;
            }
            throw e;
        }
    };
    InMemoryCache.prototype.write = function (options) {
        try {
            ++this.txCount;
            return this.storeWriter.writeToStore(this.data, options);
        }
        finally {
            if (!--this.txCount && options.broadcast !== false) {
                this.broadcastWatches();
            }
        }
    };
    InMemoryCache.prototype.modify = function (options) {
        if (_helpers_js__WEBPACK_IMPORTED_MODULE_9__.hasOwn.call(options, "id") && !options.id) {
            // To my knowledge, TypeScript does not currently provide a way to
            // enforce that an optional property?:type must *not* be undefined
            // when present. That ability would be useful here, because we want
            // options.id to default to ROOT_QUERY only when no options.id was
            // provided. If the caller attempts to pass options.id with a
            // falsy/undefined value (perhaps because cache.identify failed), we
            // should not assume the goal was to modify the ROOT_QUERY object.
            // We could throw, but it seems natural to return false to indicate
            // that nothing was modified.
            return false;
        }
        var store = ((options.optimistic) // Defaults to false.
        ) ?
            this.optimisticData
            : this.data;
        try {
            ++this.txCount;
            return store.modify(options.id || "ROOT_QUERY", options.fields);
        }
        finally {
            if (!--this.txCount && options.broadcast !== false) {
                this.broadcastWatches();
            }
        }
    };
    InMemoryCache.prototype.diff = function (options) {
        if (globalThis.__DEV__ !== false) {
            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_8__.warnRemovedOption)(options, "canonizeResults", "cache.diff");
        }
        return this.storeReader.diffQueryAgainstStore((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), { store: options.optimistic ? this.optimisticData : this.data, rootId: options.id || "ROOT_QUERY", config: this.config }));
    };
    InMemoryCache.prototype.watch = function (watch) {
        var _this = this;
        if (!this.watches.size) {
            // In case we previously called forgetCache(this) because
            // this.watches became empty (see below), reattach this cache to any
            // reactive variables on which it previously depended. It might seem
            // paradoxical that we're able to recall something we supposedly
            // forgot, but the point of calling forgetCache(this) is to silence
            // useless broadcasts while this.watches is empty, and to allow the
            // cache to be garbage collected. If, however, we manage to call
            // recallCache(this) here, this cache object must not have been
            // garbage collected yet, and should resume receiving updates from
            // reactive variables, now that it has a watcher to notify.
            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_7__.recallCache)(this);
        }
        this.watches.add(watch);
        if (watch.immediate) {
            this.maybeBroadcastWatch(watch);
        }
        return function () {
            // Once we remove the last watch from this.watches, cache.broadcastWatches
            // no longer does anything, so we preemptively tell the reactive variable
            // system to exclude this cache from future broadcasts.
            if (_this.watches.delete(watch) && !_this.watches.size) {
                (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_7__.forgetCache)(_this);
            }
            // Remove this watch from the LRU cache managed by the
            // maybeBroadcastWatch OptimisticWrapperFunction, to prevent memory
            // leaks involving the closure of watch.callback.
            _this.maybeBroadcastWatch.forget(watch);
        };
    };
    InMemoryCache.prototype.gc = function (options) {
        if (globalThis.__DEV__ !== false) {
            (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_8__.warnRemovedOption)(options || {}, "resetResultIdentities", "cache.gc", "First ensure all usages of `canonizeResults` are removed, then remove this option.");
        }
        _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.canonicalStringify.reset();
        _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.print.reset();
        var ids = this.optimisticData.gc();
        if (options && !this.txCount) {
            if (options.resetResultCache) {
                this.resetResultCache(options.resetResultIdentities);
            }
            else if (options.resetResultIdentities) {
                this.storeReader.resetCanon();
            }
        }
        return ids;
    };
    // Call this method to ensure the given root ID remains in the cache after
    // garbage collection, along with its transitive child entities. Note that
    // the cache automatically retains all directly written entities. By default,
    // the retainment persists after optimistic updates are removed. Pass true
    // for the optimistic argument if you would prefer for the retainment to be
    // discarded when the top-most optimistic layer is removed. Returns the
    // resulting (non-negative) retainment count.
    InMemoryCache.prototype.retain = function (rootId, optimistic) {
        return (optimistic ? this.optimisticData : this.data).retain(rootId);
    };
    // Call this method to undo the effect of the retain method, above. Once the
    // retainment count falls to zero, the given ID will no longer be preserved
    // during garbage collection, though it may still be preserved by other safe
    // entities that refer to it. Returns the resulting (non-negative) retainment
    // count, in case that's useful.
    InMemoryCache.prototype.release = function (rootId, optimistic) {
        return (optimistic ? this.optimisticData : this.data).release(rootId);
    };
    // Returns the canonical ID for a given StoreObject, obeying typePolicies
    // and keyFields (and dataIdFromObject, if you still use that). At minimum,
    // the object must contain a __typename and any primary key fields required
    // to identify entities of that type. If you pass a query result object, be
    // sure that none of the primary key fields have been renamed by aliasing.
    // If you pass a Reference object, its __ref ID string will be returned.
    InMemoryCache.prototype.identify = function (object) {
        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_18__.isReference)(object))
            return object.__ref;
        try {
            return this.policies.identify(object)[0];
        }
        catch (e) {
            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(e);
        }
    };
    InMemoryCache.prototype.evict = function (options) {
        if (!options.id) {
            if (_helpers_js__WEBPACK_IMPORTED_MODULE_9__.hasOwn.call(options, "id")) {
                // See comment in modify method about why we return false when
                // options.id exists but is falsy/undefined.
                return false;
            }
            options = (0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), { id: "ROOT_QUERY" });
        }
        try {
            // It's unlikely that the eviction will end up invoking any other
            // cache update operations while it's running, but {in,de}crementing
            // this.txCount still seems like a good idea, for uniformity with
            // the other update methods.
            ++this.txCount;
            // Pass this.data as a limit on the depth of the eviction, so evictions
            // during optimistic updates (when this.data is temporarily set equal to
            // this.optimisticData) do not escape their optimistic Layer.
            return this.optimisticData.evict(options, this.data);
        }
        finally {
            if (!--this.txCount && options.broadcast !== false) {
                this.broadcastWatches();
            }
        }
    };
    InMemoryCache.prototype.reset = function (options) {
        var _this = this;
        this.init();
        _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.canonicalStringify.reset();
        if (options && options.discardWatches) {
            // Similar to what happens in the unsubscribe function returned by
            // cache.watch, applied to all current watches.
            this.watches.forEach(function (watch) { return _this.maybeBroadcastWatch.forget(watch); });
            this.watches.clear();
            (0,_reactiveVars_js__WEBPACK_IMPORTED_MODULE_7__.forgetCache)(this);
        }
        else {
            // Calling this.init() above unblocks all maybeBroadcastWatch caching, so
            // this.broadcastWatches() triggers a broadcast to every current watcher
            // (letting them know their data is now missing). This default behavior is
            // convenient because it means the watches do not have to be manually
            // reestablished after resetting the cache. To prevent this broadcast and
            // cancel all watches, pass true for options.discardWatches.
            this.broadcastWatches();
        }
        return Promise.resolve();
    };
    InMemoryCache.prototype.removeOptimistic = function (idToRemove) {
        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);
        if (newOptimisticData !== this.optimisticData) {
            this.optimisticData = newOptimisticData;
            this.broadcastWatches();
        }
    };
    InMemoryCache.prototype.batch = function (options) {
        var _this = this;
        var update = options.update, _a = options.optimistic, optimistic = _a === void 0 ? true : _a, removeOptimistic = options.removeOptimistic, onWatchUpdated = options.onWatchUpdated;
        var updateResult;
        var perform = function (layer) {
            var _a = _this, data = _a.data, optimisticData = _a.optimisticData;
            ++_this.txCount;
            if (layer) {
                _this.data = _this.optimisticData = layer;
            }
            try {
                return (updateResult = update(_this));
            }
            finally {
                --_this.txCount;
                _this.data = data;
                _this.optimisticData = optimisticData;
            }
        };
        var alreadyDirty = new Set();
        if (onWatchUpdated && !this.txCount) {
            // If an options.onWatchUpdated callback is provided, we want to call it
            // with only the Cache.WatchOptions objects affected by options.update,
            // but there might be dirty watchers already waiting to be broadcast that
            // have nothing to do with the update. To prevent including those watchers
            // in the post-update broadcast, we perform this initial broadcast to
            // collect the dirty watchers, so we can re-dirty them later, after the
            // post-update broadcast, allowing them to receive their pending
            // broadcasts the next time broadcastWatches is called, just as they would
            // if we never called cache.batch.
            this.broadcastWatches((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), { onWatchUpdated: function (watch) {
                    alreadyDirty.add(watch);
                    return false;
                } }));
        }
        if (typeof optimistic === "string") {
            // Note that there can be multiple layers with the same optimistic ID.
            // When removeOptimistic(id) is called for that id, all matching layers
            // will be removed, and the remaining layers will be reapplied.
            this.optimisticData = this.optimisticData.addLayer(optimistic, perform);
        }
        else if (optimistic === false) {
            // Ensure both this.data and this.optimisticData refer to the root
            // (non-optimistic) layer of the cache during the update. Note that
            // this.data could be a Layer if we are currently executing an optimistic
            // update function, but otherwise will always be an EntityStore.Root
            // instance.
            perform(this.data);
        }
        else {
            // Otherwise, leave this.data and this.optimisticData unchanged and run
            // the update with broadcast batching.
            perform();
        }
        if (typeof removeOptimistic === "string") {
            this.optimisticData = this.optimisticData.removeLayer(removeOptimistic);
        }
        // Note: if this.txCount > 0, then alreadyDirty.size === 0, so this code
        // takes the else branch and calls this.broadcastWatches(options), which
        // does nothing when this.txCount > 0.
        if (onWatchUpdated && alreadyDirty.size) {
            this.broadcastWatches((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_4__.__assign)({}, options), { onWatchUpdated: function (watch, diff) {
                    var result = onWatchUpdated.call(this, watch, diff);
                    if (result !== false) {
                        // Since onWatchUpdated did not return false, this diff is
                        // about to be broadcast to watch.callback, so we don't need
                        // to re-dirty it with the other alreadyDirty watches below.
                        alreadyDirty.delete(watch);
                    }
                    return result;
                } }));
            // Silently re-dirty any watches that were already dirty before the update
            // was performed, and were not broadcast just now.
            if (alreadyDirty.size) {
                alreadyDirty.forEach(function (watch) { return _this.maybeBroadcastWatch.dirty(watch); });
            }
        }
        else {
            // If alreadyDirty is empty or we don't have an onWatchUpdated
            // function, we don't need to go to the trouble of wrapping
            // options.onWatchUpdated.
            this.broadcastWatches(options);
        }
        return updateResult;
    };
    InMemoryCache.prototype.performTransaction = function (update, optimisticId) {
        return this.batch({
            update: update,
            optimistic: optimisticId || optimisticId !== null,
        });
    };
    InMemoryCache.prototype.transformDocument = function (document) {
        return this.addTypenameToDocument(this.addFragmentsToDocument(document));
    };
    InMemoryCache.prototype.fragmentMatches = function (fragment, typename) {
        return this.policies.fragmentMatches(fragment, typename);
    };
    InMemoryCache.prototype.lookupFragment = function (fragmentName) {
        var _a;
        return ((_a = this.config.fragments) === null || _a === void 0 ? void 0 : _a.lookup(fragmentName)) || null;
    };
    InMemoryCache.prototype.broadcastWatches = function (options) {
        var _this = this;
        if (!this.txCount) {
            this.watches.forEach(function (c) { return _this.maybeBroadcastWatch(c, options); });
        }
    };
    InMemoryCache.prototype.addFragmentsToDocument = function (document) {
        var fragments = this.config.fragments;
        return fragments ? fragments.transform(document) : document;
    };
    InMemoryCache.prototype.addTypenameToDocument = function (document) {
        if (this.addTypename) {
            return this.addTypenameTransform.transformDocument(document);
        }
        return document;
    };
    // This method is wrapped by maybeBroadcastWatch, which is called by
    // broadcastWatches, so that we compute and broadcast results only when
    // the data that would be broadcast might have changed. It would be
    // simpler to check for changes after recomputing a result but before
    // broadcasting it, but this wrapping approach allows us to skip both
    // the recomputation and the broadcast, in most cases.
    InMemoryCache.prototype.broadcastWatch = function (c, options) {
        var _this = this;
        var lastDiff = c.lastDiff;
        // Both WatchOptions and DiffOptions extend ReadOptions, and DiffOptions
        // currently requires no additional properties, so we can use c (a
        // WatchOptions object) as DiffOptions, without having to allocate a new
        // object, and without having to enumerate the relevant properties (query,
        // variables, etc.) explicitly. There will be some additional properties
        // (lastDiff, callback, etc.), but cache.diff ignores them.
        var diff = (0,_utilities_deprecation_index_js__WEBPACK_IMPORTED_MODULE_8__.muteDeprecations)("canonizeResults", function () { return _this.diff(c); });
        if (options) {
            if (c.optimistic && typeof options.optimistic === "string") {
                diff.fromOptimisticTransaction = true;
            }
            if (options.onWatchUpdated &&
                options.onWatchUpdated.call(this, c, diff, lastDiff) === false) {
                // Returning false from the onWatchUpdated callback will prevent
                // calling c.callback(diff) for this watcher.
                return;
            }
        }
        if (!lastDiff || !(0,_wry_equality__WEBPACK_IMPORTED_MODULE_2__.equal)(lastDiff.result, diff.result)) {
            c.callback((c.lastDiff = diff), lastDiff);
        }
    };
    return InMemoryCache;
}(_core_cache_js__WEBPACK_IMPORTED_MODULE_3__.ApolloCache));

if (globalThis.__DEV__ !== false) {
    InMemoryCache.prototype.getMemoryInternals = _utilities_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_19__.getInMemoryCacheMemoryInternals;
}
//# sourceMappingURL=inMemoryCache.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/key-extractor.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  collectSpecifierPaths: () => (collectSpecifierPaths),
  extractKeyPath: () => (extractKeyPath),
  getSpecifierPaths: () => (getSpecifierPaths),
  keyArgsFnFromSpecifier: () => (keyArgsFnFromSpecifier),
  keyFieldsFnFromSpecifier: () => (keyFieldsFnFromSpecifier)
});
/* ESM import */var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/arrays.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/storeUtils.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/mergeDeep.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/objects.js");
/* ESM import */var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/helpers.js");



// Mapping from JSON-encoded KeySpecifier strings to associated information.
var specifierInfoCache = Object.create(null);
function lookupSpecifierInfo(spec) {
    // It's safe to encode KeySpecifier arrays with JSON.stringify, since they're
    // just arrays of strings or nested KeySpecifier arrays, and the order of the
    // array elements is important (and suitably preserved by JSON.stringify).
    var cacheKey = JSON.stringify(spec);
    return (specifierInfoCache[cacheKey] ||
        (specifierInfoCache[cacheKey] = Object.create(null)));
}
function keyFieldsFnFromSpecifier(specifier) {
    var info = lookupSpecifierInfo(specifier);
    return (info.keyFieldsFn || (info.keyFieldsFn = function (object, context) {
            var extract = function (from, key) {
                return context.readField(key, from);
            };
            var keyObject = (context.keyObject = collectSpecifierPaths(specifier, function (schemaKeyPath) {
                var extracted = extractKeyPath(context.storeObject, schemaKeyPath, 
                // Using context.readField to extract paths from context.storeObject
                // allows the extraction to see through Reference objects and respect
                // custom read functions.
                extract);
                if (extracted === void 0 &&
                    object !== context.storeObject &&
                    _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwn.call(object, schemaKeyPath[0])) {
                    // If context.storeObject fails to provide a value for the requested
                    // path, fall back to the raw result object, if it has a top-level key
                    // matching the first key in the path (schemaKeyPath[0]). This allows
                    // key fields included in the written data to be saved in the cache
                    // even if they are not selected explicitly in context.selectionSet.
                    // Not being mentioned by context.selectionSet is convenient here,
                    // since it means these extra fields cannot be affected by field
                    // aliasing, which is why we can use extractKey instead of
                    // context.readField for this extraction.
                    extracted = extractKeyPath(object, schemaKeyPath, extractKey);
                }
                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(extracted !== void 0, 5, schemaKeyPath.join("."), object);
                return extracted;
            }));
            return "".concat(context.typename, ":").concat(JSON.stringify(keyObject));
        }));
}
// The keyArgs extraction process is roughly analogous to keyFields extraction,
// but there are no aliases involved, missing fields are tolerated (by merely
// omitting them from the key), and drawing from field.directives or variables
// is allowed (in addition to drawing from the field's arguments object).
// Concretely, these differences mean passing a different key path extractor
// function to collectSpecifierPaths, reusing the shared extractKeyPath helper
// wherever possible.
function keyArgsFnFromSpecifier(specifier) {
    var info = lookupSpecifierInfo(specifier);
    return (info.keyArgsFn ||
        (info.keyArgsFn = function (args, _a) {
            var field = _a.field, variables = _a.variables, fieldName = _a.fieldName;
            var collected = collectSpecifierPaths(specifier, function (keyPath) {
                var firstKey = keyPath[0];
                var firstChar = firstKey.charAt(0);
                if (firstChar === "@") {
                    if (field && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isNonEmptyArray)(field.directives)) {
                        var directiveName_1 = firstKey.slice(1);
                        // If the directive appears multiple times, only the first
                        // occurrence's arguments will be used. TODO Allow repetition?
                        // TODO Cache this work somehow, a la aliasMap?
                        var d = field.directives.find(function (d) { return d.name.value === directiveName_1; });
                        // Fortunately argumentsObjectFromField works for DirectiveNode!
                        var directiveArgs = d && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.argumentsObjectFromField)(d, variables);
                        // For directives without arguments (d defined, but directiveArgs ===
                        // null), the presence or absence of the directive still counts as
                        // part of the field key, so we return null in those cases. If no
                        // directive with this name was found for this field (d undefined and
                        // thus directiveArgs undefined), we return undefined, which causes
                        // this value to be omitted from the key object returned by
                        // collectSpecifierPaths.
                        return (directiveArgs &&
                            extractKeyPath(directiveArgs, 
                            // If keyPath.length === 1, this code calls extractKeyPath with an
                            // empty path, which works because it uses directiveArgs as the
                            // extracted value.
                            keyPath.slice(1)));
                    }
                    // If the key started with @ but there was no corresponding directive,
                    // we want to omit this value from the key object, not fall through to
                    // treating @whatever as a normal argument name.
                    return;
                }
                if (firstChar === "$") {
                    var variableName = firstKey.slice(1);
                    if (variables && _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwn.call(variables, variableName)) {
                        var varKeyPath = keyPath.slice(0);
                        varKeyPath[0] = variableName;
                        return extractKeyPath(variables, varKeyPath);
                    }
                    // If the key started with $ but there was no corresponding variable, we
                    // want to omit this value from the key object, not fall through to
                    // treating $whatever as a normal argument name.
                    return;
                }
                if (args) {
                    return extractKeyPath(args, keyPath);
                }
            });
            var suffix = JSON.stringify(collected);
            // If no arguments were passed to this field, and it didn't have any other
            // field key contributions from directives or variables, hide the empty
            // :{} suffix from the field key. However, a field passed no arguments can
            // still end up with a non-empty :{...} suffix if its key configuration
            // refers to directives or variables.
            if (args || suffix !== "{}") {
                fieldName += ":" + suffix;
            }
            return fieldName;
        }));
}
function collectSpecifierPaths(specifier, extractor) {
    // For each path specified by specifier, invoke the extractor, and repeatedly
    // merge the results together, with appropriate ancestor context.
    var merger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.DeepMerger();
    return getSpecifierPaths(specifier).reduce(function (collected, path) {
        var _a;
        var toMerge = extractor(path);
        if (toMerge !== void 0) {
            // This path is not expected to contain array indexes, so the toMerge
            // reconstruction will not contain arrays. TODO Fix this?
            for (var i = path.length - 1; i >= 0; --i) {
                toMerge = (_a = {}, _a[path[i]] = toMerge, _a);
            }
            collected = merger.merge(collected, toMerge);
        }
        return collected;
    }, Object.create(null));
}
function getSpecifierPaths(spec) {
    var info = lookupSpecifierInfo(spec);
    if (!info.paths) {
        var paths_1 = (info.paths = []);
        var currentPath_1 = [];
        spec.forEach(function (s, i) {
            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(s)) {
                getSpecifierPaths(s).forEach(function (p) { return paths_1.push(currentPath_1.concat(p)); });
                currentPath_1.length = 0;
            }
            else {
                currentPath_1.push(s);
                if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(spec[i + 1])) {
                    paths_1.push(currentPath_1.slice(0));
                    currentPath_1.length = 0;
                }
            }
        });
    }
    return info.paths;
}
function extractKey(object, key) {
    return object[key];
}
function extractKeyPath(object, path, extract) {
    // For each key in path, extract the corresponding child property from obj,
    // flattening arrays if encountered (uncommon for keyFields and keyArgs, but
    // possible). The final result of path.reduce is normalized so unexpected leaf
    // objects have their keys safely sorted. That final result is difficult to
    // type as anything other than any. You're welcome to try to improve the
    // return type, but keep in mind extractKeyPath is not a public function
    // (exported only for testing), so the effort may not be worthwhile unless the
    // limited set of actual callers (see above) pass arguments that TypeScript
    // can statically type. If we know only that path is some array of strings
    // (and not, say, a specific tuple of statically known strings), any (or
    // possibly unknown) is the honest answer.
    extract = extract || extractKey;
    return normalize(path.reduce(function reducer(obj, key) {
        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(obj) ?
            obj.map(function (child) { return reducer(child, key); })
            : obj && extract(obj, key);
    }, object));
}
function normalize(value) {
    // Usually the extracted value will be a scalar value, since most primary
    // key fields are scalar, but just in case we get an object or an array, we
    // need to do some normalization of the order of (nested) keys.
    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isNonNullObject)(value)) {
        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(value)) {
            return value.map(normalize);
        }
        return collectSpecifierPaths(Object.keys(value).sort(), function (path) {
            return extractKeyPath(value, path);
        });
    }
    return value;
}
//# sourceMappingURL=key-extractor.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/object-canon.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ObjectCanon: () => (ObjectCanon)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@wry+trie@0.5.0/node_modules/@wry/trie/lib/index.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/objects.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/canUse.js");
/* ESM import */var _helpers_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/arrays.js");




function shallowCopy(value) {
    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {
        return (0,_helpers_js__WEBPACK_IMPORTED_MODULE_2__.isArray)(value) ?
            value.slice(0)
            : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({ __proto__: Object.getPrototypeOf(value) }, value);
    }
    return value;
}
// When programmers talk about the "canonical form" of an object, they
// usually have the following meaning in mind, which I've copied from
// https://en.wiktionary.org/wiki/canonical_form:
//
// 1. A standard or normal presentation of a mathematical entity [or
//    object]. A canonical form is an element of a set of representatives
//    of equivalence classes of forms such that there is a function or
//    procedure which projects every element of each equivalence class
//    onto that one element, the canonical form of that equivalence
//    class. The canonical form is expected to be simpler than the rest of
//    the forms in some way.
//
// That's a long-winded way of saying any two objects that have the same
// canonical form may be considered equivalent, even if they are !==,
// which usually means the objects are structurally equivalent (deeply
// equal), but don't necessarily use the same memory.
//
// Like a literary or musical canon, this ObjectCanon class represents a
// collection of unique canonical items (JavaScript objects), with the
// important property that canon.admit(a) === canon.admit(b) if a and b
// are deeply equal to each other. In terms of the definition above, the
// canon.admit method is the "function or procedure which projects every"
// object "onto that one element, the canonical form."
//
// In the worst case, the canonicalization process may involve looking at
// every property in the provided object tree, so it takes the same order
// of time as deep equality checking. Fortunately, already-canonicalized
// objects are returned immediately from canon.admit, so the presence of
// canonical subtrees tends to speed up canonicalization.
//
// Since consumers of canonical objects can check for deep equality in
// constant time, canonicalizing cache results can massively improve the
// performance of application code that skips re-rendering unchanged
// results, such as "pure" UI components in a framework like React.
//
// Of course, since canonical objects may be shared widely between
// unrelated consumers, it's important to think of them as immutable, even
// though they are not actually frozen with Object.freeze in production,
// due to the extra performance overhead that comes with frozen objects.
//
// Custom scalar objects whose internal class name is neither Array nor
// Object can be included safely in the admitted tree, but they will not
// be replaced with a canonical version (to put it another way, they are
// assumed to be canonical already).
//
// If we ignore custom objects, no detection of cycles or repeated object
// references is currently required by the StoreReader class, since
// GraphQL result objects are JSON-serializable trees (and thus contain
// neither cycles nor repeated subtrees), so we can avoid the complexity
// of keeping track of objects we've already seen during the recursion of
// the admit method.
//
// In the future, we may consider adding additional cases to the switch
// statement to handle other common object types, such as "[object Date]"
// objects, as needed.
var ObjectCanon = /** @class */ (function () {
    function ObjectCanon() {
        // Set of all canonical objects this ObjectCanon has admitted, allowing
        // canon.admit to return previously-canonicalized objects immediately.
        this.known = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.canUseWeakSet ? WeakSet : Set)();
        // Efficient storage/lookup structure for canonical objects.
        this.pool = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.canUseWeakMap);
        // Make the ObjectCanon assume this value has already been
        // canonicalized.
        this.passes = new WeakMap();
        // Arrays that contain the same elements in a different order can share
        // the same SortedKeysInfo object, to save memory.
        this.keysByJSON = new Map();
        // This has to come last because it depends on keysByJSON.
        this.empty = this.admit({});
    }
    ObjectCanon.prototype.isKnown = function (value) {
        return (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value) && this.known.has(value);
    };
    ObjectCanon.prototype.pass = function (value) {
        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {
            var copy = shallowCopy(value);
            this.passes.set(copy, value);
            return copy;
        }
        return value;
    };
    ObjectCanon.prototype.admit = function (value) {
        var _this = this;
        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value)) {
            var original = this.passes.get(value);
            if (original)
                return original;
            var proto = Object.getPrototypeOf(value);
            switch (proto) {
                case Array.prototype: {
                    if (this.known.has(value))
                        return value;
                    var array = value.map(this.admit, this);
                    // Arrays are looked up in the Trie using their recursively
                    // canonicalized elements, and the known version of the array is
                    // preserved as node.array.
                    var node = this.pool.lookupArray(array);
                    if (!node.array) {
                        this.known.add((node.array = array));
                        // Since canonical arrays may be shared widely between
                        // unrelated consumers, it's important to regard them as
                        // immutable, even if they are not frozen in production.
                        if (globalThis.__DEV__ !== false) {
                            Object.freeze(array);
                        }
                    }
                    return node.array;
                }
                case null:
                case Object.prototype: {
                    if (this.known.has(value))
                        return value;
                    var proto_1 = Object.getPrototypeOf(value);
                    var array_1 = [proto_1];
                    var keys = this.sortedKeys(value);
                    array_1.push(keys.json);
                    var firstValueIndex_1 = array_1.length;
                    keys.sorted.forEach(function (key) {
                        array_1.push(_this.admit(value[key]));
                    });
                    // Objects are looked up in the Trie by their prototype (which
                    // is *not* recursively canonicalized), followed by a JSON
                    // representation of their (sorted) keys, followed by the
                    // sequence of recursively canonicalized values corresponding to
                    // those keys. To keep the final results unambiguous with other
                    // sequences (such as arrays that just happen to contain [proto,
                    // keys.json, value1, value2, ...]), the known version of the
                    // object is stored as node.object.
                    var node = this.pool.lookupArray(array_1);
                    if (!node.object) {
                        var obj_1 = (node.object = Object.create(proto_1));
                        this.known.add(obj_1);
                        keys.sorted.forEach(function (key, i) {
                            obj_1[key] = array_1[firstValueIndex_1 + i];
                        });
                        // Since canonical objects may be shared widely between
                        // unrelated consumers, it's important to regard them as
                        // immutable, even if they are not frozen in production.
                        if (globalThis.__DEV__ !== false) {
                            Object.freeze(obj_1);
                        }
                    }
                    return node.object;
                }
            }
        }
        return value;
    };
    // It's worthwhile to cache the sorting of arrays of strings, since the
    // same initial unsorted arrays tend to be encountered many times.
    // Fortunately, we can reuse the Trie machinery to look up the sorted
    // arrays in linear time (which is faster than sorting large arrays).
    ObjectCanon.prototype.sortedKeys = function (obj) {
        var keys = Object.keys(obj);
        var node = this.pool.lookupArray(keys);
        if (!node.keys) {
            keys.sort();
            var json = JSON.stringify(keys);
            if (!(node.keys = this.keysByJSON.get(json))) {
                this.keysByJSON.set(json, (node.keys = { sorted: keys, json: json }));
            }
        }
        return node.keys;
    };
    return ObjectCanon;
}());

//# sourceMappingURL=object-canon.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/policies.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Policies: () => (Policies),
  normalizeReadFieldOptions: () => (normalizeReadFieldOptions)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/storeUtils.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/stringifyForDisplay.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/objects.js");
/* ESM import */var _helpers_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/helpers.js");
/* ESM import */var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/arrays.js");
/* ESM import */var _reactiveVars_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/reactiveVars.js");
/* ESM import */var _key_extractor_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/key-extractor.js");
/* ESM import */var _masking_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/masking/utils.js");







function argsFromFieldSpecifier(spec) {
    return (spec.args !== void 0 ? spec.args
        : spec.field ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.argumentsObjectFromField)(spec.field, spec.variables)
            : null);
}
var nullKeyFieldsFn = function () { return void 0; };
var simpleKeyArgsFn = function (_args, context) { return context.fieldName; };
// These merge functions can be selected by specifying merge:true or
// merge:false in a field policy.
var mergeTrueFn = function (existing, incoming, _a) {
    var mergeObjects = _a.mergeObjects;
    return mergeObjects(existing, incoming);
};
var mergeFalseFn = function (_, incoming) { return incoming; };
var Policies = /** @class */ (function () {
    function Policies(config) {
        this.config = config;
        this.typePolicies = Object.create(null);
        this.toBeAdded = Object.create(null);
        // Map from subtype names to sets of supertype names. Note that this
        // representation inverts the structure of possibleTypes (whose keys are
        // supertypes and whose values are arrays of subtypes) because it tends
        // to be much more efficient to search upwards than downwards.
        this.supertypeMap = new Map();
        // Any fuzzy subtypes specified by possibleTypes will be converted to
        // RegExp objects and recorded here. Every key of this map can also be
        // found in supertypeMap. In many cases this Map will be empty, which
        // means no fuzzy subtype checking will happen in fragmentMatches.
        this.fuzzySubtypes = new Map();
        this.rootIdsByTypename = Object.create(null);
        this.rootTypenamesById = Object.create(null);
        this.usingPossibleTypes = false;
        this.config = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({ dataIdFromObject: _helpers_js__WEBPACK_IMPORTED_MODULE_3__.defaultDataIdFromObject }, config);
        this.cache = this.config.cache;
        this.setRootTypename("Query");
        this.setRootTypename("Mutation");
        this.setRootTypename("Subscription");
        if (config.possibleTypes) {
            this.addPossibleTypes(config.possibleTypes);
        }
        if (config.typePolicies) {
            this.addTypePolicies(config.typePolicies);
        }
    }
    Policies.prototype.identify = function (object, partialContext) {
        var _a;
        var policies = this;
        var typename = (partialContext &&
            (partialContext.typename || ((_a = partialContext.storeObject) === null || _a === void 0 ? void 0 : _a.__typename))) ||
            object.__typename;
        // It should be possible to write root Query fields with writeFragment,
        // using { __typename: "Query", ... } as the data, but it does not make
        // sense to allow the same identification behavior for the Mutation and
        // Subscription types, since application code should never be writing
        // directly to (or reading directly from) those root objects.
        if (typename === this.rootTypenamesById.ROOT_QUERY) {
            return ["ROOT_QUERY"];
        }
        // Default context.storeObject to object if not otherwise provided.
        var storeObject = (partialContext && partialContext.storeObject) || object;
        var context = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, partialContext), { typename: typename, storeObject: storeObject, readField: (partialContext && partialContext.readField) ||
                function () {
                    var options = normalizeReadFieldOptions(arguments, storeObject);
                    return policies.readField(options, {
                        store: policies.cache["data"],
                        variables: options.variables,
                    });
                } });
        var id;
        var policy = typename && this.getTypePolicy(typename);
        var keyFn = (policy && policy.keyFn) || this.config.dataIdFromObject;
        _masking_index_js__WEBPACK_IMPORTED_MODULE_4__.disableWarningsSlot.withValue(true, function () {
            while (keyFn) {
                var specifierOrId = keyFn((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, object), storeObject), context);
                if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(specifierOrId)) {
                    keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_6__.keyFieldsFnFromSpecifier)(specifierOrId);
                }
                else {
                    id = specifierOrId;
                    break;
                }
            }
        });
        id = id ? String(id) : void 0;
        return context.keyObject ? [id, context.keyObject] : [id];
    };
    Policies.prototype.addTypePolicies = function (typePolicies) {
        var _this = this;
        Object.keys(typePolicies).forEach(function (typename) {
            var _a = typePolicies[typename], queryType = _a.queryType, mutationType = _a.mutationType, subscriptionType = _a.subscriptionType, incoming = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, ["queryType", "mutationType", "subscriptionType"]);
            // Though {query,mutation,subscription}Type configurations are rare,
            // it's important to call setRootTypename as early as possible,
            // since these configurations should apply consistently for the
            // entire lifetime of the cache. Also, since only one __typename can
            // qualify as one of these root types, these three properties cannot
            // be inherited, unlike the rest of the incoming properties. That
            // restriction is convenient, because the purpose of this.toBeAdded
            // is to delay the processing of type/field policies until the first
            // time they're used, allowing policies to be added in any order as
            // long as all relevant policies (including policies for supertypes)
            // have been added by the time a given policy is used for the first
            // time. In other words, since inheritance doesn't matter for these
            // properties, there's also no need to delay their processing using
            // the this.toBeAdded queue.
            if (queryType)
                _this.setRootTypename("Query", typename);
            if (mutationType)
                _this.setRootTypename("Mutation", typename);
            if (subscriptionType)
                _this.setRootTypename("Subscription", typename);
            if (_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(_this.toBeAdded, typename)) {
                _this.toBeAdded[typename].push(incoming);
            }
            else {
                _this.toBeAdded[typename] = [incoming];
            }
        });
    };
    Policies.prototype.updateTypePolicy = function (typename, incoming, existingFieldPolicies) {
        var existing = this.getTypePolicy(typename);
        var keyFields = incoming.keyFields, fields = incoming.fields;
        function setMerge(existing, merge) {
            existing.merge =
                typeof merge === "function" ? merge
                    // Pass merge:true as a shorthand for a merge implementation
                    // that returns options.mergeObjects(existing, incoming).
                    : merge === true ? mergeTrueFn
                        // Pass merge:false to make incoming always replace existing
                        // without any warnings about data clobbering.
                        : merge === false ? mergeFalseFn
                            : existing.merge;
        }
        // Type policies can define merge functions, as an alternative to
        // using field policies to merge child objects.
        setMerge(existing, incoming.merge);
        existing.keyFn =
            // Pass false to disable normalization for this typename.
            keyFields === false ? nullKeyFieldsFn
                // Pass an array of strings to use those fields to compute a
                // composite ID for objects of this typename.
                : (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(keyFields) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_6__.keyFieldsFnFromSpecifier)(keyFields)
                    // Pass a function to take full control over identification.
                    : typeof keyFields === "function" ? keyFields
                        // Leave existing.keyFn unchanged if above cases fail.
                        : existing.keyFn;
        if (fields) {
            Object.keys(fields).forEach(function (fieldName) {
                var existing = existingFieldPolicies[fieldName];
                // Field policy inheritance is atomic/shallow: you can't inherit a
                // field policy and then override just its read function, since read
                // and merge functions often need to cooperate, so changing only one
                // of them would be a recipe for inconsistency.
                // So here we avoid merging an inherited field policy with an updated one.
                if (!existing || (existing === null || existing === void 0 ? void 0 : existing.typename) !== typename) {
                    existing = existingFieldPolicies[fieldName] = { typename: typename };
                }
                var incoming = fields[fieldName];
                if (typeof incoming === "function") {
                    existing.read = incoming;
                }
                else {
                    var keyArgs = incoming.keyArgs, read = incoming.read, merge = incoming.merge;
                    existing.keyFn =
                        // Pass false to disable argument-based differentiation of
                        // field identities.
                        keyArgs === false ? simpleKeyArgsFn
                            // Pass an array of strings to use named arguments to
                            // compute a composite identity for the field.
                            : (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(keyArgs) ? (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_6__.keyArgsFnFromSpecifier)(keyArgs)
                                // Pass a function to take full control over field identity.
                                : typeof keyArgs === "function" ? keyArgs
                                    // Leave existing.keyFn unchanged if above cases fail.
                                    : existing.keyFn;
                    if (typeof read === "function") {
                        existing.read = read;
                    }
                    setMerge(existing, merge);
                }
                if (existing.read && existing.merge) {
                    // If we have both a read and a merge function, assume
                    // keyArgs:false, because read and merge together can take
                    // responsibility for interpreting arguments in and out. This
                    // default assumption can always be overridden by specifying
                    // keyArgs explicitly in the FieldPolicy.
                    existing.keyFn = existing.keyFn || simpleKeyArgsFn;
                }
            });
        }
    };
    Policies.prototype.setRootTypename = function (which, typename) {
        if (typename === void 0) { typename = which; }
        var rootId = "ROOT_" + which.toUpperCase();
        var old = this.rootTypenamesById[rootId];
        if (typename !== old) {
            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!old || old === which, 6, which);
            // First, delete any old __typename associated with this rootId from
            // rootIdsByTypename.
            if (old)
                delete this.rootIdsByTypename[old];
            // Now make this the only __typename that maps to this rootId.
            this.rootIdsByTypename[typename] = rootId;
            // Finally, update the __typename associated with this rootId.
            this.rootTypenamesById[rootId] = typename;
        }
    };
    Policies.prototype.addPossibleTypes = function (possibleTypes) {
        var _this = this;
        this.usingPossibleTypes = true;
        Object.keys(possibleTypes).forEach(function (supertype) {
            // Make sure all types have an entry in this.supertypeMap, even if
            // their supertype set is empty, so we can return false immediately
            // from policies.fragmentMatches for unknown supertypes.
            _this.getSupertypeSet(supertype, true);
            possibleTypes[supertype].forEach(function (subtype) {
                _this.getSupertypeSet(subtype, true).add(supertype);
                var match = subtype.match(_helpers_js__WEBPACK_IMPORTED_MODULE_3__.TypeOrFieldNameRegExp);
                if (!match || match[0] !== subtype) {
                    // TODO Don't interpret just any invalid typename as a RegExp.
                    _this.fuzzySubtypes.set(subtype, new RegExp(subtype));
                }
            });
        });
    };
    Policies.prototype.getTypePolicy = function (typename) {
        var _this = this;
        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(this.typePolicies, typename)) {
            var policy_1 = (this.typePolicies[typename] = Object.create(null));
            policy_1.fields = Object.create(null);
            // When the TypePolicy for typename is first accessed, instead of
            // starting with an empty policy object, inherit any properties or
            // fields from the type policies of the supertypes of typename.
            //
            // Any properties or fields defined explicitly within the TypePolicy
            // for typename will take precedence, and if there are multiple
            // supertypes, the properties of policies whose types were added
            // later via addPossibleTypes will take precedence over those of
            // earlier supertypes. TODO Perhaps we should warn about these
            // conflicts in development, and recommend defining the property
            // explicitly in the subtype policy?
            //
            // Field policy inheritance is atomic/shallow: you can't inherit a
            // field policy and then override just its read function, since read
            // and merge functions often need to cooperate, so changing only one
            // of them would be a recipe for inconsistency.
            //
            // Once the TypePolicy for typename has been accessed, its properties can
            // still be updated directly using addTypePolicies, but future changes to
            // inherited supertype policies will not be reflected in this subtype
            // policy, because this code runs at most once per typename.
            var supertypes_1 = this.supertypeMap.get(typename);
            if (!supertypes_1 && this.fuzzySubtypes.size) {
                // To make the inheritance logic work for unknown typename strings that
                // may have fuzzy supertypes, we give this typename an empty supertype
                // set and then populate it with any fuzzy supertypes that match.
                supertypes_1 = this.getSupertypeSet(typename, true);
                // This only works for typenames that are directly matched by a fuzzy
                // supertype. What if there is an intermediate chain of supertypes?
                // While possible, that situation can only be solved effectively by
                // specifying the intermediate relationships via possibleTypes, manually
                // and in a non-fuzzy way.
                this.fuzzySubtypes.forEach(function (regExp, fuzzy) {
                    if (regExp.test(typename)) {
                        // The fuzzy parameter is just the original string version of regExp
                        // (not a valid __typename string), but we can look up the
                        // associated supertype(s) in this.supertypeMap.
                        var fuzzySupertypes = _this.supertypeMap.get(fuzzy);
                        if (fuzzySupertypes) {
                            fuzzySupertypes.forEach(function (supertype) {
                                return supertypes_1.add(supertype);
                            });
                        }
                    }
                });
            }
            if (supertypes_1 && supertypes_1.size) {
                supertypes_1.forEach(function (supertype) {
                    var _a = _this.getTypePolicy(supertype), fields = _a.fields, rest = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__rest)(_a, ["fields"]);
                    Object.assign(policy_1, rest);
                    Object.assign(policy_1.fields, fields);
                });
            }
        }
        var inbox = this.toBeAdded[typename];
        if (inbox && inbox.length) {
            // Merge the pending policies into this.typePolicies, in the order they
            // were originally passed to addTypePolicy.
            inbox.splice(0).forEach(function (policy) {
                _this.updateTypePolicy(typename, policy, _this.typePolicies[typename].fields);
            });
        }
        return this.typePolicies[typename];
    };
    Policies.prototype.getFieldPolicy = function (typename, fieldName) {
        if (typename) {
            return this.getTypePolicy(typename).fields[fieldName];
        }
    };
    Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {
        var supertypeSet = this.supertypeMap.get(subtype);
        if (!supertypeSet && createIfMissing) {
            this.supertypeMap.set(subtype, (supertypeSet = new Set()));
        }
        return supertypeSet;
    };
    Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {
        var _this = this;
        if (!fragment.typeCondition)
            return true;
        // If the fragment has a type condition but the object we're matching
        // against does not have a __typename, the fragment cannot match.
        if (!typename)
            return false;
        var supertype = fragment.typeCondition.name.value;
        // Common case: fragment type condition and __typename are the same.
        if (typename === supertype)
            return true;
        if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {
            var typenameSupertypeSet = this.getSupertypeSet(typename, true);
            var workQueue_1 = [typenameSupertypeSet];
            var maybeEnqueue_1 = function (subtype) {
                var supertypeSet = _this.getSupertypeSet(subtype, false);
                if (supertypeSet &&
                    supertypeSet.size &&
                    workQueue_1.indexOf(supertypeSet) < 0) {
                    workQueue_1.push(supertypeSet);
                }
            };
            // We need to check fuzzy subtypes only if we encountered fuzzy
            // subtype strings in addPossibleTypes, and only while writing to
            // the cache, since that's when selectionSetMatchesResult gives a
            // strong signal of fragment matching. The StoreReader class calls
            // policies.fragmentMatches without passing a result object, so
            // needToCheckFuzzySubtypes is always false while reading.
            var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);
            var checkingFuzzySubtypes = false;
            // It's important to keep evaluating workQueue.length each time through
            // the loop, because the queue can grow while we're iterating over it.
            for (var i = 0; i < workQueue_1.length; ++i) {
                var supertypeSet = workQueue_1[i];
                if (supertypeSet.has(supertype)) {
                    if (!typenameSupertypeSet.has(supertype)) {
                        if (checkingFuzzySubtypes) {
                            globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(7, typename, supertype);
                        }
                        // Record positive results for faster future lookup.
                        // Unfortunately, we cannot safely cache negative results,
                        // because new possibleTypes data could always be added to the
                        // Policies class.
                        typenameSupertypeSet.add(supertype);
                    }
                    return true;
                }
                supertypeSet.forEach(maybeEnqueue_1);
                if (needToCheckFuzzySubtypes &&
                    // Start checking fuzzy subtypes only after exhausting all
                    // non-fuzzy subtypes (after the final iteration of the loop).
                    i === workQueue_1.length - 1 &&
                    // We could wait to compare fragment.selectionSet to result
                    // after we verify the supertype, but this check is often less
                    // expensive than that search, and we will have to do the
                    // comparison anyway whenever we find a potential match.
                    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.selectionSetMatchesResult)(fragment.selectionSet, result, variables)) {
                    // We don't always need to check fuzzy subtypes (if no result
                    // was provided, or !this.fuzzySubtypes.size), but, when we do,
                    // we only want to check them once.
                    needToCheckFuzzySubtypes = false;
                    checkingFuzzySubtypes = true;
                    // If we find any fuzzy subtypes that match typename, extend the
                    // workQueue to search through the supertypes of those fuzzy
                    // subtypes. Otherwise the for-loop will terminate and we'll
                    // return false below.
                    this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {
                        var match = typename.match(regExp);
                        if (match && match[0] === typename) {
                            maybeEnqueue_1(fuzzyString);
                        }
                    });
                }
            }
        }
        return false;
    };
    Policies.prototype.hasKeyArgs = function (typename, fieldName) {
        var policy = this.getFieldPolicy(typename, fieldName);
        return !!(policy && policy.keyFn);
    };
    Policies.prototype.getStoreFieldName = function (fieldSpec) {
        var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;
        var policy = this.getFieldPolicy(typename, fieldName);
        var storeFieldName;
        var keyFn = policy && policy.keyFn;
        if (keyFn && typename) {
            var context = {
                typename: typename,
                fieldName: fieldName,
                field: fieldSpec.field || null,
                variables: fieldSpec.variables,
            };
            var args = argsFromFieldSpecifier(fieldSpec);
            while (keyFn) {
                var specifierOrString = keyFn(args, context);
                if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(specifierOrString)) {
                    keyFn = (0,_key_extractor_js__WEBPACK_IMPORTED_MODULE_6__.keyArgsFnFromSpecifier)(specifierOrString);
                }
                else {
                    // If the custom keyFn returns a falsy value, fall back to
                    // fieldName instead.
                    storeFieldName = specifierOrString || fieldName;
                    break;
                }
            }
        }
        if (storeFieldName === void 0) {
            storeFieldName =
                fieldSpec.field ?
                    (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.storeKeyNameFromField)(fieldSpec.field, fieldSpec.variables)
                    : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.getStoreKeyName)(fieldName, argsFromFieldSpecifier(fieldSpec));
        }
        // Returning false from a keyArgs function is like configuring
        // keyArgs: false, but more dynamic.
        if (storeFieldName === false) {
            return fieldName;
        }
        // Make sure custom field names start with the actual field.name.value
        // of the field, so we can always figure out which properties of a
        // StoreObject correspond to which original field names.
        return fieldName === (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName) ? storeFieldName
            : fieldName + ":" + storeFieldName;
    };
    Policies.prototype.readField = function (options, context) {
        var objectOrReference = options.from;
        if (!objectOrReference)
            return;
        var nameOrField = options.field || options.fieldName;
        if (!nameOrField)
            return;
        if (options.typename === void 0) {
            var typename = context.store.getFieldValue(objectOrReference, "__typename");
            if (typename)
                options.typename = typename;
        }
        var storeFieldName = this.getStoreFieldName(options);
        var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);
        var existing = context.store.getFieldValue(objectOrReference, storeFieldName);
        var policy = this.getFieldPolicy(options.typename, fieldName);
        var read = policy && policy.read;
        if (read) {
            var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(objectOrReference) ?
                objectOrReference.__ref
                : objectOrReference, storeFieldName));
            // Call read(existing, readOptions) with cacheSlot holding this.cache.
            return _reactiveVars_js__WEBPACK_IMPORTED_MODULE_7__.cacheSlot.withValue(this.cache, read, [
                existing,
                readOptions,
            ]);
        }
        return existing;
    };
    Policies.prototype.getReadFunction = function (typename, fieldName) {
        var policy = this.getFieldPolicy(typename, fieldName);
        return policy && policy.read;
    };
    Policies.prototype.getMergeFunction = function (parentTypename, fieldName, childTypename) {
        var policy = this.getFieldPolicy(parentTypename, fieldName);
        var merge = policy && policy.merge;
        if (!merge && childTypename) {
            policy = this.getTypePolicy(childTypename);
            merge = policy && policy.merge;
        }
        return merge;
    };
    Policies.prototype.runMergeFunction = function (existing, incoming, _a, context, storage) {
        var field = _a.field, typename = _a.typename, merge = _a.merge;
        if (merge === mergeTrueFn) {
            // Instead of going to the trouble of creating a full
            // FieldFunctionOptions object and calling mergeTrueFn, we can
            // simply call mergeObjects, as mergeTrueFn would.
            return makeMergeObjectsFunction(context.store)(existing, incoming);
        }
        if (merge === mergeFalseFn) {
            // Likewise for mergeFalseFn, whose implementation is even simpler.
            return incoming;
        }
        // If cache.writeQuery or cache.writeFragment was called with
        // options.overwrite set to true, we still call merge functions, but
        // the existing data is always undefined, so the merge function will
        // not attempt to combine the incoming data with the existing data.
        if (context.overwrite) {
            existing = void 0;
        }
        return merge(existing, incoming, makeFieldFunctionOptions(this, 
        // Unlike options.readField for read functions, we do not fall
        // back to the current object if no foreignObjOrRef is provided,
        // because it's not clear what the current object should be for
        // merge functions: the (possibly undefined) existing object, or
        // the incoming object? If you think your merge function needs
        // to read sibling fields in order to produce a new value for
        // the current field, you might want to rethink your strategy,
        // because that's a recipe for making merge behavior sensitive
        // to the order in which fields are written into the cache.
        // However, readField(name, ref) is useful for merge functions
        // that need to deduplicate child objects and references.
        void 0, {
            typename: typename,
            fieldName: field.name.value,
            field: field,
            variables: context.variables,
        }, context, storage || Object.create(null)));
    };
    return Policies;
}());

function makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {
    var storeFieldName = policies.getStoreFieldName(fieldSpec);
    var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.fieldNameFromStoreName)(storeFieldName);
    var variables = fieldSpec.variables || context.variables;
    var _a = context.store, toReference = _a.toReference, canRead = _a.canRead;
    return {
        args: argsFromFieldSpecifier(fieldSpec),
        field: fieldSpec.field || null,
        fieldName: fieldName,
        storeFieldName: storeFieldName,
        variables: variables,
        isReference: _utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference,
        toReference: toReference,
        storage: storage,
        cache: policies.cache,
        canRead: canRead,
        readField: function () {
            return policies.readField(normalizeReadFieldOptions(arguments, objectOrReference, variables), context);
        },
        mergeObjects: makeMergeObjectsFunction(context.store),
    };
}
function normalizeReadFieldOptions(readFieldArgs, objectOrReference, variables) {
    var fieldNameOrOptions = readFieldArgs[0], from = readFieldArgs[1], argc = readFieldArgs.length;
    var options;
    if (typeof fieldNameOrOptions === "string") {
        options = {
            fieldName: fieldNameOrOptions,
            // Default to objectOrReference only when no second argument was
            // passed for the from parameter, not when undefined is explicitly
            // passed as the second argument.
            from: argc > 1 ? from : objectOrReference,
        };
    }
    else {
        options = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, fieldNameOrOptions);
        // Default to objectOrReference only when fieldNameOrOptions.from is
        // actually omitted, rather than just undefined.
        if (!_helpers_js__WEBPACK_IMPORTED_MODULE_3__.hasOwn.call(options, "from")) {
            options.from = objectOrReference;
        }
    }
    if (globalThis.__DEV__ !== false && options.from === void 0) {
        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(8, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.stringifyForDisplay)(Array.from(readFieldArgs)));
    }
    if (void 0 === options.variables) {
        options.variables = variables;
    }
    return options;
}
function makeMergeObjectsFunction(store) {
    return function mergeObjects(existing, incoming) {
        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(existing) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.isArray)(incoming)) {
            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(9);
        }
        // These dynamic checks are necessary because the parameters of a
        // custom merge function can easily have the any type, so the type
        // system cannot always enforce the StoreObject | Reference parameter
        // types of options.mergeObjects.
        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(existing) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isNonNullObject)(incoming)) {
            var eType = store.getFieldValue(existing, "__typename");
            var iType = store.getFieldValue(incoming, "__typename");
            var typesDiffer = eType && iType && eType !== iType;
            if (typesDiffer) {
                return incoming;
            }
            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(existing) && (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(incoming)) {
                // Update the normalized EntityStore for the entity identified by
                // existing.__ref, preferring/overwriting any fields contributed by the
                // newer incoming StoreObject.
                store.merge(existing.__ref, incoming);
                return existing;
            }
            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(existing) && (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(incoming)) {
                // Update the normalized EntityStore for the entity identified by
                // incoming.__ref, taking fields from the older existing object only if
                // those fields are not already present in the newer StoreObject
                // identified by incoming.__ref.
                store.merge(existing, incoming.__ref);
                return incoming;
            }
            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(existing) &&
                (0,_helpers_js__WEBPACK_IMPORTED_MODULE_3__.storeValueIsStoreObject)(incoming)) {
                return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, existing), incoming);
            }
        }
        return incoming;
    };
}
//# sourceMappingURL=policies.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/reactiveVars.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  cacheSlot: () => (cacheSlot),
  forgetCache: () => (forgetCache),
  makeVar: () => (makeVar),
  recallCache: () => (recallCache)
});
/* ESM import */var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js");

// Contextual Slot that acquires its value when custom read functions are
// called in Policies#readField.
var cacheSlot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();
var cacheInfoMap = new WeakMap();
function getCacheInfo(cache) {
    var info = cacheInfoMap.get(cache);
    if (!info) {
        cacheInfoMap.set(cache, (info = {
            vars: new Set(),
            dep: (0,optimism__WEBPACK_IMPORTED_MODULE_0__.dep)(),
        }));
    }
    return info;
}
function forgetCache(cache) {
    getCacheInfo(cache).vars.forEach(function (rv) { return rv.forgetCache(cache); });
}
// Calling forgetCache(cache) serves to silence broadcasts and allows the
// cache to be garbage collected. However, the varsByCache WeakMap
// preserves the set of reactive variables that were previously associated
// with this cache, which makes it possible to "recall" the cache at a
// later time, by reattaching it to those variables. If the cache has been
// garbage collected in the meantime, because it is no longer reachable,
// you won't be able to call recallCache(cache), and the cache will
// automatically disappear from the varsByCache WeakMap.
function recallCache(cache) {
    getCacheInfo(cache).vars.forEach(function (rv) { return rv.attachCache(cache); });
}
function makeVar(value) {
    var caches = new Set();
    var listeners = new Set();
    var rv = function (newValue) {
        if (arguments.length > 0) {
            if (value !== newValue) {
                value = newValue;
                caches.forEach(function (cache) {
                    // Invalidate any fields with custom read functions that
                    // consumed this variable, so query results involving those
                    // fields will be recomputed the next time we read them.
                    getCacheInfo(cache).dep.dirty(rv);
                    // Broadcast changes to any caches that have previously read
                    // from this variable.
                    broadcast(cache);
                });
                // Finally, notify any listeners added via rv.onNextChange.
                var oldListeners = Array.from(listeners);
                listeners.clear();
                oldListeners.forEach(function (listener) { return listener(value); });
            }
        }
        else {
            // When reading from the variable, obtain the current cache from
            // context via cacheSlot. This isn't entirely foolproof, but it's
            // the same system that powers varDep.
            var cache = cacheSlot.getValue();
            if (cache) {
                attach(cache);
                getCacheInfo(cache).dep(rv);
            }
        }
        return value;
    };
    rv.onNextChange = function (listener) {
        listeners.add(listener);
        return function () {
            listeners.delete(listener);
        };
    };
    var attach = (rv.attachCache = function (cache) {
        caches.add(cache);
        getCacheInfo(cache).vars.add(rv);
        return rv;
    });
    rv.forgetCache = function (cache) { return caches.delete(cache); };
    return rv;
}
function broadcast(cache) {
    if (cache.broadcastWatches) {
        cache.broadcastWatches();
    }
}
//# sourceMappingURL=reactiveVars.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/readFromStore.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  StoreReader: () => (StoreReader)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs");
/* ESM import */var optimism__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/canUse.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/compact.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/sizes.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/storeUtils.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/getFromAST.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/canonicalStringify.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/mergeDeep.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/directives.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/transform.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/fragments.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/objects.js");
/* ESM import */var _entityStore_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/entityStore.js");
/* ESM import */var _helpers_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/helpers.js");
/* ESM import */var _helpers_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/arrays.js");
/* ESM import */var _core_types_common_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/core/types/common.js");
/* ESM import */var _object_canon_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/object-canon.js");









function execSelectionSetKeyArgs(options) {
    return [
        options.selectionSet,
        options.objectOrReference,
        options.context,
        // We split out this property so we can pass different values
        // independently without modifying options.context itself.
        options.context.canonizeResults,
    ];
}
var StoreReader = /** @class */ (function () {
    function StoreReader(config) {
        var _this = this;
        this.knownResults = new (_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseWeakMap ? WeakMap : Map)();
        this.config = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.compact)(config, {
            addTypename: config.addTypename !== false,
            canonizeResults: (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.shouldCanonizeResults)(config),
        });
        this.canon = config.canon || new _object_canon_js__WEBPACK_IMPORTED_MODULE_5__.ObjectCanon();
        // memoized functions in this class will be "garbage-collected"
        // by recreating the whole `StoreReader` in
        // `InMemoryCache.resetResultsCache`
        // (triggered from `InMemoryCache.gc` with `resetResultCache: true`)
        this.executeSelectionSet = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function (options) {
            var _a;
            var canonizeResults = options.context.canonizeResults;
            var peekArgs = execSelectionSetKeyArgs(options);
            // Negate this boolean option so we can find out if we've already read
            // this result using the other boolean value.
            peekArgs[3] = !canonizeResults;
            var other = (_a = _this.executeSelectionSet).peek.apply(_a, peekArgs);
            if (other) {
                if (canonizeResults) {
                    return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, other), { 
                        // If we previously read this result without canonizing it, we can
                        // reuse that result simply by canonizing it now.
                        result: _this.canon.admit(other.result) });
                }
                // If we previously read this result with canonization enabled, we can
                // return that canonized result as-is.
                return other;
            }
            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);
            // Finally, if we didn't find any useful previous results, run the real
            // execSelectionSetImpl method with the given options.
            return _this.execSelectionSetImpl(options);
        }, {
            max: this.config.resultCacheMaxSize ||
                _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.cacheSizes["inMemoryCache.executeSelectionSet"] ||
                50000 /* defaultCacheSizes["inMemoryCache.executeSelectionSet"] */,
            keyArgs: execSelectionSetKeyArgs,
            // Note that the parameters of makeCacheKey are determined by the
            // array returned by keyArgs.
            makeCacheKey: function (selectionSet, parent, context, canonizeResults) {
                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store)) {
                    return context.store.makeCacheKey(selectionSet, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(parent) ? parent.__ref : parent, context.varString, canonizeResults);
                }
            },
        });
        this.executeSubSelectedArray = (0,optimism__WEBPACK_IMPORTED_MODULE_1__.wrap)(function (options) {
            (0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.maybeDependOnExistenceOfEntity)(options.context.store, options.enclosingRef.__ref);
            return _this.execSubSelectedArrayImpl(options);
        }, {
            max: this.config.resultCacheMaxSize ||
                _utilities_index_js__WEBPACK_IMPORTED_MODULE_8__.cacheSizes["inMemoryCache.executeSubSelectedArray"] ||
                10000 /* defaultCacheSizes["inMemoryCache.executeSubSelectedArray"] */,
            makeCacheKey: function (_a) {
                var field = _a.field, array = _a.array, context = _a.context;
                if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store)) {
                    return context.store.makeCacheKey(field, array, context.varString);
                }
            },
        });
    }
    StoreReader.prototype.resetCanon = function () {
        this.canon = new _object_canon_js__WEBPACK_IMPORTED_MODULE_5__.ObjectCanon();
    };
    /**
     * Given a store and a query, return as much of the result as possible and
     * identify if any data was missing from the store.
     */
    StoreReader.prototype.diffQueryAgainstStore = function (_a) {
        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? "ROOT_QUERY" : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c, _d = _a.canonizeResults, canonizeResults = _d === void 0 ? this.config.canonizeResults : _d;
        var policies = this.config.cache.policies;
        variables = (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getDefaultValues)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getQueryDefinition)(query))), variables);
        var rootRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.makeReference)(rootId);
        var execResult = this.executeSelectionSet({
            selectionSet: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.getMainDefinition)(query).selectionSet,
            objectOrReference: rootRef,
            enclosingRef: rootRef,
            context: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({ store: store, query: query, policies: policies, variables: variables, varString: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_11__.canonicalStringify)(variables), canonizeResults: canonizeResults }, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.extractFragmentContext)(query, this.config.fragments)),
        });
        var missing;
        if (execResult.missing) {
            // For backwards compatibility we still report an array of
            // MissingFieldError objects, even though there will only ever be at most
            // one of them, now that all missing field error messages are grouped
            // together in the execResult.missing tree.
            missing = [
                new _core_types_common_js__WEBPACK_IMPORTED_MODULE_12__.MissingFieldError(firstMissing(execResult.missing), execResult.missing, query, variables),
            ];
            if (!returnPartialData) {
                throw missing[0];
            }
        }
        return {
            result: execResult.result,
            complete: !missing,
            missing: missing,
        };
    };
    StoreReader.prototype.isFresh = function (result, parent, selectionSet, context) {
        if ((0,_entityStore_js__WEBPACK_IMPORTED_MODULE_7__.supportsResultCaching)(context.store) &&
            this.knownResults.get(result) === selectionSet) {
            var latest = this.executeSelectionSet.peek(selectionSet, parent, context, 
            // If result is canonical, then it could only have been previously
            // cached by the canonizing version of executeSelectionSet, so we can
            // avoid checking both possibilities here.
            this.canon.isKnown(result));
            if (latest && result === latest.result) {
                return true;
            }
        }
        return false;
    };
    // Uncached version of executeSelectionSet.
    StoreReader.prototype.execSelectionSetImpl = function (_a) {
        var _this = this;
        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, enclosingRef = _a.enclosingRef, context = _a.context;
        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) &&
            !context.policies.rootTypenamesById[objectOrReference.__ref] &&
            !context.store.has(objectOrReference.__ref)) {
            return {
                result: this.canon.empty,
                missing: "Dangling reference to missing ".concat(objectOrReference.__ref, " object"),
            };
        }
        var variables = context.variables, policies = context.policies, store = context.store;
        var typename = store.getFieldValue(objectOrReference, "__typename");
        var objectsToMerge = [];
        var missing;
        var missingMerger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.DeepMerger();
        if (this.config.addTypename &&
            typeof typename === "string" &&
            !policies.rootIdsByTypename[typename]) {
            // Ensure we always include a default value for the __typename
            // field, if we have one, and this.config.addTypename is true. Note
            // that this field can be overridden by other merged objects.
            objectsToMerge.push({ __typename: typename });
        }
        function handleMissing(result, resultName) {
            var _a;
            if (result.missing) {
                missing = missingMerger.merge(missing, (_a = {},
                    _a[resultName] = result.missing,
                    _a));
            }
            return result.result;
        }
        var workSet = new Set(selectionSet.selections);
        workSet.forEach(function (selection) {
            var _a, _b;
            // Omit fields with directives @skip(if: <truthy value>) or
            // @include(if: <falsy value>).
            if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_14__.shouldInclude)(selection, variables))
                return;
            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isField)(selection)) {
                var fieldValue = policies.readField({
                    fieldName: selection.name.value,
                    field: selection,
                    variables: context.variables,
                    from: objectOrReference,
                }, context);
                var resultName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.resultKeyNameFromField)(selection);
                if (fieldValue === void 0) {
                    if (!_utilities_index_js__WEBPACK_IMPORTED_MODULE_15__.addTypenameToDocument.added(selection)) {
                        missing = missingMerger.merge(missing, (_a = {},
                            _a[resultName] = "Can't find field '".concat(selection.name.value, "' on ").concat((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(objectOrReference) ?
                                objectOrReference.__ref + " object"
                                : "object " + JSON.stringify(objectOrReference, null, 2)),
                            _a));
                    }
                }
                else if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_16__.isArray)(fieldValue)) {
                    if (fieldValue.length > 0) {
                        fieldValue = handleMissing(_this.executeSubSelectedArray({
                            field: selection,
                            array: fieldValue,
                            enclosingRef: enclosingRef,
                            context: context,
                        }), resultName);
                    }
                }
                else if (!selection.selectionSet) {
                    // If the field does not have a selection set, then we handle it
                    // as a scalar value. To keep this.canon from canonicalizing
                    // this value, we use this.canon.pass to wrap fieldValue in a
                    // Pass object that this.canon.admit will later unwrap as-is.
                    if (context.canonizeResults) {
                        fieldValue = _this.canon.pass(fieldValue);
                    }
                }
                else if (fieldValue != null) {
                    // In this case, because we know the field has a selection set,
                    // it must be trying to query a GraphQLObjectType, which is why
                    // fieldValue must be != null.
                    fieldValue = handleMissing(_this.executeSelectionSet({
                        selectionSet: selection.selectionSet,
                        objectOrReference: fieldValue,
                        enclosingRef: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(fieldValue) ? fieldValue : enclosingRef,
                        context: context,
                    }), resultName);
                }
                if (fieldValue !== void 0) {
                    objectsToMerge.push((_b = {}, _b[resultName] = fieldValue, _b));
                }
            }
            else {
                var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_17__.getFragmentFromSelection)(selection, context.lookupFragment);
                if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_18__.Kind.FRAGMENT_SPREAD) {
                    throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(10, selection.name.value);
                }
                if (fragment && policies.fragmentMatches(fragment, typename)) {
                    fragment.selectionSet.selections.forEach(workSet.add, workSet);
                }
            }
        });
        var result = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.mergeDeepArray)(objectsToMerge);
        var finalResult = { result: result, missing: missing };
        var frozen = context.canonizeResults ?
            this.canon.admit(finalResult)
            // Since this.canon is normally responsible for freezing results (only in
            // development), freeze them manually if canonization is disabled.
            : (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_19__.maybeDeepFreeze)(finalResult);
        // Store this result with its selection set so that we can quickly
        // recognize it again in the StoreReader#isFresh method.
        if (frozen.result) {
            this.knownResults.set(frozen.result, selectionSet);
        }
        return frozen;
    };
    // Uncached version of executeSubSelectedArray.
    StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {
        var _this = this;
        var field = _a.field, array = _a.array, enclosingRef = _a.enclosingRef, context = _a.context;
        var missing;
        var missingMerger = new _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.DeepMerger();
        function handleMissing(childResult, i) {
            var _a;
            if (childResult.missing) {
                missing = missingMerger.merge(missing, (_a = {}, _a[i] = childResult.missing, _a));
            }
            return childResult.result;
        }
        if (field.selectionSet) {
            array = array.filter(context.store.canRead);
        }
        array = array.map(function (item, i) {
            // null value in array
            if (item === null) {
                return null;
            }
            // This is a nested array, recurse
            if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_16__.isArray)(item)) {
                return handleMissing(_this.executeSubSelectedArray({
                    field: field,
                    array: item,
                    enclosingRef: enclosingRef,
                    context: context,
                }), i);
            }
            // This is an object, run the selection set on it
            if (field.selectionSet) {
                return handleMissing(_this.executeSelectionSet({
                    selectionSet: field.selectionSet,
                    objectOrReference: item,
                    enclosingRef: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(item) ? item : enclosingRef,
                    context: context,
                }), i);
            }
            if (globalThis.__DEV__ !== false) {
                assertSelectionSetForIdValue(context.store, field, item);
            }
            return item;
        });
        return {
            result: context.canonizeResults ? this.canon.admit(array) : array,
            missing: missing,
        };
    };
    return StoreReader;
}());

function firstMissing(tree) {
    try {
        JSON.stringify(tree, function (_, value) {
            if (typeof value === "string")
                throw value;
            return value;
        });
    }
    catch (result) {
        return result;
    }
}
function assertSelectionSetForIdValue(store, field, fieldValue) {
    if (!field.selectionSet) {
        var workSet_1 = new Set([fieldValue]);
        workSet_1.forEach(function (value) {
            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_20__.isNonNullObject)(value)) {
                (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(
                    !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.isReference)(value),
                    11,
                    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_4__.getTypenameFromStoreObject)(store, value),
                    field.name.value
                );
                Object.values(value).forEach(workSet_1.add, workSet_1);
            }
        });
    }
}
//# sourceMappingURL=readFromStore.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/writeToStore.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  StoreWriter: () => (StoreWriter)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js");
/* ESM import */var _wry_trie__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@wry+trie@0.5.0/node_modules/@wry/trie/lib/index.js");
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/getFromAST.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/canonicalStringify.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/storeUtils.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/transform.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/cloneDeep.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/directives.js");
/* ESM import */var _helpers_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/arrays.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/fragments.js");
/* ESM import */var _helpers_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/helpers.js");
/* ESM import */var _policies_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/cache/inmemory/policies.js");








// Since there are only four possible combinations of context.clientOnly and
// context.deferred values, we should need at most four "flavors" of any given
// WriteContext. To avoid creating multiple copies of the same context, we cache
// the contexts in the context.flavors Map (shared by all flavors) according to
// their clientOnly and deferred values (always in that order).
function getContextFlavor(context, clientOnly, deferred) {
    var key = "".concat(clientOnly).concat(deferred);
    var flavored = context.flavors.get(key);
    if (!flavored) {
        context.flavors.set(key, (flavored =
            context.clientOnly === clientOnly && context.deferred === deferred ?
                context
                : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, context), { clientOnly: clientOnly, deferred: deferred })));
    }
    return flavored;
}
var StoreWriter = /** @class */ (function () {
    function StoreWriter(cache, reader, fragments) {
        this.cache = cache;
        this.reader = reader;
        this.fragments = fragments;
    }
    StoreWriter.prototype.writeToStore = function (store, _a) {
        var _this = this;
        var query = _a.query, result = _a.result, dataId = _a.dataId, variables = _a.variables, overwrite = _a.overwrite;
        var operationDefinition = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getOperationDefinition)(query);
        var merger = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.makeProcessedFieldsMerger)();
        variables = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.getDefaultValues)(operationDefinition)), variables);
        var context = (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({ store: store, written: Object.create(null), merge: function (existing, incoming) {
                return merger.merge(existing, incoming);
            }, variables: variables, varString: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.canonicalStringify)(variables) }, (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.extractFragmentContext)(query, this.fragments)), { overwrite: !!overwrite, incomingById: new Map(), clientOnly: false, deferred: false, flavors: new Map() });
        var ref = this.processSelectionSet({
            result: result || Object.create(null),
            dataId: dataId,
            selectionSet: operationDefinition.selectionSet,
            mergeTree: { map: new Map() },
            context: context,
        });
        if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(ref)) {
            throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(12, result);
        }
        // So far, the store has not been modified, so now it's time to process
        // context.incomingById and merge those incoming fields into context.store.
        context.incomingById.forEach(function (_a, dataId) {
            var storeObject = _a.storeObject, mergeTree = _a.mergeTree, fieldNodeSet = _a.fieldNodeSet;
            var entityRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.makeReference)(dataId);
            if (mergeTree && mergeTree.map.size) {
                var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);
                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(applied)) {
                    // Assume References returned by applyMerges have already been merged
                    // into the store. See makeMergeObjectsFunction in policies.ts for an
                    // example of how this can happen.
                    return;
                }
                // Otherwise, applyMerges returned a StoreObject, whose fields we should
                // merge into the store (see store.merge statement below).
                storeObject = applied;
            }
            if (globalThis.__DEV__ !== false && !context.overwrite) {
                var fieldsWithSelectionSets_1 = Object.create(null);
                fieldNodeSet.forEach(function (field) {
                    if (field.selectionSet) {
                        fieldsWithSelectionSets_1[field.name.value] = true;
                    }
                });
                var hasSelectionSet_1 = function (storeFieldName) {
                    return fieldsWithSelectionSets_1[(0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.fieldNameFromStoreName)(storeFieldName)] ===
                        true;
                };
                var hasMergeFunction_1 = function (storeFieldName) {
                    var childTree = mergeTree && mergeTree.map.get(storeFieldName);
                    return Boolean(childTree && childTree.info && childTree.info.merge);
                };
                Object.keys(storeObject).forEach(function (storeFieldName) {
                    // If a merge function was defined for this field, trust that it
                    // did the right thing about (not) clobbering data. If the field
                    // has no selection set, it's a scalar field, so it doesn't need
                    // a merge function (even if it's an object, like JSON data).
                    if (hasSelectionSet_1(storeFieldName) &&
                        !hasMergeFunction_1(storeFieldName)) {
                        warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);
                    }
                });
            }
            store.merge(dataId, storeObject);
        });
        // Any IDs written explicitly to the cache will be retained as
        // reachable root IDs for garbage collection purposes. Although this
        // logic includes root IDs like ROOT_QUERY and ROOT_MUTATION, their
        // retainment counts are effectively ignored because cache.gc() always
        // includes them in its root ID set.
        store.retain(ref.__ref);
        return ref;
    };
    StoreWriter.prototype.processSelectionSet = function (_a) {
        var _this = this;
        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, 
        // This object allows processSelectionSet to report useful information
        // to its callers without explicitly returning that information.
        mergeTree = _a.mergeTree;
        var policies = this.cache.policies;
        // This variable will be repeatedly updated using context.merge to
        // accumulate all fields that need to be written into the store.
        var incoming = Object.create(null);
        // If typename was not passed in, infer it. Note that typename is
        // always passed in for tricky-to-infer cases such as "Query" for
        // ROOT_QUERY.
        var typename = (dataId && policies.rootTypenamesById[dataId]) ||
            (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getTypenameFromResult)(result, selectionSet, context.fragmentMap) ||
            (dataId && context.store.get(dataId, "__typename"));
        if ("string" === typeof typename) {
            incoming.__typename = typename;
        }
        // This readField function will be passed as context.readField in the
        // KeyFieldsContext object created within policies.identify (called below).
        // In addition to reading from the existing context.store (thanks to the
        // policies.readField(options, context) line at the very bottom), this
        // version of readField can read from Reference objects that are currently
        // pending in context.incomingById, which is important whenever keyFields
        // need to be extracted from a child object that processSelectionSet has
        // turned into a Reference.
        var readField = function () {
            var options = (0,_policies_js__WEBPACK_IMPORTED_MODULE_8__.normalizeReadFieldOptions)(arguments, incoming, context.variables);
            if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(options.from)) {
                var info = context.incomingById.get(options.from.__ref);
                if (info) {
                    var result_1 = policies.readField((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, options), { from: info.storeObject }), context);
                    if (result_1 !== void 0) {
                        return result_1;
                    }
                }
            }
            return policies.readField(options, context);
        };
        var fieldNodeSet = new Set();
        this.flattenFields(selectionSet, result, 
        // This WriteContext will be the default context value for fields returned
        // by the flattenFields method, but some fields may be assigned a modified
        // context, depending on the presence of @client and other directives.
        context, typename).forEach(function (context, field) {
            var _a;
            var resultFieldKey = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.resultKeyNameFromField)(field);
            var value = result[resultFieldKey];
            fieldNodeSet.add(field);
            if (value !== void 0) {
                var storeFieldName = policies.getStoreFieldName({
                    typename: typename,
                    fieldName: field.name.value,
                    field: field,
                    variables: context.variables,
                });
                var childTree = getChildMergeTree(mergeTree, storeFieldName);
                var incomingValue = _this.processFieldValue(value, field, 
                // Reset context.clientOnly and context.deferred to their default
                // values before processing nested selection sets.
                field.selectionSet ?
                    getContextFlavor(context, false, false)
                    : context, childTree);
                // To determine if this field holds a child object with a merge function
                // defined in its type policy (see PR #7070), we need to figure out the
                // child object's __typename.
                var childTypename = void 0;
                // The field's value can be an object that has a __typename only if the
                // field has a selection set. Otherwise incomingValue is scalar.
                if (field.selectionSet &&
                    ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(incomingValue) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.storeValueIsStoreObject)(incomingValue))) {
                    childTypename = readField("__typename", incomingValue);
                }
                var merge = policies.getMergeFunction(typename, field.name.value, childTypename);
                if (merge) {
                    childTree.info = {
                        // TODO Check compatibility against any existing childTree.field?
                        field: field,
                        typename: typename,
                        merge: merge,
                    };
                }
                else {
                    maybeRecycleChildMergeTree(mergeTree, storeFieldName);
                }
                incoming = context.merge(incoming, (_a = {},
                    _a[storeFieldName] = incomingValue,
                    _a));
            }
            else if (globalThis.__DEV__ !== false &&
                !context.clientOnly &&
                !context.deferred &&
                !_utilities_index_js__WEBPACK_IMPORTED_MODULE_9__.addTypenameToDocument.added(field) &&
                // If the field has a read function, it may be a synthetic field or
                // provide a default value, so its absence from the written data should
                // not be cause for alarm.
                !policies.getReadFunction(typename, field.name.value)) {
                globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(13, (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.resultKeyNameFromField)(field), result);
            }
        });
        // Identify the result object, even if dataId was already provided,
        // since we always need keyObject below.
        try {
            var _b = policies.identify(result, {
                typename: typename,
                selectionSet: selectionSet,
                fragmentMap: context.fragmentMap,
                storeObject: incoming,
                readField: readField,
            }), id = _b[0], keyObject = _b[1];
            // If dataId was not provided, fall back to the id just generated by
            // policies.identify.
            dataId = dataId || id;
            // Write any key fields that were used during identification, even if
            // they were not mentioned in the original query.
            if (keyObject) {
                // TODO Reverse the order of the arguments?
                incoming = context.merge(incoming, keyObject);
            }
        }
        catch (e) {
            // If dataId was provided, tolerate failure of policies.identify.
            if (!dataId)
                throw e;
        }
        if ("string" === typeof dataId) {
            var dataRef = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.makeReference)(dataId);
            // Avoid processing the same entity object using the same selection
            // set more than once. We use an array instead of a Set since most
            // entity IDs will be written using only one selection set, so the
            // size of this array is likely to be very small, meaning indexOf is
            // likely to be faster than Set.prototype.has.
            var sets = context.written[dataId] || (context.written[dataId] = []);
            if (sets.indexOf(selectionSet) >= 0)
                return dataRef;
            sets.push(selectionSet);
            // If we're about to write a result object into the store, but we
            // happen to know that the exact same (===) result object would be
            // returned if we were to reread the result with the same inputs,
            // then we can skip the rest of the processSelectionSet work for
            // this object, and immediately return a Reference to it.
            if (this.reader &&
                this.reader.isFresh(result, dataRef, selectionSet, context)) {
                return dataRef;
            }
            var previous_1 = context.incomingById.get(dataId);
            if (previous_1) {
                previous_1.storeObject = context.merge(previous_1.storeObject, incoming);
                previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);
                fieldNodeSet.forEach(function (field) { return previous_1.fieldNodeSet.add(field); });
            }
            else {
                context.incomingById.set(dataId, {
                    storeObject: incoming,
                    // Save a reference to mergeTree only if it is not empty, because
                    // empty MergeTrees may be recycled by maybeRecycleChildMergeTree and
                    // reused for entirely different parts of the result tree.
                    mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,
                    fieldNodeSet: fieldNodeSet,
                });
            }
            return dataRef;
        }
        return incoming;
    };
    StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {
        var _this = this;
        if (!field.selectionSet || value === null) {
            // In development, we need to clone scalar values so that they can be
            // safely frozen with maybeDeepFreeze in readFromStore.ts. In production,
            // it's cheaper to store the scalar values directly in the cache.
            return globalThis.__DEV__ !== false ? (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_10__.cloneDeep)(value) : value;
        }
        if ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(value)) {
            return value.map(function (item, i) {
                var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));
                maybeRecycleChildMergeTree(mergeTree, i);
                return value;
            });
        }
        return this.processSelectionSet({
            result: value,
            selectionSet: field.selectionSet,
            context: context,
            mergeTree: mergeTree,
        });
    };
    // Implements https://spec.graphql.org/draft/#sec-Field-Collection, but with
    // some additions for tracking @client and @defer directives.
    StoreWriter.prototype.flattenFields = function (selectionSet, result, context, typename) {
        if (typename === void 0) { typename = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.getTypenameFromResult)(result, selectionSet, context.fragmentMap); }
        var fieldMap = new Map();
        var policies = this.cache.policies;
        var limitingTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_2__.Trie(false); // No need for WeakMap, since limitingTrie does not escape.
        (function flatten(selectionSet, inheritedContext) {
            var visitedNode = limitingTrie.lookup(selectionSet, 
            // Because we take inheritedClientOnly and inheritedDeferred into
            // consideration here (in addition to selectionSet), it's possible for
            // the same selection set to be flattened more than once, if it appears
            // in the query with different @client and/or @directive configurations.
            inheritedContext.clientOnly, inheritedContext.deferred);
            if (visitedNode.visited)
                return;
            visitedNode.visited = true;
            selectionSet.selections.forEach(function (selection) {
                if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_12__.shouldInclude)(selection, context.variables))
                    return;
                var clientOnly = inheritedContext.clientOnly, deferred = inheritedContext.deferred;
                if (
                // Since the presence of @client or @defer on this field can only
                // cause clientOnly or deferred to become true, we can skip the
                // forEach loop if both clientOnly and deferred are already true.
                !(clientOnly && deferred) &&
                    (0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isNonEmptyArray)(selection.directives)) {
                    selection.directives.forEach(function (dir) {
                        var name = dir.name.value;
                        if (name === "client")
                            clientOnly = true;
                        if (name === "defer") {
                            var args = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.argumentsObjectFromField)(dir, context.variables);
                            // The @defer directive takes an optional args.if boolean
                            // argument, similar to @include(if: boolean). Note that
                            // @defer(if: false) does not make context.deferred false, but
                            // instead behaves as if there was no @defer directive.
                            if (!args || args.if !== false) {
                                deferred = true;
                            }
                            // TODO In the future, we may want to record args.label using
                            // context.deferred, if a label is specified.
                        }
                    });
                }
                if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection)) {
                    var existing = fieldMap.get(selection);
                    if (existing) {
                        // If this field has been visited along another recursive path
                        // before, the final context should have clientOnly or deferred set
                        // to true only if *all* paths have the directive (hence the &&).
                        clientOnly = clientOnly && existing.clientOnly;
                        deferred = deferred && existing.deferred;
                    }
                    fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));
                }
                else {
                    var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_13__.getFragmentFromSelection)(selection, context.lookupFragment);
                    if (!fragment && selection.kind === graphql__WEBPACK_IMPORTED_MODULE_14__.Kind.FRAGMENT_SPREAD) {
                        throw (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(14, selection.name.value);
                    }
                    if (fragment &&
                        policies.fragmentMatches(fragment, typename, result, context.variables)) {
                        flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));
                    }
                }
            });
        })(selectionSet, context);
        return fieldMap;
    };
    StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {
        var _a;
        var _this = this;
        if (mergeTree.map.size && !(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(incoming)) {
            var e_1 = 
            // Items in the same position in different arrays are not
            // necessarily related to each other, so when incoming is an array
            // we process its elements as if there was no existing data.
            (!(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(incoming) &&
                // Likewise, existing must be either a Reference or a StoreObject
                // in order for its fields to be safe to merge with the fields of
                // the incoming object.
                ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(existing) || (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.storeValueIsStoreObject)(existing))) ?
                existing
                : void 0;
            // This narrowing is implied by mergeTree.map.size > 0 and
            // !isReference(incoming), though TypeScript understandably cannot
            // hope to infer this type.
            var i_1 = incoming;
            // The options.storage objects provided to read and merge functions
            // are derived from the identity of the parent object plus a
            // sequence of storeFieldName strings/numbers identifying the nested
            // field name path of each field value to be merged.
            if (e_1 && !getStorageArgs) {
                getStorageArgs = [(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(e_1) ? e_1.__ref : e_1];
            }
            // It's possible that applying merge functions to this subtree will
            // not change the incoming data, so this variable tracks the fields
            // that did change, so we can create a new incoming object when (and
            // only when) at least one incoming field has changed. We use a Map
            // to preserve the type of numeric keys.
            var changedFields_1;
            var getValue_1 = function (from, name) {
                return ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(from) ?
                    typeof name === "number" ?
                        from[name]
                        : void 0
                    : context.store.getFieldValue(from, String(name)));
            };
            mergeTree.map.forEach(function (childTree, storeFieldName) {
                var eVal = getValue_1(e_1, storeFieldName);
                var iVal = getValue_1(i_1, storeFieldName);
                // If we have no incoming data, leave any existing data untouched.
                if (void 0 === iVal)
                    return;
                if (getStorageArgs) {
                    getStorageArgs.push(storeFieldName);
                }
                var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);
                if (aVal !== iVal) {
                    changedFields_1 = changedFields_1 || new Map();
                    changedFields_1.set(storeFieldName, aVal);
                }
                if (getStorageArgs) {
                    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(getStorageArgs.pop() === storeFieldName);
                }
            });
            if (changedFields_1) {
                // Shallow clone i so we can add changed fields to it.
                incoming = ((0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(i_1) ? i_1.slice(0) : (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, i_1));
                changedFields_1.forEach(function (value, name) {
                    incoming[name] = value;
                });
            }
        }
        if (mergeTree.info) {
            return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));
        }
        return incoming;
    };
    return StoreWriter;
}());

var emptyMergeTreePool = [];
function getChildMergeTree(_a, name) {
    var map = _a.map;
    if (!map.has(name)) {
        map.set(name, emptyMergeTreePool.pop() || { map: new Map() });
    }
    return map.get(name);
}
function mergeMergeTrees(left, right) {
    if (left === right || !right || mergeTreeIsEmpty(right))
        return left;
    if (!left || mergeTreeIsEmpty(left))
        return right;
    var info = left.info && right.info ? (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, left.info), right.info) : left.info || right.info;
    var needToMergeMaps = left.map.size && right.map.size;
    var map = needToMergeMaps ? new Map()
        : left.map.size ? left.map
            : right.map;
    var merged = { info: info, map: map };
    if (needToMergeMaps) {
        var remainingRightKeys_1 = new Set(right.map.keys());
        left.map.forEach(function (leftTree, key) {
            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));
            remainingRightKeys_1.delete(key);
        });
        remainingRightKeys_1.forEach(function (key) {
            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));
        });
    }
    return merged;
}
function mergeTreeIsEmpty(tree) {
    return !tree || !(tree.info || tree.map.size);
}
function maybeRecycleChildMergeTree(_a, name) {
    var map = _a.map;
    var childTree = map.get(name);
    if (childTree && mergeTreeIsEmpty(childTree)) {
        emptyMergeTreePool.push(childTree);
        map.delete(name);
    }
}
var warnings = new Set();
// Note that this function is unused in production, and thus should be
// pruned by any well-configured minifier.
function warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {
    var getChild = function (objOrRef) {
        var child = store.getFieldValue(objOrRef, storeFieldName);
        return typeof child === "object" && child;
    };
    var existing = getChild(existingRef);
    if (!existing)
        return;
    var incoming = getChild(incomingObj);
    if (!incoming)
        return;
    // It's always safe to replace a reference, since it refers to data
    // safely stored elsewhere.
    if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_7__.isReference)(existing))
        return;
    // If the values are structurally equivalent, we do not need to worry
    // about incoming replacing existing.
    if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__.equal)(existing, incoming))
        return;
    // If we're replacing every key of the existing object, then the
    // existing data would be overwritten even if the objects were
    // normalized, so warning would not be helpful here.
    if (Object.keys(existing).every(function (key) { return store.getFieldValue(incoming, key) !== void 0; })) {
        return;
    }
    var parentType = store.getFieldValue(existingRef, "__typename") ||
        store.getFieldValue(incomingObj, "__typename");
    var fieldName = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_5__.fieldNameFromStoreName)(storeFieldName);
    var typeDotName = "".concat(parentType, ".").concat(fieldName);
    // Avoid warning more than once for the same type and field name.
    if (warnings.has(typeDotName))
        return;
    warnings.add(typeDotName);
    var childTypenames = [];
    // Arrays do not have __typename fields, and always need a custom merge
    // function, even if their elements are normalized entities.
    if (!(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(existing) && !(0,_helpers_js__WEBPACK_IMPORTED_MODULE_11__.isArray)(incoming)) {
        [existing, incoming].forEach(function (child) {
            var typename = store.getFieldValue(child, "__typename");
            if (typeof typename === "string" && !childTypenames.includes(typename)) {
                childTypenames.push(typename);
            }
        });
    }
    globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(15, fieldName, parentType, childTypenames.length ?
        "either ensure all objects of type " +
            childTypenames.join(" and ") +
            " have an ID or a custom merge function, or "
        : "", typeDotName, (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, existing), (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__assign)({}, incoming));
}
//# sourceMappingURL=writeToStore.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/core/equalByQuery.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  equalByQuery: () => (equalByQuery)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var _wry_equality__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/getFromAST.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/fragments.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/directives.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/storeUtils.js");



// Returns true if aResult and bResult are deeply equal according to the fields
// selected by the given query, ignoring any fields marked as @nonreactive.
function equalByQuery(query, _a, _b, variables) {
    var aData = _a.data, aRest = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_a, ["data"]);
    var bData = _b.data, bRest = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__rest)(_b, ["data"]);
    return ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__["default"])(aRest, bRest) &&
        equalBySelectionSet((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getMainDefinition)(query).selectionSet, aData, bData, {
            fragmentMap: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(query)),
            variables: variables,
        }));
}
function equalBySelectionSet(selectionSet, aResult, bResult, context) {
    if (aResult === bResult) {
        return true;
    }
    var seenSelections = new Set();
    // Returning true from this Array.prototype.every callback function skips the
    // current field/subtree. Returning false aborts the entire traversal
    // immediately, causing equalBySelectionSet to return false.
    return selectionSet.selections.every(function (selection) {
        // Avoid re-processing the same selection at the same level of recursion, in
        // case the same field gets included via multiple indirect fragment spreads.
        if (seenSelections.has(selection))
            return true;
        seenSelections.add(selection);
        // Ignore @skip(if: true) and @include(if: false) fields.
        if (!(0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.shouldInclude)(selection, context.variables))
            return true;
        // If the field or (named) fragment spread has a @nonreactive directive on
        // it, we don't care if it's different, so we pretend it's the same.
        if (selectionHasNonreactiveDirective(selection))
            return true;
        if ((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.isField)(selection)) {
            var resultKey = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.resultKeyNameFromField)(selection);
            var aResultChild = aResult && aResult[resultKey];
            var bResultChild = bResult && bResult[resultKey];
            var childSelectionSet = selection.selectionSet;
            if (!childSelectionSet) {
                // These are scalar values, so we can compare them with deep equal
                // without redoing the main recursive work.
                return (0,_wry_equality__WEBPACK_IMPORTED_MODULE_0__["default"])(aResultChild, bResultChild);
            }
            var aChildIsArray = Array.isArray(aResultChild);
            var bChildIsArray = Array.isArray(bResultChild);
            if (aChildIsArray !== bChildIsArray)
                return false;
            if (aChildIsArray && bChildIsArray) {
                var length_1 = aResultChild.length;
                if (bResultChild.length !== length_1) {
                    return false;
                }
                for (var i = 0; i < length_1; ++i) {
                    if (!equalBySelectionSet(childSelectionSet, aResultChild[i], bResultChild[i], context)) {
                        return false;
                    }
                }
                return true;
            }
            return equalBySelectionSet(childSelectionSet, aResultChild, bResultChild, context);
        }
        else {
            var fragment = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentFromSelection)(selection, context.fragmentMap);
            if (fragment) {
                // The fragment might === selection if it's an inline fragment, but
                // could be !== if it's a named fragment ...spread.
                if (selectionHasNonreactiveDirective(fragment))
                    return true;
                return equalBySelectionSet(fragment.selectionSet, 
                // Notice that we reuse the same aResult and bResult values here,
                // since the fragment ...spread does not specify a field name, but
                // consists of multiple fields (within the fragment's selection set)
                // that should be applied to the current result value(s).
                aResult, bResult, context);
            }
        }
    });
}
function selectionHasNonreactiveDirective(selection) {
    return (!!selection.directives && selection.directives.some(directiveIsNonreactive));
}
function directiveIsNonreactive(dir) {
    return dir.name.value === "nonreactive";
}
//# sourceMappingURL=equalByQuery.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/masking/maskDefinition.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  maskDefinition: () => (maskDefinition)
});
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/storeUtils.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/directives.js");
/* ESM import */var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/masking/utils.js");
/* ESM import */var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");




function maskDefinition(data, selectionSet, context) {
    return _utils_js__WEBPACK_IMPORTED_MODULE_1__.disableWarningsSlot.withValue(true, function () {
        var masked = maskSelectionSet(data, selectionSet, context, false);
        if (Object.isFrozen(data)) {
            (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.maybeDeepFreeze)(masked);
        }
        return masked;
    });
}
function getMutableTarget(data, mutableTargets) {
    if (mutableTargets.has(data)) {
        return mutableTargets.get(data);
    }
    var mutableTarget = Array.isArray(data) ? [] : Object.create(null);
    mutableTargets.set(data, mutableTarget);
    return mutableTarget;
}
function maskSelectionSet(data, selectionSet, context, migration, path) {
    var _a;
    var knownChanged = context.knownChanged;
    var memo = getMutableTarget(data, context.mutableTargets);
    if (Array.isArray(data)) {
        for (var _i = 0, _b = Array.from(data.entries()); _i < _b.length; _i++) {
            var _c = _b[_i], index = _c[0], item = _c[1];
            if (item === null) {
                memo[index] = null;
                continue;
            }
            var masked = maskSelectionSet(item, selectionSet, context, migration, globalThis.__DEV__ !== false ? "".concat(path || "", "[").concat(index, "]") : void 0);
            if (knownChanged.has(masked)) {
                knownChanged.add(memo);
            }
            memo[index] = masked;
        }
        return knownChanged.has(memo) ? memo : data;
    }
    for (var _d = 0, _e = selectionSet.selections; _d < _e.length; _d++) {
        var selection = _e[_d];
        var value = void 0;
        // we later want to add acessor warnings to the final result
        // so we need a new object to add the accessor warning to
        if (migration) {
            knownChanged.add(memo);
        }
        if (selection.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FIELD) {
            var keyName = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_4__.resultKeyNameFromField)(selection);
            var childSelectionSet = selection.selectionSet;
            value = memo[keyName] || data[keyName];
            if (value === void 0) {
                continue;
            }
            if (childSelectionSet && value !== null) {
                var masked = maskSelectionSet(data[keyName], childSelectionSet, context, migration, globalThis.__DEV__ !== false ? "".concat(path || "", ".").concat(keyName) : void 0);
                if (knownChanged.has(masked)) {
                    value = masked;
                }
            }
            if (!(globalThis.__DEV__ !== false)) {
                memo[keyName] = value;
            }
            if (globalThis.__DEV__ !== false) {
                if (migration &&
                    keyName !== "__typename" &&
                    // either the field is not present in the memo object
                    // or it has a `get` descriptor, not a `value` descriptor
                    // => it is a warning accessor and we can overwrite it
                    // with another accessor
                    !((_a = Object.getOwnPropertyDescriptor(memo, keyName)) === null || _a === void 0 ? void 0 : _a.value)) {
                    Object.defineProperty(memo, keyName, getAccessorWarningDescriptor(keyName, value, path || "", context.operationName, context.operationType));
                }
                else {
                    delete memo[keyName];
                    memo[keyName] = value;
                }
            }
        }
        if (selection.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.INLINE_FRAGMENT &&
            (!selection.typeCondition ||
                context.cache.fragmentMatches(selection, data.__typename))) {
            value = maskSelectionSet(data, selection.selectionSet, context, migration, path);
        }
        if (selection.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_SPREAD) {
            var fragmentName = selection.name.value;
            var fragment = context.fragmentMap[fragmentName] ||
                (context.fragmentMap[fragmentName] =
                    context.cache.lookupFragment(fragmentName));
            (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 59, fragmentName);
            var mode = (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.getFragmentMaskMode)(selection);
            if (mode !== "mask") {
                value = maskSelectionSet(data, fragment.selectionSet, context, mode === "migrate", path);
            }
        }
        if (knownChanged.has(value)) {
            knownChanged.add(memo);
        }
    }
    if ("__typename" in data && !("__typename" in memo)) {
        memo.__typename = data.__typename;
    }
    // This check prevents cases where masked fields may accidentally be
    // returned as part of this object when the fragment also selects
    // additional fields from the same child selection.
    if (Object.keys(memo).length !== Object.keys(data).length) {
        knownChanged.add(memo);
    }
    return knownChanged.has(memo) ? memo : data;
}
function getAccessorWarningDescriptor(fieldName, value, path, operationName, operationType) {
    var getValue = function () {
        if (_utils_js__WEBPACK_IMPORTED_MODULE_1__.disableWarningsSlot.getValue()) {
            return value;
        }
        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(60, operationName ?
            "".concat(operationType, " '").concat(operationName, "'")
            : "anonymous ".concat(operationType), "".concat(path, ".").concat(fieldName).replace(/^\./, ""));
        getValue = function () { return value; };
        return value;
    };
    return {
        get: function () {
            return getValue();
        },
        set: function (newValue) {
            getValue = function () { return newValue; };
        },
        enumerable: true,
        configurable: true,
    };
}
//# sourceMappingURL=maskDefinition.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/masking/maskFragment.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  maskFragment: () => (maskFragment)
});
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs");
/* ESM import */var _utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/masking/utils.js");
/* ESM import */var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var _wry_equality__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js");
/* ESM import */var _maskDefinition_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/masking/maskDefinition.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/fragments.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/getFromAST.js");






/** @internal */
function maskFragment(data, document, cache, fragmentName) {
    if (!cache.fragmentMatches) {
        if (globalThis.__DEV__ !== false) {
            (0,_utils_js__WEBPACK_IMPORTED_MODULE_2__.warnOnImproperCacheImplementation)();
        }
        return data;
    }
    var fragments = document.definitions.filter(function (node) {
        return node.kind === graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_DEFINITION;
    });
    if (typeof fragmentName === "undefined") {
        (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragments.length === 1, 61, fragments.length);
        fragmentName = fragments[0].name.value;
    }
    var fragment = fragments.find(function (fragment) { return fragment.name.value === fragmentName; });
    (0,_utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(!!fragment, 62, fragmentName);
    if (data == null) {
        // Maintain the original `null` or `undefined` value
        return data;
    }
    if ((0,_wry_equality__WEBPACK_IMPORTED_MODULE_1__["default"])(data, {})) {
        // Return early and skip the masking algorithm if we don't have any data
        // yet. This can happen when cache.diff returns an empty object which is
        // used from watchFragment.
        return data;
    }
    return (0,_maskDefinition_js__WEBPACK_IMPORTED_MODULE_4__.maskDefinition)(data, fragment.selectionSet, {
        operationType: "fragment",
        operationName: fragment.name.value,
        fragmentMap: (0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_5__.createFragmentMap)((0,_utilities_index_js__WEBPACK_IMPORTED_MODULE_6__.getFragmentDefinitions)(document)),
        cache: cache,
        mutableTargets: new _utils_js__WEBPACK_IMPORTED_MODULE_2__.MapImpl(),
        knownChanged: new _utils_js__WEBPACK_IMPORTED_MODULE_2__.SetImpl(),
    });
}
//# sourceMappingURL=maskFragment.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/masking/utils.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  MapImpl: () => (MapImpl),
  SetImpl: () => (SetImpl),
  disableWarningsSlot: () => (disableWarningsSlot),
  warnOnImproperCacheImplementation: () => (warnOnImproperCacheImplementation)
});
/* ESM import */var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js");
/* ESM import */var _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/canUse.js");



var MapImpl = _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseWeakMap ? WeakMap : Map;
var SetImpl = _utilities_index_js__WEBPACK_IMPORTED_MODULE_2__.canUseWeakSet ? WeakSet : Set;
// Contextual slot that allows us to disable accessor warnings on fields when in
// migrate mode.
/** @internal */
var disableWarningsSlot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();
var issuedWarning = false;
function warnOnImproperCacheImplementation() {
    if (!issuedWarning) {
        issuedWarning = true;
        globalThis.__DEV__ !== false && _utilities_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(64);
    }
}
//# sourceMappingURL=utils.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/caches.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  AutoCleanedStrongCache: () => (AutoCleanedStrongCache),
  AutoCleanedWeakCache: () => (AutoCleanedWeakCache)
});
/* ESM import */var _wry_caches__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@wry+caches@1.0.1/node_modules/@wry/caches/lib/weak.js");
/* ESM import */var _wry_caches__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@wry+caches@1.0.1/node_modules/@wry/caches/lib/strong.js");

var scheduledCleanup = new WeakSet();
function schedule(cache) {
    if (cache.size <= (cache.max || -1)) {
        return;
    }
    if (!scheduledCleanup.has(cache)) {
        scheduledCleanup.add(cache);
        setTimeout(function () {
            cache.clean();
            scheduledCleanup.delete(cache);
        }, 100);
    }
}
/**
 * @internal
 * A version of WeakCache that will auto-schedule a cleanup of the cache when
 * a new item is added and the cache reached maximum size.
 * Throttled to once per 100ms.
 *
 * @privateRemarks
 * Should be used throughout the rest of the codebase instead of WeakCache,
 * with the notable exception of usage in `wrap` from `optimism` - that one
 * already handles cleanup and should remain a `WeakCache`.
 */
var AutoCleanedWeakCache = function (max, dispose) {
    /*
    Some builds of `WeakCache` are function prototypes, some are classes.
    This library still builds with an ES5 target, so we can't extend the
    real classes.
    Instead, we have to use this workaround until we switch to a newer build
    target.
    */
    var cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache(max, dispose);
    cache.set = function (key, value) {
        var ret = _wry_caches__WEBPACK_IMPORTED_MODULE_0__.WeakCache.prototype.set.call(this, key, value);
        schedule(this);
        return ret;
    };
    return cache;
};
/**
 * @internal
 * A version of StrongCache that will auto-schedule a cleanup of the cache when
 * a new item is added and the cache reached maximum size.
 * Throttled to once per 100ms.
 *
 * @privateRemarks
 * Should be used throughout the rest of the codebase instead of StrongCache,
 * with the notable exception of usage in `wrap` from `optimism` - that one
 * already handles cleanup and should remain a `StrongCache`.
 */
var AutoCleanedStrongCache = function (max, dispose) {
    /*
    Some builds of `StrongCache` are function prototypes, some are classes.
    This library still builds with an ES5 target, so we can't extend the
    real classes.
    Instead, we have to use this workaround until we switch to a newer build
    target.
    */
    var cache = new _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache(max, dispose);
    cache.set = function (key, value) {
        var ret = _wry_caches__WEBPACK_IMPORTED_MODULE_1__.StrongCache.prototype.set.call(this, key, value);
        schedule(this);
        return ret;
    };
    return cache;
};
//# sourceMappingURL=caches.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/getMemoryInternals.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getApolloCacheMemoryInternals: () => (getApolloCacheMemoryInternals),
  getApolloClientMemoryInternals: () => (getApolloClientMemoryInternals),
  getInMemoryCacheMemoryInternals: () => (getInMemoryCacheMemoryInternals),
  registerGlobalCache: () => (registerGlobalCache)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var _sizes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/sizes.js");


var globalCaches = {};
function registerGlobalCache(name, getSize) {
    globalCaches[name] = getSize;
}
/**
 * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead
 * @internal
 */
var getApolloClientMemoryInternals = globalThis.__DEV__ !== false ?
    _getApolloClientMemoryInternals
    : undefined;
/**
 * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead
 * @internal
 */
var getInMemoryCacheMemoryInternals = globalThis.__DEV__ !== false ?
    _getInMemoryCacheMemoryInternals
    : undefined;
/**
 * For internal purposes only - please call `ApolloClient.getMemoryInternals` instead
 * @internal
 */
var getApolloCacheMemoryInternals = globalThis.__DEV__ !== false ?
    _getApolloCacheMemoryInternals
    : undefined;
function getCurrentCacheSizes() {
    // `defaultCacheSizes` is a `const enum` that will be inlined during build, so we have to reconstruct it's shape here
    var defaults = {
        parser: 1000 /* defaultCacheSizes["parser"] */,
        canonicalStringify: 1000 /* defaultCacheSizes["canonicalStringify"] */,
        print: 2000 /* defaultCacheSizes["print"] */,
        "documentTransform.cache": 2000 /* defaultCacheSizes["documentTransform.cache"] */,
        "queryManager.getDocumentInfo": 2000 /* defaultCacheSizes["queryManager.getDocumentInfo"] */,
        "PersistedQueryLink.persistedQueryHashes": 2000 /* defaultCacheSizes["PersistedQueryLink.persistedQueryHashes"] */,
        "fragmentRegistry.transform": 2000 /* defaultCacheSizes["fragmentRegistry.transform"] */,
        "fragmentRegistry.lookup": 1000 /* defaultCacheSizes["fragmentRegistry.lookup"] */,
        "fragmentRegistry.findFragmentSpreads": 4000 /* defaultCacheSizes["fragmentRegistry.findFragmentSpreads"] */,
        "cache.fragmentQueryDocuments": 1000 /* defaultCacheSizes["cache.fragmentQueryDocuments"] */,
        "removeTypenameFromVariables.getVariableDefinitions": 2000 /* defaultCacheSizes["removeTypenameFromVariables.getVariableDefinitions"] */,
        "inMemoryCache.maybeBroadcastWatch": 5000 /* defaultCacheSizes["inMemoryCache.maybeBroadcastWatch"] */,
        "inMemoryCache.executeSelectionSet": 50000 /* defaultCacheSizes["inMemoryCache.executeSelectionSet"] */,
        "inMemoryCache.executeSubSelectedArray": 10000 /* defaultCacheSizes["inMemoryCache.executeSubSelectedArray"] */,
    };
    return Object.fromEntries(Object.entries(defaults).map(function (_a) {
        var k = _a[0], v = _a[1];
        return [
            k,
            _sizes_js__WEBPACK_IMPORTED_MODULE_0__.cacheSizes[k] || v,
        ];
    }));
}
function _getApolloClientMemoryInternals() {
    var _a, _b, _c, _d, _e;
    if (!(globalThis.__DEV__ !== false))
        throw new Error("only supported in development mode");
    return {
        limits: getCurrentCacheSizes(),
        sizes: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ print: (_a = globalCaches.print) === null || _a === void 0 ? void 0 : _a.call(globalCaches), parser: (_b = globalCaches.parser) === null || _b === void 0 ? void 0 : _b.call(globalCaches), canonicalStringify: (_c = globalCaches.canonicalStringify) === null || _c === void 0 ? void 0 : _c.call(globalCaches), links: linkInfo(this.link), queryManager: {
                getDocumentInfo: this["queryManager"]["transformCache"].size,
                documentTransforms: transformInfo(this["queryManager"].documentTransform),
            } }, (_e = (_d = this.cache).getMemoryInternals) === null || _e === void 0 ? void 0 : _e.call(_d)),
    };
}
function _getApolloCacheMemoryInternals() {
    return {
        cache: {
            fragmentQueryDocuments: getWrapperInformation(this["getFragmentDoc"]),
        },
    };
}
function _getInMemoryCacheMemoryInternals() {
    var fragments = this.config.fragments;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _getApolloCacheMemoryInternals.apply(this)), { addTypenameDocumentTransform: transformInfo(this["addTypenameTransform"]), inMemoryCache: {
            executeSelectionSet: getWrapperInformation(this["storeReader"]["executeSelectionSet"]),
            executeSubSelectedArray: getWrapperInformation(this["storeReader"]["executeSubSelectedArray"]),
            maybeBroadcastWatch: getWrapperInformation(this["maybeBroadcastWatch"]),
        }, fragmentRegistry: {
            findFragmentSpreads: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.findFragmentSpreads),
            lookup: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.lookup),
            transform: getWrapperInformation(fragments === null || fragments === void 0 ? void 0 : fragments.transform),
        } });
}
function isWrapper(f) {
    return !!f && "dirtyKey" in f;
}
function getWrapperInformation(f) {
    return isWrapper(f) ? f.size : undefined;
}
function isDefined(value) {
    return value != null;
}
function transformInfo(transform) {
    return recurseTransformInfo(transform).map(function (cache) { return ({ cache: cache }); });
}
function recurseTransformInfo(transform) {
    return transform ?
        (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([
            getWrapperInformation(transform === null || transform === void 0 ? void 0 : transform["performWork"])
        ], recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform["left"]), true), recurseTransformInfo(transform === null || transform === void 0 ? void 0 : transform["right"]), true).filter(isDefined)
        : [];
}
function linkInfo(link) {
    var _a;
    return link ?
        (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([
            (_a = link === null || link === void 0 ? void 0 : link.getMemoryInternals) === null || _a === void 0 ? void 0 : _a.call(link)
        ], linkInfo(link === null || link === void 0 ? void 0 : link.left), true), linkInfo(link === null || link === void 0 ? void 0 : link.right), true).filter(isDefined)
        : [];
}
//# sourceMappingURL=getMemoryInternals.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/sizes.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  cacheSizes: () => (cacheSizes)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");


var cacheSizeSymbol = Symbol.for("apollo.cacheSize");
/**
 *
 * The global cache size configuration for Apollo Client.
 *
 * @remarks
 *
 * You can directly modify this object, but any modification will
 * only have an effect on caches that are created after the modification.
 *
 * So for global caches, such as `parser`, `canonicalStringify` and `print`,
 * you might need to call `.reset` on them, which will essentially re-create them.
 *
 * Alternatively, you can set `globalThis[Symbol.for("apollo.cacheSize")]` before
 * you load the Apollo Client package:
 *
 * @example
 * ```ts
 * globalThis[Symbol.for("apollo.cacheSize")] = {
 *   parser: 100
 * } satisfies Partial<CacheSizes> // the `satisfies` is optional if using TypeScript
 * ```
 */
var cacheSizes = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.global[cacheSizeSymbol]);
//# sourceMappingURL=sizes.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/arrays.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isArray: () => (isArray),
  isNonEmptyArray: () => (isNonEmptyArray)
});
// A version of Array.isArray that works better with readonly arrays.
var isArray = Array.isArray;
function isNonEmptyArray(value) {
    return Array.isArray(value) && value.length > 0;
}
//# sourceMappingURL=arrays.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/canUse.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  canUseAsyncIteratorSymbol: () => (canUseAsyncIteratorSymbol),
  canUseDOM: () => (canUseDOM),
  canUseLayoutEffect: () => (canUseLayoutEffect),
  canUseSymbol: () => (canUseSymbol),
  canUseWeakMap: () => (canUseWeakMap),
  canUseWeakSet: () => (canUseWeakSet)
});
/* ESM import */var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");

var isReactNative = (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function () { return navigator.product; }) == "ReactNative";
var canUseWeakMap = typeof WeakMap === "function" &&
    !(isReactNative && !global.HermesInternal);
var canUseWeakSet = typeof WeakSet === "function";
var canUseSymbol = typeof Symbol === "function" && typeof Symbol.for === "function";
var canUseAsyncIteratorSymbol = canUseSymbol && Symbol.asyncIterator;
var canUseDOM = typeof (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function () { return window.document.createElement; }) === "function";
var usingJSDOM = 
// Following advice found in this comment from @domenic (maintainer of jsdom):
// https://github.com/jsdom/jsdom/issues/1537#issuecomment-229405327
//
// Since we control the version of Jest and jsdom used when running Apollo
// Client tests, and that version is recent enought to include " jsdom/x.y.z"
// at the end of the user agent string, I believe this case is all we need to
// check. Testing for "Node.js" was recommended for backwards compatibility
// with older version of jsdom, but we don't have that problem.
(0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function () { return navigator.userAgent.indexOf("jsdom") >= 0; }) || false;
// Our tests should all continue to pass if we remove this !usingJSDOM
// condition, thereby allowing useLayoutEffect when using jsdom. Unfortunately,
// if we allow useLayoutEffect, then useSyncExternalStore generates many
// warnings about useLayoutEffect doing nothing on the server. While these
// warnings are harmless, this !usingJSDOM condition seems to be the best way to
// prevent them (i.e. skipping useLayoutEffect when using jsdom).
var canUseLayoutEffect = (canUseDOM || isReactNative) && !usingJSDOM;
//# sourceMappingURL=canUse.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/canonicalStringify.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  canonicalStringify: () => (canonicalStringify)
});
/* ESM import */var _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/caches.js");
/* ESM import */var _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/sizes.js");
/* ESM import */var _caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/getMemoryInternals.js");


/**
 * Like JSON.stringify, but with object keys always sorted in the same order.
 *
 * To achieve performant sorting, this function uses a Map from JSON-serialized
 * arrays of keys (in any order) to sorted arrays of the same keys, with a
 * single sorted array reference shared by all permutations of the keys.
 *
 * As a drawback, this function will add a little bit more memory for every
 * object encountered that has different (more, less, a different order of) keys
 * than in the past.
 *
 * In a typical application, this extra memory usage should not play a
 * significant role, as `canonicalStringify` will be called for only a limited
 * number of object shapes, and the cache will not grow beyond a certain point.
 * But in some edge cases, this could be a problem, so we provide
 * canonicalStringify.reset() as a way of clearing the cache.
 * */
var canonicalStringify = Object.assign(function canonicalStringify(value) {
    return JSON.stringify(value, stableObjectReplacer);
}, {
    reset: function () {
        // Clearing the sortingMap will reclaim all cached memory, without
        // affecting the logical results of canonicalStringify, but potentially
        // sacrificing performance until the cache is refilled.
        sortingMap = new _utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_0__.AutoCleanedStrongCache(_utilities_caching_index_js__WEBPACK_IMPORTED_MODULE_1__.cacheSizes.canonicalStringify || 1000 /* defaultCacheSizes.canonicalStringify */);
    },
});
if (globalThis.__DEV__ !== false) {
    (0,_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_2__.registerGlobalCache)("canonicalStringify", function () { return sortingMap.size; });
}
// Values are JSON-serialized arrays of object keys (in any order), and values
// are sorted arrays of the same keys.
var sortingMap;
canonicalStringify.reset();
// The JSON.stringify function takes an optional second argument called a
// replacer function. This function is called for each key-value pair in the
// object being stringified, and its return value is used instead of the
// original value. If the replacer function returns a new value, that value is
// stringified as JSON instead of the original value of the property.
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#the_replacer_parameter
function stableObjectReplacer(key, value) {
    if (value && typeof value === "object") {
        var proto = Object.getPrototypeOf(value);
        // We don't want to mess with objects that are not "plain" objects, which
        // means their prototype is either Object.prototype or null. This check also
        // prevents needlessly rearranging the indices of arrays.
        if (proto === Object.prototype || proto === null) {
            var keys = Object.keys(value);
            // If keys is already sorted, let JSON.stringify serialize the original
            // value instead of creating a new object with keys in the same order.
            if (keys.every(everyKeyInOrder))
                return value;
            var unsortedKey = JSON.stringify(keys);
            var sortedKeys = sortingMap.get(unsortedKey);
            if (!sortedKeys) {
                keys.sort();
                var sortedKey = JSON.stringify(keys);
                // Checking for sortedKey in the sortingMap allows us to share the same
                // sorted array reference for all permutations of the same set of keys.
                sortedKeys = sortingMap.get(sortedKey) || keys;
                sortingMap.set(unsortedKey, sortedKeys);
                sortingMap.set(sortedKey, sortedKeys);
            }
            var sortedObject_1 = Object.create(proto);
            // Reassigning the keys in sorted order will cause JSON.stringify to
            // serialize them in sorted order.
            sortedKeys.forEach(function (key) {
                sortedObject_1[key] = value[key];
            });
            return sortedObject_1;
        }
    }
    return value;
}
// Since everything that happens in stableObjectReplacer benefits from being as
// efficient as possible, we use a static function as the callback for
// keys.every in order to test if the provided keys are already sorted without
// allocating extra memory for a callback.
function everyKeyInOrder(key, i, keys) {
    return i === 0 || keys[i - 1] <= key;
}
//# sourceMappingURL=canonicalStringify.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/cloneDeep.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  cloneDeep: () => (cloneDeep)
});
var toString = Object.prototype.toString;
/**
 * Deeply clones a value to create a new instance.
 */
function cloneDeep(value) {
    return cloneDeepHelper(value);
}
function cloneDeepHelper(val, seen) {
    switch (toString.call(val)) {
        case "[object Array]": {
            seen = seen || new Map();
            if (seen.has(val))
                return seen.get(val);
            var copy_1 = val.slice(0);
            seen.set(val, copy_1);
            copy_1.forEach(function (child, i) {
                copy_1[i] = cloneDeepHelper(child, seen);
            });
            return copy_1;
        }
        case "[object Object]": {
            seen = seen || new Map();
            if (seen.has(val))
                return seen.get(val);
            // High fidelity polyfills of Object.create and Object.getPrototypeOf are
            // possible in all JS environments, so we will assume they exist/work.
            var copy_2 = Object.create(Object.getPrototypeOf(val));
            seen.set(val, copy_2);
            Object.keys(val).forEach(function (key) {
                copy_2[key] = cloneDeepHelper(val[key], seen);
            });
            return copy_2;
        }
        default:
            return val;
    }
}
//# sourceMappingURL=cloneDeep.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/compact.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  compact: () => (compact)
});
/**
 * Merges the provided objects shallowly and removes
 * all properties with an `undefined` value
 */
function compact() {
    var objects = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
    }
    var result = Object.create(null);
    objects.forEach(function (obj) {
        if (!obj)
            return;
        Object.keys(obj).forEach(function (key) {
            var value = obj[key];
            if (value !== void 0) {
                result[key] = value;
            }
        });
    });
    return result;
}
//# sourceMappingURL=compact.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/makeUniqueId.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  makeUniqueId: () => (makeUniqueId)
});
var prefixCounts = new Map();
// These IDs won't be globally unique, but they will be unique within this
// process, thanks to the counter, and unguessable thanks to the random suffix.
function makeUniqueId(prefix) {
    var count = prefixCounts.get(prefix) || 1;
    prefixCounts.set(prefix, count + 1);
    return "".concat(prefix, ":").concat(count, ":").concat(Math.random().toString(36).slice(2));
}
//# sourceMappingURL=makeUniqueId.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  deepFreeze: () => (deepFreeze),
  maybeDeepFreeze: () => (maybeDeepFreeze)
});
/* ESM import */var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/objects.js");

function deepFreeze(value) {
    var workSet = new Set([value]);
    workSet.forEach(function (obj) {
        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj) && shallowFreeze(obj) === obj) {
            Object.getOwnPropertyNames(obj).forEach(function (name) {
                if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(obj[name]))
                    workSet.add(obj[name]);
            });
        }
    });
    return value;
}
function shallowFreeze(obj) {
    if (globalThis.__DEV__ !== false && !Object.isFrozen(obj)) {
        try {
            Object.freeze(obj);
        }
        catch (e) {
            // Some types like Uint8Array and Node.js's Buffer cannot be frozen, but
            // they all throw a TypeError when you try, so we re-throw any exceptions
            // that are not TypeErrors, since that would be unexpected.
            if (e instanceof TypeError)
                return null;
            throw e;
        }
    }
    return obj;
}
function maybeDeepFreeze(obj) {
    if (globalThis.__DEV__ !== false) {
        deepFreeze(obj);
    }
    return obj;
}
//# sourceMappingURL=maybeDeepFreeze.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/mergeDeep.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DeepMerger: () => (DeepMerger),
  mergeDeep: () => (mergeDeep),
  mergeDeepArray: () => (mergeDeepArray)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var _objects_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/objects.js");


var hasOwnProperty = Object.prototype.hasOwnProperty;
function mergeDeep() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        sources[_i] = arguments[_i];
    }
    return mergeDeepArray(sources);
}
// In almost any situation where you could succeed in getting the
// TypeScript compiler to infer a tuple type for the sources array, you
// could just use mergeDeep instead of mergeDeepArray, so instead of
// trying to convert T[] to an intersection type we just infer the array
// element type, which works perfectly when the sources array has a
// consistent element type.
function mergeDeepArray(sources) {
    var target = sources[0] || {};
    var count = sources.length;
    if (count > 1) {
        var merger = new DeepMerger();
        for (var i = 1; i < count; ++i) {
            target = merger.merge(target, sources[i]);
        }
    }
    return target;
}
var defaultReconciler = function (target, source, property) {
    return this.merge(target[property], source[property]);
};
var DeepMerger = /** @class */ (function () {
    function DeepMerger(reconciler) {
        if (reconciler === void 0) { reconciler = defaultReconciler; }
        this.reconciler = reconciler;
        this.isObject = _objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject;
        this.pastCopies = new Set();
    }
    DeepMerger.prototype.merge = function (target, source) {
        var _this = this;
        var context = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            context[_i - 2] = arguments[_i];
        }
        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(source) && (0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(target)) {
            Object.keys(source).forEach(function (sourceKey) {
                if (hasOwnProperty.call(target, sourceKey)) {
                    var targetValue = target[sourceKey];
                    if (source[sourceKey] !== targetValue) {
                        var result = _this.reconciler.apply(_this, (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([target,
                            source,
                            sourceKey], context, false));
                        // A well-implemented reconciler may return targetValue to indicate
                        // the merge changed nothing about the structure of the target.
                        if (result !== targetValue) {
                            target = _this.shallowCopyForMerge(target);
                            target[sourceKey] = result;
                        }
                    }
                }
                else {
                    // If there is no collision, the target can safely share memory with
                    // the source, and the recursion can terminate here.
                    target = _this.shallowCopyForMerge(target);
                    target[sourceKey] = source[sourceKey];
                }
            });
            return target;
        }
        // If source (or target) is not an object, let source replace target.
        return source;
    };
    DeepMerger.prototype.shallowCopyForMerge = function (value) {
        if ((0,_objects_js__WEBPACK_IMPORTED_MODULE_0__.isNonNullObject)(value)) {
            if (!this.pastCopies.has(value)) {
                if (Array.isArray(value)) {
                    value = value.slice(0);
                }
                else {
                    value = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({ __proto__: Object.getPrototypeOf(value) }, value);
                }
                this.pastCopies.add(value);
            }
        }
        return value;
    };
    return DeepMerger;
}());

//# sourceMappingURL=mergeDeep.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/objects.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isNonNullObject: () => (isNonNullObject),
  isPlainObject: () => (isPlainObject)
});
function isNonNullObject(obj) {
    return obj !== null && typeof obj === "object";
}
function isPlainObject(obj) {
    return (obj !== null &&
        typeof obj === "object" &&
        (Object.getPrototypeOf(obj) === Object.prototype ||
            Object.getPrototypeOf(obj) === null));
}
//# sourceMappingURL=objects.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/stringifyForDisplay.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  stringifyForDisplay: () => (stringifyForDisplay)
});
/* ESM import */var _makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/makeUniqueId.js");

function stringifyForDisplay(value, space) {
    if (space === void 0) { space = 0; }
    var undefId = (0,_makeUniqueId_js__WEBPACK_IMPORTED_MODULE_0__.makeUniqueId)("stringifyForDisplay");
    return JSON.stringify(value, function (key, value) {
        return value === void 0 ? undefId : value;
    }, space)
        .split(JSON.stringify(undefId))
        .join("<undefined>");
}
//# sourceMappingURL=stringifyForDisplay.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/deprecation/index.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  muteDeprecations: () => (muteDeprecations),
  warnDeprecated: () => (warnDeprecated),
  warnRemovedOption: () => (warnRemovedOption),
  withDisabledDeprecations: () => (withDisabledDeprecations)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var optimism__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js");
/* ESM import */var _globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");



var muteAllDeprecations = Symbol.for("apollo.deprecations");
var global = _globals_index_js__WEBPACK_IMPORTED_MODULE_1__.global;
var slot = new optimism__WEBPACK_IMPORTED_MODULE_0__.Slot();
function isMuted(name) {
    return global[muteAllDeprecations] || (slot.getValue() || []).includes(name);
}
function muteDeprecations(name) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return slot.withValue.apply(slot, (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__spreadArray)([Array.isArray(name) ? name : [name]], args, false));
}
function warnRemovedOption(options, name, callSite, recommendation) {
    if (recommendation === void 0) { recommendation = "Please remove this option."; }
    warnDeprecated(name, function () {
        if (name in options) {
            globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant.warn(104, callSite, name, recommendation);
        }
    });
}
function warnDeprecated(name, cb) {
    if (!isMuted(name)) {
        cb();
    }
}
function withDisabledDeprecations() {
    var _a;
    var prev = global[muteAllDeprecations];
    global[muteAllDeprecations] = true;
    return _a = {},
        _a[Symbol.dispose] = function () {
            global[muteAllDeprecations] = prev;
        },
        _a;
}
//# sourceMappingURL=index.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/global.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": () => (__WEBPACK_DEFAULT_EXPORT__)
});
/* ESM import */var _maybe_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/maybe.js");

/* ESM default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function () { return globalThis; }) ||
    (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function () { return window; }) ||
    (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function () { return self; }) ||
    (0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function () { return global; }) || // We don't expect the Function constructor ever to be invoked at runtime, as
// long as at least one of globalThis, window, self, or global is defined, so
// we are under no obligation to make it easy for static analysis tools to
// detect syntactic usage of the Function constructor. If you think you can
// improve your static analysis to detect this obfuscation, think again. This
// is an arms race you cannot win, at least not in JavaScript.
(0,_maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe)(function () {
    return _maybe_js__WEBPACK_IMPORTED_MODULE_0__.maybe.constructor("return this")();
}));
//# sourceMappingURL=global.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DEV: () => (DEV),
  InvariantError: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.InvariantError),
  __DEV__: () => (DEV),
  global: () => (/* reexport safe */ _global_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
  invariant: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.invariant),
  maybe: () => (/* reexport safe */ _maybe_js__WEBPACK_IMPORTED_MODULE_1__.maybe),
  newInvariantError: () => (/* reexport safe */ _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)
});
/* ESM import */var _invariantWrappers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/invariantWrappers.js");
/* ESM import */var _maybe_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/maybe.js");
/* ESM import */var _global_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/global.js");




/**
 * @deprecated we do not use this internally anymore,
 * it is just exported for backwards compatibility
 */
// this file is extempt from automatic `__DEV__` replacement
// so we have to write it out here
// @ts-ignore
var DEV = globalThis.__DEV__ !== false;

//# sourceMappingURL=index.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/invariantWrappers.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  ApolloErrorMessageHandler: () => (ApolloErrorMessageHandler),
  InvariantError: () => (/* reexport safe */ ts_invariant__WEBPACK_IMPORTED_MODULE_0__.InvariantError),
  invariant: () => (invariant),
  newInvariantError: () => (newInvariantError)
});
/* ESM import */var ts_invariant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/ts-invariant@0.10.3/node_modules/ts-invariant/lib/invariant.js");
/* ESM import */var _version_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/version.js");
/* ESM import */var _global_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/global.js");
/* ESM import */var _common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/stringifyForDisplay.js");




function wrap(fn) {
    return function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (typeof message === "number") {
            var arg0 = message;
            message = getHandledErrorMsg(arg0);
            if (!message) {
                message = getFallbackErrorMsg(arg0, args);
                args = [];
            }
        }
        fn.apply(void 0, [message].concat(args));
    };
}
var invariant = Object.assign(function invariant(condition, message) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    if (!condition) {
        (0,ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant)(condition, getHandledErrorMsg(message, args) || getFallbackErrorMsg(message, args));
    }
}, {
    debug: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.debug),
    log: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.log),
    warn: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.warn),
    error: wrap(ts_invariant__WEBPACK_IMPORTED_MODULE_0__.invariant.error),
});
/**
 * Returns an InvariantError.
 *
 * `message` can only be a string, a concatenation of strings, or a ternary statement
 * that results in a string. This will be enforced on build, where the message will
 * be replaced with a message number.
 * String substitutions with %s are supported and will also return
 * pretty-stringified objects.
 * Excess `optionalParams` will be swallowed.
 */
function newInvariantError(message) {
    var optionalParams = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        optionalParams[_i - 1] = arguments[_i];
    }
    return new ts_invariant__WEBPACK_IMPORTED_MODULE_0__.InvariantError(getHandledErrorMsg(message, optionalParams) ||
        getFallbackErrorMsg(message, optionalParams));
}
var ApolloErrorMessageHandler = Symbol.for("ApolloErrorMessageHandler_" + _version_js__WEBPACK_IMPORTED_MODULE_2__.version);
function stringify(arg) {
    if (typeof arg == "string") {
        return arg;
    }
    try {
        return (0,_common_stringifyForDisplay_js__WEBPACK_IMPORTED_MODULE_3__.stringifyForDisplay)(arg, 2).slice(0, 1000);
    }
    catch (_a) {
        return "<non-serializable>";
    }
}
function getHandledErrorMsg(message, messageArgs) {
    if (messageArgs === void 0) { messageArgs = []; }
    if (!message)
        return;
    return (_global_js__WEBPACK_IMPORTED_MODULE_1__["default"][ApolloErrorMessageHandler] &&
        _global_js__WEBPACK_IMPORTED_MODULE_1__["default"][ApolloErrorMessageHandler](message, messageArgs.map(stringify)));
}
function getFallbackErrorMsg(message, messageArgs) {
    if (messageArgs === void 0) { messageArgs = []; }
    if (!message)
        return;
    return "An error occurred! For more details, see the full error text at https://go.apollo.dev/c/err#".concat(encodeURIComponent(JSON.stringify({
        version: _version_js__WEBPACK_IMPORTED_MODULE_2__.version,
        message: message,
        args: messageArgs.map(stringify),
    })));
}

//# sourceMappingURL=invariantWrappers.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/maybe.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  maybe: () => (maybe)
});
function maybe(thunk) {
    try {
        return thunk();
    }
    catch (_a) { }
}
//# sourceMappingURL=maybe.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/DocumentTransform.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DocumentTransform: () => (DocumentTransform)
});
/* ESM import */var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@wry+trie@0.5.0/node_modules/@wry/trie/lib/index.js");
/* ESM import */var _common_canUse_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/canUse.js");
/* ESM import */var _getFromAST_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/getFromAST.js");
/* ESM import */var _globals_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var _wry_caches__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/@wry+caches@1.0.1/node_modules/@wry/caches/lib/weak.js");
/* ESM import */var optimism__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js");
/* ESM import */var _caching_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/sizes.js");







function identity(document) {
    return document;
}
var DocumentTransform = /** @class */ (function () {
    function DocumentTransform(transform, options) {
        if (options === void 0) { options = Object.create(null); }
        this.resultCache = _common_canUse_js__WEBPACK_IMPORTED_MODULE_3__.canUseWeakSet ? new WeakSet() : new Set();
        this.transform = transform;
        if (options.getCacheKey) {
            // Override default `getCacheKey` function, which returns [document].
            this.getCacheKey = options.getCacheKey;
        }
        this.cached = options.cache !== false;
        this.resetCache();
    }
    // This default implementation of getCacheKey can be overridden by providing
    // options.getCacheKey to the DocumentTransform constructor. In general, a
    // getCacheKey function may either return an array of keys (often including
    // the document) to be used as a cache key, or undefined to indicate the
    // transform for this document should not be cached.
    DocumentTransform.prototype.getCacheKey = function (document) {
        return [document];
    };
    DocumentTransform.identity = function () {
        // No need to cache this transform since it just returns the document
        // unchanged. This should save a bit of memory that would otherwise be
        // needed to populate the `documentCache` of this transform.
        return new DocumentTransform(identity, { cache: false });
    };
    DocumentTransform.split = function (predicate, left, right) {
        if (right === void 0) { right = DocumentTransform.identity(); }
        return Object.assign(new DocumentTransform(function (document) {
            var documentTransform = predicate(document) ? left : right;
            return documentTransform.transformDocument(document);
        }, 
        // Reasonably assume both `left` and `right` transforms handle their own caching
        { cache: false }), { left: left, right: right });
    };
    /**
     * Resets the internal cache of this transform, if it has one.
     */
    DocumentTransform.prototype.resetCache = function () {
        var _this = this;
        if (this.cached) {
            var stableCacheKeys_1 = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(_common_canUse_js__WEBPACK_IMPORTED_MODULE_3__.canUseWeakMap);
            this.performWork = (0,optimism__WEBPACK_IMPORTED_MODULE_2__.wrap)(DocumentTransform.prototype.performWork.bind(this), {
                makeCacheKey: function (document) {
                    var cacheKeys = _this.getCacheKey(document);
                    if (cacheKeys) {
                        (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_1__.invariant)(Array.isArray(cacheKeys), 105);
                        return stableCacheKeys_1.lookupArray(cacheKeys);
                    }
                },
                max: _caching_index_js__WEBPACK_IMPORTED_MODULE_4__.cacheSizes["documentTransform.cache"],
                cache: (_wry_caches__WEBPACK_IMPORTED_MODULE_5__.WeakCache),
            });
        }
    };
    DocumentTransform.prototype.performWork = function (document) {
        (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_6__.checkDocument)(document);
        return this.transform(document);
    };
    DocumentTransform.prototype.transformDocument = function (document) {
        // If a user passes an already transformed result back to this function,
        // immediately return it.
        if (this.resultCache.has(document)) {
            return document;
        }
        var transformedDocument = this.performWork(document);
        this.resultCache.add(transformedDocument);
        return transformedDocument;
    };
    DocumentTransform.prototype.concat = function (otherTransform) {
        var _this = this;
        return Object.assign(new DocumentTransform(function (document) {
            return otherTransform.transformDocument(_this.transformDocument(document));
        }, 
        // Reasonably assume both transforms handle their own caching
        { cache: false }), {
            left: this,
            right: otherTransform,
        });
    };
    return DocumentTransform;
}());

//# sourceMappingURL=DocumentTransform.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/directives.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getDirectiveNames: () => (getDirectiveNames),
  getFragmentMaskMode: () => (getFragmentMaskMode),
  getInclusionDirectives: () => (getInclusionDirectives),
  hasAllDirectives: () => (hasAllDirectives),
  hasAnyDirectives: () => (hasAnyDirectives),
  hasClientExports: () => (hasClientExports),
  hasDirectives: () => (hasDirectives),
  shouldInclude: () => (shouldInclude)
});
/* ESM import */var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs");
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs");


function shouldInclude(_a, variables) {
    var directives = _a.directives;
    if (!directives || !directives.length) {
        return true;
    }
    return getInclusionDirectives(directives).every(function (_a) {
        var directive = _a.directive, ifArgument = _a.ifArgument;
        var evaledValue = false;
        if (ifArgument.value.kind === "Variable") {
            evaledValue =
                variables && variables[ifArgument.value.name.value];
            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(evaledValue !== void 0, 106, directive.name.value);
        }
        else {
            evaledValue = ifArgument.value.value;
        }
        return directive.name.value === "skip" ? !evaledValue : evaledValue;
    });
}
function getDirectiveNames(root) {
    var names = [];
    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(root, {
        Directive: function (node) {
            names.push(node.name.value);
        },
    });
    return names;
}
var hasAnyDirectives = function (names, root) {
    return hasDirectives(names, root, false);
};
var hasAllDirectives = function (names, root) {
    return hasDirectives(names, root, true);
};
function hasDirectives(names, root, all) {
    var nameSet = new Set(names);
    var uniqueCount = nameSet.size;
    (0,graphql__WEBPACK_IMPORTED_MODULE_1__.visit)(root, {
        Directive: function (node) {
            if (nameSet.delete(node.name.value) && (!all || !nameSet.size)) {
                return graphql__WEBPACK_IMPORTED_MODULE_1__.BREAK;
            }
        },
    });
    // If we found all the names, nameSet will be empty. If we only care about
    // finding some of them, the < condition is sufficient.
    return all ? !nameSet.size : nameSet.size < uniqueCount;
}
function hasClientExports(document) {
    return document && hasDirectives(["client", "export"], document, true);
}
function isInclusionDirective(_a) {
    var value = _a.name.value;
    return value === "skip" || value === "include";
}
function getInclusionDirectives(directives) {
    var result = [];
    if (directives && directives.length) {
        directives.forEach(function (directive) {
            if (!isInclusionDirective(directive))
                return;
            var directiveArguments = directive.arguments;
            var directiveName = directive.name.value;
            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(directiveArguments && directiveArguments.length === 1, 107, directiveName);
            var ifArgument = directiveArguments[0];
            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifArgument.name && ifArgument.name.value === "if", 108, directiveName);
            var ifValue = ifArgument.value;
            // means it has to be a variable value if this is a valid @skip or @include directive
            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(ifValue &&
                (ifValue.kind === "Variable" || ifValue.kind === "BooleanValue"), 109, directiveName);
            result.push({ directive: directive, ifArgument: ifArgument });
        });
    }
    return result;
}
/** @internal */
function getFragmentMaskMode(fragment) {
    var _a, _b;
    var directive = (_a = fragment.directives) === null || _a === void 0 ? void 0 : _a.find(function (_a) {
        var name = _a.name;
        return name.value === "unmask";
    });
    if (!directive) {
        return "mask";
    }
    var modeArg = (_b = directive.arguments) === null || _b === void 0 ? void 0 : _b.find(function (_a) {
        var name = _a.name;
        return name.value === "mode";
    });
    if (globalThis.__DEV__ !== false) {
        if (modeArg) {
            if (modeArg.value.kind === graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.VARIABLE) {
                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(110);
            }
            else if (modeArg.value.kind !== graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.STRING) {
                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(111);
            }
            else if (modeArg.value.value !== "migrate") {
                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(112, modeArg.value.value);
            }
        }
    }
    if (modeArg &&
        "value" in modeArg.value &&
        modeArg.value.value === "migrate") {
        return "migrate";
    }
    return "unmask";
}
//# sourceMappingURL=directives.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/fragments.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  createFragmentMap: () => (createFragmentMap),
  getFragmentFromSelection: () => (getFragmentFromSelection),
  getFragmentQueryDocument: () => (getFragmentQueryDocument),
  isFullyUnmaskedOperation: () => (isFullyUnmaskedOperation)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs");



/**
 * Returns a query document which adds a single query operation that only
 * spreads the target fragment inside of it.
 *
 * So for example a document of:
 *
 * ```graphql
 * fragment foo on Foo { a b c }
 * ```
 *
 * Turns into:
 *
 * ```graphql
 * { ...foo }
 *
 * fragment foo on Foo { a b c }
 * ```
 *
 * The target fragment will either be the only fragment in the document, or a
 * fragment specified by the provided `fragmentName`. If there is more than one
 * fragment, but a `fragmentName` was not defined then an error will be thrown.
 */
function getFragmentQueryDocument(document, fragmentName) {
    var actualFragmentName = fragmentName;
    // Build an array of all our fragment definitions that will be used for
    // validations. We also do some validations on the other definitions in the
    // document while building this list.
    var fragments = [];
    document.definitions.forEach(function (definition) {
        // Throw an error if we encounter an operation definition because we will
        // define our own operation definition later on.
        if (definition.kind === "OperationDefinition") {
            throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(
                113,
                definition.operation,
                definition.name ? " named '".concat(definition.name.value, "'") : ""
            );
        }
        // Add our definition to the fragments array if it is a fragment
        // definition.
        if (definition.kind === "FragmentDefinition") {
            fragments.push(definition);
        }
    });
    // If the user did not give us a fragment name then let us try to get a
    // name from a single fragment in the definition.
    if (typeof actualFragmentName === "undefined") {
        (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragments.length === 1, 114, fragments.length);
        actualFragmentName = fragments[0].name.value;
    }
    // Generate a query document with an operation that simply spreads the
    // fragment inside of it.
    var query = (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, document), { definitions: (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__spreadArray)([
            {
                kind: "OperationDefinition",
                // OperationTypeNode is an enum
                operation: "query",
                selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                        {
                            kind: "FragmentSpread",
                            name: {
                                kind: "Name",
                                value: actualFragmentName,
                            },
                        },
                    ],
                },
            }
        ], document.definitions, true) });
    return query;
}
// Utility function that takes a list of fragment definitions and makes a hash out of them
// that maps the name of the fragment to the fragment definition.
function createFragmentMap(fragments) {
    if (fragments === void 0) { fragments = []; }
    var symTable = {};
    fragments.forEach(function (fragment) {
        symTable[fragment.name.value] = fragment;
    });
    return symTable;
}
function getFragmentFromSelection(selection, fragmentMap) {
    switch (selection.kind) {
        case "InlineFragment":
            return selection;
        case "FragmentSpread": {
            var fragmentName = selection.name.value;
            if (typeof fragmentMap === "function") {
                return fragmentMap(fragmentName);
            }
            var fragment = fragmentMap && fragmentMap[fragmentName];
            (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragment, 115, fragmentName);
            return fragment || null;
        }
        default:
            return null;
    }
}
function isFullyUnmaskedOperation(document) {
    var isUnmasked = true;
    (0,graphql__WEBPACK_IMPORTED_MODULE_2__.visit)(document, {
        FragmentSpread: function (node) {
            isUnmasked =
                !!node.directives &&
                    node.directives.some(function (directive) { return directive.name.value === "unmask"; });
            if (!isUnmasked) {
                return graphql__WEBPACK_IMPORTED_MODULE_2__.BREAK;
            }
        },
    });
    return isUnmasked;
}
//# sourceMappingURL=fragments.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/getFromAST.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  checkDocument: () => (checkDocument),
  getDefaultValues: () => (getDefaultValues),
  getFragmentDefinition: () => (getFragmentDefinition),
  getFragmentDefinitions: () => (getFragmentDefinitions),
  getMainDefinition: () => (getMainDefinition),
  getOperationDefinition: () => (getOperationDefinition),
  getOperationName: () => (getOperationName),
  getQueryDefinition: () => (getQueryDefinition)
});
/* ESM import */var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var _storeUtils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/storeUtils.js");


// Checks the document for errors and throws an exception if there is an error.
function checkDocument(doc) {
    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc && doc.kind === "Document", 116);
    var operations = doc.definitions
        .filter(function (d) { return d.kind !== "FragmentDefinition"; })
        .map(function (definition) {
        if (definition.kind !== "OperationDefinition") {
            throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(117, definition.kind);
        }
        return definition;
    });
    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(operations.length <= 1, 118, operations.length);
    return doc;
}
function getOperationDefinition(doc) {
    checkDocument(doc);
    return doc.definitions.filter(function (definition) {
        return definition.kind === "OperationDefinition";
    })[0];
}
function getOperationName(doc) {
    return (doc.definitions
        .filter(function (definition) {
        return definition.kind === "OperationDefinition" && !!definition.name;
    })
        .map(function (x) { return x.name.value; })[0] || null);
}
// Returns the FragmentDefinitions from a particular document as an array
function getFragmentDefinitions(doc) {
    return doc.definitions.filter(function (definition) {
        return definition.kind === "FragmentDefinition";
    });
}
function getQueryDefinition(doc) {
    var queryDef = getOperationDefinition(doc);
    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(queryDef && queryDef.operation === "query", 119);
    return queryDef;
}
function getFragmentDefinition(doc) {
    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.kind === "Document", 120);
    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(doc.definitions.length <= 1, 121);
    var fragmentDef = doc.definitions[0];
    (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant)(fragmentDef.kind === "FragmentDefinition", 122);
    return fragmentDef;
}
/**
 * Returns the first operation definition found in this document.
 * If no operation definition is found, the first fragment definition will be returned.
 * If no definitions are found, an error will be thrown.
 */
function getMainDefinition(queryDoc) {
    checkDocument(queryDoc);
    var fragmentDefinition;
    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {
        var definition = _a[_i];
        if (definition.kind === "OperationDefinition") {
            var operation = definition.operation;
            if (operation === "query" ||
                operation === "mutation" ||
                operation === "subscription") {
                return definition;
            }
        }
        if (definition.kind === "FragmentDefinition" && !fragmentDefinition) {
            // we do this because we want to allow multiple fragment definitions
            // to precede an operation definition.
            fragmentDefinition = definition;
        }
    }
    if (fragmentDefinition) {
        return fragmentDefinition;
    }
    throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(123);
}
function getDefaultValues(definition) {
    var defaultValues = Object.create(null);
    var defs = definition && definition.variableDefinitions;
    if (defs && defs.length) {
        defs.forEach(function (def) {
            if (def.defaultValue) {
                (0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_1__.valueToObjectRepresentation)(defaultValues, def.variable.name, def.defaultValue);
            }
        });
    }
    return defaultValues;
}
//# sourceMappingURL=getFromAST.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/print.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  print: () => (print)
});
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printer.mjs");
/* ESM import */var _caching_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/caches.js");
/* ESM import */var _caching_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/sizes.js");
/* ESM import */var _caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/caching/getMemoryInternals.js");



var printCache;
var print = Object.assign(function (ast) {
    var result = printCache.get(ast);
    if (!result) {
        result = (0,graphql__WEBPACK_IMPORTED_MODULE_0__.print)(ast);
        printCache.set(ast, result);
    }
    return result;
}, {
    reset: function () {
        printCache = new _caching_index_js__WEBPACK_IMPORTED_MODULE_1__.AutoCleanedWeakCache(_caching_index_js__WEBPACK_IMPORTED_MODULE_2__.cacheSizes.print || 2000 /* defaultCacheSizes.print */);
    },
});
print.reset();
if (globalThis.__DEV__ !== false) {
    (0,_caching_getMemoryInternals_js__WEBPACK_IMPORTED_MODULE_3__.registerGlobalCache)("print", function () { return (printCache ? printCache.size : 0); });
}
//# sourceMappingURL=print.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/storeUtils.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  argumentsObjectFromField: () => (argumentsObjectFromField),
  getStoreKeyName: () => (getStoreKeyName),
  getTypenameFromResult: () => (getTypenameFromResult),
  isDocumentNode: () => (isDocumentNode),
  isField: () => (isField),
  isInlineFragment: () => (isInlineFragment),
  isReference: () => (isReference),
  makeReference: () => (makeReference),
  resultKeyNameFromField: () => (resultKeyNameFromField),
  storeKeyNameFromField: () => (storeKeyNameFromField),
  valueToObjectRepresentation: () => (valueToObjectRepresentation)
});
/* ESM import */var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var _common_objects_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/objects.js");
/* ESM import */var _fragments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/fragments.js");
/* ESM import */var _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/canonicalStringify.js");




function makeReference(id) {
    return { __ref: String(id) };
}
function isReference(obj) {
    return Boolean(obj && typeof obj === "object" && typeof obj.__ref === "string");
}
function isDocumentNode(value) {
    return ((0,_common_objects_js__WEBPACK_IMPORTED_MODULE_1__.isNonNullObject)(value) &&
        value.kind === "Document" &&
        Array.isArray(value.definitions));
}
function isStringValue(value) {
    return value.kind === "StringValue";
}
function isBooleanValue(value) {
    return value.kind === "BooleanValue";
}
function isIntValue(value) {
    return value.kind === "IntValue";
}
function isFloatValue(value) {
    return value.kind === "FloatValue";
}
function isVariable(value) {
    return value.kind === "Variable";
}
function isObjectValue(value) {
    return value.kind === "ObjectValue";
}
function isListValue(value) {
    return value.kind === "ListValue";
}
function isEnumValue(value) {
    return value.kind === "EnumValue";
}
function isNullValue(value) {
    return value.kind === "NullValue";
}
function valueToObjectRepresentation(argObj, name, value, variables) {
    if (isIntValue(value) || isFloatValue(value)) {
        argObj[name.value] = Number(value.value);
    }
    else if (isBooleanValue(value) || isStringValue(value)) {
        argObj[name.value] = value.value;
    }
    else if (isObjectValue(value)) {
        var nestedArgObj_1 = {};
        value.fields.map(function (obj) {
            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);
        });
        argObj[name.value] = nestedArgObj_1;
    }
    else if (isVariable(value)) {
        var variableValue = (variables || {})[value.name.value];
        argObj[name.value] = variableValue;
    }
    else if (isListValue(value)) {
        argObj[name.value] = value.values.map(function (listValue) {
            var nestedArgArrayObj = {};
            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);
            return nestedArgArrayObj[name.value];
        });
    }
    else if (isEnumValue(value)) {
        argObj[name.value] = value.value;
    }
    else if (isNullValue(value)) {
        argObj[name.value] = null;
    }
    else {
        throw (0,_globals_index_js__WEBPACK_IMPORTED_MODULE_0__.newInvariantError)(124, name.value, value.kind);
    }
}
function storeKeyNameFromField(field, variables) {
    var directivesObj = null;
    if (field.directives) {
        directivesObj = {};
        field.directives.forEach(function (directive) {
            directivesObj[directive.name.value] = {};
            if (directive.arguments) {
                directive.arguments.forEach(function (_a) {
                    var name = _a.name, value = _a.value;
                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);
                });
            }
        });
    }
    var argObj = null;
    if (field.arguments && field.arguments.length) {
        argObj = {};
        field.arguments.forEach(function (_a) {
            var name = _a.name, value = _a.value;
            return valueToObjectRepresentation(argObj, name, value, variables);
        });
    }
    return getStoreKeyName(field.name.value, argObj, directivesObj);
}
var KNOWN_DIRECTIVES = [
    "connection",
    "include",
    "skip",
    "client",
    "rest",
    "export",
    "nonreactive",
];
// Default stable JSON.stringify implementation used by getStoreKeyName. Can be
// updated/replaced with something better by calling
// getStoreKeyName.setStringify(newStringifyFunction).
var storeKeyNameStringify = _common_canonicalStringify_js__WEBPACK_IMPORTED_MODULE_2__.canonicalStringify;
var getStoreKeyName = Object.assign(function (fieldName, args, directives) {
    if (args &&
        directives &&
        directives["connection"] &&
        directives["connection"]["key"]) {
        if (directives["connection"]["filter"] &&
            directives["connection"]["filter"].length > 0) {
            var filterKeys = directives["connection"]["filter"] ?
                directives["connection"]["filter"]
                : [];
            filterKeys.sort();
            var filteredArgs_1 = {};
            filterKeys.forEach(function (key) {
                filteredArgs_1[key] = args[key];
            });
            return "".concat(directives["connection"]["key"], "(").concat(storeKeyNameStringify(filteredArgs_1), ")");
        }
        else {
            return directives["connection"]["key"];
        }
    }
    var completeFieldName = fieldName;
    if (args) {
        // We can't use `JSON.stringify` here since it's non-deterministic,
        // and can lead to different store key names being created even though
        // the `args` object used during creation has the same properties/values.
        var stringifiedArgs = storeKeyNameStringify(args);
        completeFieldName += "(".concat(stringifiedArgs, ")");
    }
    if (directives) {
        Object.keys(directives).forEach(function (key) {
            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)
                return;
            if (directives[key] && Object.keys(directives[key]).length) {
                completeFieldName += "@".concat(key, "(").concat(storeKeyNameStringify(directives[key]), ")");
            }
            else {
                completeFieldName += "@".concat(key);
            }
        });
    }
    return completeFieldName;
}, {
    setStringify: function (s) {
        var previous = storeKeyNameStringify;
        storeKeyNameStringify = s;
        return previous;
    },
});
function argumentsObjectFromField(field, variables) {
    if (field.arguments && field.arguments.length) {
        var argObj_1 = {};
        field.arguments.forEach(function (_a) {
            var name = _a.name, value = _a.value;
            return valueToObjectRepresentation(argObj_1, name, value, variables);
        });
        return argObj_1;
    }
    return null;
}
function resultKeyNameFromField(field) {
    return field.alias ? field.alias.value : field.name.value;
}
function getTypenameFromResult(result, selectionSet, fragmentMap) {
    var fragments;
    for (var _i = 0, _a = selectionSet.selections; _i < _a.length; _i++) {
        var selection = _a[_i];
        if (isField(selection)) {
            if (selection.name.value === "__typename") {
                return result[resultKeyNameFromField(selection)];
            }
        }
        else if (fragments) {
            fragments.push(selection);
        }
        else {
            fragments = [selection];
        }
    }
    if (typeof result.__typename === "string") {
        return result.__typename;
    }
    if (fragments) {
        for (var _b = 0, fragments_1 = fragments; _b < fragments_1.length; _b++) {
            var selection = fragments_1[_b];
            var typename = getTypenameFromResult(result, (0,_fragments_js__WEBPACK_IMPORTED_MODULE_3__.getFragmentFromSelection)(selection, fragmentMap).selectionSet, fragmentMap);
            if (typeof typename === "string") {
                return typename;
            }
        }
    }
}
function isField(selection) {
    return selection.kind === "Field";
}
function isInlineFragment(selection) {
    return selection.kind === "InlineFragment";
}
//# sourceMappingURL=storeUtils.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/transform.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  addNonReactiveToNamedFragments: () => (addNonReactiveToNamedFragments),
  addTypenameToDocument: () => (addTypenameToDocument),
  buildQueryFromSelectionSet: () => (buildQueryFromSelectionSet),
  removeArgumentsFromDocument: () => (removeArgumentsFromDocument),
  removeClientSetsFromDocument: () => (removeClientSetsFromDocument),
  removeConnectionDirectiveFromDocument: () => (removeConnectionDirectiveFromDocument),
  removeDirectivesFromDocument: () => (removeDirectivesFromDocument),
  removeFragmentSpreadFromDocument: () => (removeFragmentSpreadFromDocument)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var _globals_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/globals/index.js");
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs");
/* ESM import */var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs");
/* ESM import */var _getFromAST_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/getFromAST.js");
/* ESM import */var _storeUtils_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/storeUtils.js");
/* ESM import */var _fragments_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/graphql/fragments.js");
/* ESM import */var _common_arrays_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/arrays.js");







var TYPENAME_FIELD = {
    kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD,
    name: {
        kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NAME,
        value: "__typename",
    },
};
function isEmpty(op, fragmentMap) {
    return (!op ||
        op.selectionSet.selections.every(function (selection) {
            return selection.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_SPREAD &&
                isEmpty(fragmentMap[selection.name.value], fragmentMap);
        }));
}
function nullIfDocIsEmpty(doc) {
    return (isEmpty((0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getOperationDefinition)(doc) || (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinition)(doc), (0,_fragments_js__WEBPACK_IMPORTED_MODULE_3__.createFragmentMap)((0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getFragmentDefinitions)(doc)))) ?
        null
        : doc;
}
function getDirectiveMatcher(configs) {
    var names = new Map();
    var tests = new Map();
    configs.forEach(function (directive) {
        if (directive) {
            if (directive.name) {
                names.set(directive.name, directive);
            }
            else if (directive.test) {
                tests.set(directive.test, directive);
            }
        }
    });
    return function (directive) {
        var config = names.get(directive.name.value);
        if (!config && tests.size) {
            tests.forEach(function (testConfig, test) {
                if (test(directive)) {
                    config = testConfig;
                }
            });
        }
        return config;
    };
}
function makeInUseGetterFunction(defaultKey) {
    var map = new Map();
    return function inUseGetterFunction(key) {
        if (key === void 0) { key = defaultKey; }
        var inUse = map.get(key);
        if (!inUse) {
            map.set(key, (inUse = {
                // Variable and fragment spread names used directly within this
                // operation or fragment definition, as identified by key. These sets
                // will be populated during the first traversal of the document in
                // removeDirectivesFromDocument below.
                variables: new Set(),
                fragmentSpreads: new Set(),
            }));
        }
        return inUse;
    };
}
function removeDirectivesFromDocument(directives, doc) {
    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(doc);
    // Passing empty strings to makeInUseGetterFunction means we handle anonymous
    // operations as if their names were "". Anonymous fragment definitions are
    // not supposed to be possible, but the same default naming strategy seems
    // appropriate for that case as well.
    var getInUseByOperationName = makeInUseGetterFunction("");
    var getInUseByFragmentName = makeInUseGetterFunction("");
    var getInUse = function (ancestors) {
        for (var p = 0, ancestor = void 0; p < ancestors.length && (ancestor = ancestors[p]); ++p) {
            if ((0,_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__.isArray)(ancestor))
                continue;
            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {
                // If an operation is anonymous, we use the empty string as its key.
                return getInUseByOperationName(ancestor.name && ancestor.name.value);
            }
            if (ancestor.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION) {
                return getInUseByFragmentName(ancestor.name.value);
            }
        }
        globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.error(125);
        return null;
    };
    var operationCount = 0;
    for (var i = doc.definitions.length - 1; i >= 0; --i) {
        if (doc.definitions[i].kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {
            ++operationCount;
        }
    }
    var directiveMatcher = getDirectiveMatcher(directives);
    var shouldRemoveField = function (nodeDirectives) {
        return (0,_common_arrays_js__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyArray)(nodeDirectives) &&
            nodeDirectives
                .map(directiveMatcher)
                .some(function (config) { return config && config.remove; });
    };
    var originalFragmentDefsByPath = new Map();
    // Any time the first traversal of the document below makes a change like
    // removing a fragment (by returning null), this variable should be set to
    // true. Once it becomes true, it should never be set to false again. If this
    // variable remains false throughout the traversal, then we can return the
    // original doc immediately without any modifications.
    var firstVisitMadeChanges = false;
    var fieldOrInlineFragmentVisitor = {
        enter: function (node) {
            if (shouldRemoveField(node.directives)) {
                firstVisitMadeChanges = true;
                return null;
            }
        },
    };
    var docWithoutDirectiveSubtrees = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {
        // These two AST node types share the same implementation, defined above.
        Field: fieldOrInlineFragmentVisitor,
        InlineFragment: fieldOrInlineFragmentVisitor,
        VariableDefinition: {
            enter: function () {
                // VariableDefinition nodes do not count as variables in use, though
                // they do contain Variable nodes that might be visited below. To avoid
                // counting variable declarations as usages, we skip visiting the
                // contents of this VariableDefinition node by returning false.
                return false;
            },
        },
        Variable: {
            enter: function (node, _key, _parent, _path, ancestors) {
                var inUse = getInUse(ancestors);
                if (inUse) {
                    inUse.variables.add(node.name.value);
                }
            },
        },
        FragmentSpread: {
            enter: function (node, _key, _parent, _path, ancestors) {
                if (shouldRemoveField(node.directives)) {
                    firstVisitMadeChanges = true;
                    return null;
                }
                var inUse = getInUse(ancestors);
                if (inUse) {
                    inUse.fragmentSpreads.add(node.name.value);
                }
                // We might like to remove this FragmentSpread by returning null here if
                // the corresponding FragmentDefinition node is also going to be removed
                // by the logic below, but we can't control the relative order of those
                // events, so we have to postpone the removal of dangling FragmentSpread
                // nodes until after the current visit of the document has finished.
            },
        },
        FragmentDefinition: {
            enter: function (node, _key, _parent, path) {
                originalFragmentDefsByPath.set(JSON.stringify(path), node);
            },
            leave: function (node, _key, _parent, path) {
                var originalNode = originalFragmentDefsByPath.get(JSON.stringify(path));
                if (node === originalNode) {
                    // If the FragmentNode received by this leave function is identical to
                    // the one received by the corresponding enter function (above), then
                    // the visitor must not have made any changes within this
                    // FragmentDefinition node. This fragment definition may still be
                    // removed if there are no ...spread references to it, but it won't be
                    // removed just because it has only a __typename field.
                    return node;
                }
                if (
                // This logic applies only if the document contains one or more
                // operations, since removing all fragments from a document containing
                // only fragments makes the document useless.
                operationCount > 0 &&
                    node.selectionSet.selections.every(function (selection) {
                        return selection.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FIELD &&
                            selection.name.value === "__typename";
                    })) {
                    // This is a somewhat opinionated choice: if a FragmentDefinition ends
                    // up having no fields other than __typename, we remove the whole
                    // fragment definition, and later prune ...spread references to it.
                    getInUseByFragmentName(node.name.value).removed = true;
                    firstVisitMadeChanges = true;
                    return null;
                }
            },
        },
        Directive: {
            leave: function (node) {
                // If a matching directive is found, remove the directive itself. Note
                // that this does not remove the target (field, argument, etc) of the
                // directive, but only the directive itself.
                if (directiveMatcher(node)) {
                    firstVisitMadeChanges = true;
                    return null;
                }
            },
        },
    });
    if (!firstVisitMadeChanges) {
        // If our first pass did not change anything about the document, then there
        // is no cleanup we need to do, and we can return the original doc.
        return doc;
    }
    // Utility for making sure inUse.transitiveVars is recursively populated.
    // Because this logic assumes inUse.fragmentSpreads has been completely
    // populated and inUse.removed has been set if appropriate,
    // populateTransitiveVars must be called after that information has been
    // collected by the first traversal of the document.
    var populateTransitiveVars = function (inUse) {
        if (!inUse.transitiveVars) {
            inUse.transitiveVars = new Set(inUse.variables);
            if (!inUse.removed) {
                inUse.fragmentSpreads.forEach(function (childFragmentName) {
                    populateTransitiveVars(getInUseByFragmentName(childFragmentName)).transitiveVars.forEach(function (varName) {
                        inUse.transitiveVars.add(varName);
                    });
                });
            }
        }
        return inUse;
    };
    // Since we've been keeping track of fragment spreads used by particular
    // operations and fragment definitions, we now need to compute the set of all
    // spreads used (transitively) by any operations in the document.
    var allFragmentNamesUsed = new Set();
    docWithoutDirectiveSubtrees.definitions.forEach(function (def) {
        if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {
            populateTransitiveVars(getInUseByOperationName(def.name && def.name.value)).fragmentSpreads.forEach(function (childFragmentName) {
                allFragmentNamesUsed.add(childFragmentName);
            });
        }
        else if (def.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.FRAGMENT_DEFINITION &&
            // If there are no operations in the document, then all fragment
            // definitions count as usages of their own fragment names. This heuristic
            // prevents accidentally removing all fragment definitions from the
            // document just because it contains no operations that use the fragments.
            operationCount === 0 &&
            !getInUseByFragmentName(def.name.value).removed) {
            allFragmentNamesUsed.add(def.name.value);
        }
    });
    // Now that we have added all fragment spreads used by operations to the
    // allFragmentNamesUsed set, we can complete the set by transitively adding
    // all fragment spreads used by those fragments, and so on.
    allFragmentNamesUsed.forEach(function (fragmentName) {
        // Once all the childFragmentName strings added here have been seen already,
        // the top-level allFragmentNamesUsed.forEach loop will terminate.
        populateTransitiveVars(getInUseByFragmentName(fragmentName)).fragmentSpreads.forEach(function (childFragmentName) {
            allFragmentNamesUsed.add(childFragmentName);
        });
    });
    var fragmentWillBeRemoved = function (fragmentName) {
        return !!(
        // A fragment definition will be removed if there are no spreads that refer
        // to it, or the fragment was explicitly removed because it had no fields
        // other than __typename.
        (!allFragmentNamesUsed.has(fragmentName) ||
            getInUseByFragmentName(fragmentName).removed));
    };
    var enterVisitor = {
        enter: function (node) {
            if (fragmentWillBeRemoved(node.name.value)) {
                return null;
            }
        },
    };
    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(docWithoutDirectiveSubtrees, {
        // If the fragment is going to be removed, then leaving any dangling
        // FragmentSpread nodes with the same name would be a mistake.
        FragmentSpread: enterVisitor,
        // This is where the fragment definition is actually removed.
        FragmentDefinition: enterVisitor,
        OperationDefinition: {
            leave: function (node) {
                // Upon leaving each operation in the depth-first AST traversal, prune
                // any variables that are declared by the operation but unused within.
                if (node.variableDefinitions) {
                    var usedVariableNames_1 = populateTransitiveVars(
                    // If an operation is anonymous, we use the empty string as its key.
                    getInUseByOperationName(node.name && node.name.value)).transitiveVars;
                    // According to the GraphQL spec, all variables declared by an
                    // operation must either be used by that operation or used by some
                    // fragment included transitively into that operation:
                    // https://spec.graphql.org/draft/#sec-All-Variables-Used
                    //
                    // To stay on the right side of this validation rule, if/when we
                    // remove the last $var references from an operation or its fragments,
                    // we must also remove the corresponding $var declaration from the
                    // enclosing operation. This pruning applies only to operations and
                    // not fragment definitions, at the moment. Fragments may be able to
                    // declare variables eventually, but today they can only consume them.
                    if (usedVariableNames_1.size < node.variableDefinitions.length) {
                        return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), { variableDefinitions: node.variableDefinitions.filter(function (varDef) {
                                return usedVariableNames_1.has(varDef.variable.name.value);
                            }) });
                    }
                }
            },
        },
    }));
}
var addTypenameToDocument = Object.assign(function (doc) {
    return (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {
        SelectionSet: {
            enter: function (node, _key, parent) {
                // Don't add __typename to OperationDefinitions.
                if (parent &&
                    parent.kind ===
                        graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_DEFINITION) {
                    return;
                }
                // No changes if no selections.
                var selections = node.selections;
                if (!selections) {
                    return;
                }
                // If selections already have a __typename, or are part of an
                // introspection query, do nothing.
                var skip = selections.some(function (selection) {
                    return ((0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection) &&
                        (selection.name.value === "__typename" ||
                            selection.name.value.lastIndexOf("__", 0) === 0));
                });
                if (skip) {
                    return;
                }
                // If this SelectionSet is @export-ed as an input variable, it should
                // not have a __typename field (see issue #4691).
                var field = parent;
                if ((0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(field) &&
                    field.directives &&
                    field.directives.some(function (d) { return d.name.value === "export"; })) {
                    return;
                }
                // Create and return a new SelectionSet with a __typename Field.
                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), { selections: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([], selections, true), [TYPENAME_FIELD], false) });
            },
        },
    });
}, {
    added: function (field) {
        return field === TYPENAME_FIELD;
    },
});
var connectionRemoveConfig = {
    test: function (directive) {
        var willRemove = directive.name.value === "connection";
        if (willRemove) {
            if (!directive.arguments ||
                !directive.arguments.some(function (arg) { return arg.name.value === "key"; })) {
                globalThis.__DEV__ !== false && _globals_index_js__WEBPACK_IMPORTED_MODULE_0__.invariant.warn(126);
            }
        }
        return willRemove;
    },
};
function removeConnectionDirectiveFromDocument(doc) {
    return removeDirectivesFromDocument([connectionRemoveConfig], (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(doc));
}
function hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {
    if (nestedCheck === void 0) { nestedCheck = true; }
    return (!!selectionSet &&
        selectionSet.selections &&
        selectionSet.selections.some(function (selection) {
            return hasDirectivesInSelection(directives, selection, nestedCheck);
        }));
}
function hasDirectivesInSelection(directives, selection, nestedCheck) {
    if (nestedCheck === void 0) { nestedCheck = true; }
    if (!(0,_storeUtils_js__WEBPACK_IMPORTED_MODULE_7__.isField)(selection)) {
        return true;
    }
    if (!selection.directives) {
        return false;
    }
    return (selection.directives.some(getDirectiveMatcher(directives)) ||
        (nestedCheck &&
            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));
}
function getArgumentMatcher(config) {
    return function argumentMatcher(argument) {
        return config.some(function (aConfig) {
            return argument.value &&
                argument.value.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.VARIABLE &&
                argument.value.name &&
                (aConfig.name === argument.value.name.value ||
                    (aConfig.test && aConfig.test(argument)));
        });
    };
}
function removeArgumentsFromDocument(config, doc) {
    var argMatcher = getArgumentMatcher(config);
    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {
        OperationDefinition: {
            enter: function (node) {
                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), { 
                    // Remove matching top level variables definitions.
                    variableDefinitions: node.variableDefinitions ?
                        node.variableDefinitions.filter(function (varDef) {
                            return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });
                        })
                        : [] });
            },
        },
        Field: {
            enter: function (node) {
                // If `remove` is set to true for an argument, and an argument match
                // is found for a field, remove the field as well.
                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });
                if (shouldRemoveField) {
                    var argMatchCount_1 = 0;
                    if (node.arguments) {
                        node.arguments.forEach(function (arg) {
                            if (argMatcher(arg)) {
                                argMatchCount_1 += 1;
                            }
                        });
                    }
                    if (argMatchCount_1 === 1) {
                        return null;
                    }
                }
            },
        },
        Argument: {
            enter: function (node) {
                // Remove all matching arguments.
                if (argMatcher(node)) {
                    return null;
                }
            },
        },
    }));
}
function removeFragmentSpreadFromDocument(config, doc) {
    function enter(node) {
        if (config.some(function (def) { return def.name === node.name.value; })) {
            return null;
        }
    }
    return nullIfDocIsEmpty((0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(doc, {
        FragmentSpread: { enter: enter },
        FragmentDefinition: { enter: enter },
    }));
}
// If the incoming document is a query, return it as is. Otherwise, build a
// new document containing a query operation based on the selection set
// of the previous main operation.
function buildQueryFromSelectionSet(document) {
    var definition = (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.getMainDefinition)(document);
    var definitionOperation = definition.operation;
    if (definitionOperation === "query") {
        // Already a query, so return the existing document.
        return document;
    }
    // Build a new query using the selection set of the main operation.
    var modifiedDoc = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {
        OperationDefinition: {
            enter: function (node) {
                return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), { operation: "query" });
            },
        },
    });
    return modifiedDoc;
}
// Remove fields / selection sets that include an @client directive.
function removeClientSetsFromDocument(document) {
    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(document);
    var modifiedDoc = removeDirectivesFromDocument([
        {
            test: function (directive) { return directive.name.value === "client"; },
            remove: true,
        },
    ], document);
    return modifiedDoc;
}
function addNonReactiveToNamedFragments(document) {
    (0,_getFromAST_js__WEBPACK_IMPORTED_MODULE_2__.checkDocument)(document);
    return (0,graphql__WEBPACK_IMPORTED_MODULE_5__.visit)(document, {
        FragmentSpread: function (node) {
            var _a;
            // Do not add `@nonreactive` if the fragment is marked with `@unmask`
            // since we want to react to changes in this fragment.
            if ((_a = node.directives) === null || _a === void 0 ? void 0 : _a.some(function (directive) { return directive.name.value === "unmask"; })) {
                return;
            }
            return (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__assign)({}, node), { directives: (0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_6__.__spreadArray)([], (node.directives || []), true), [
                    {
                        kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.DIRECTIVE,
                        name: { kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NAME, value: "nonreactive" },
                    },
                ], false) });
        },
    });
}
//# sourceMappingURL=transform.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/policies/pagination.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  concatPagination: () => (concatPagination),
  offsetLimitPagination: () => (offsetLimitPagination),
  relayStylePagination: () => (relayStylePagination)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");
/* ESM import */var _common_mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/utilities/common/mergeDeep.js");



// A very basic pagination field policy that always concatenates new
// results onto the existing array, without examining options.args.
function concatPagination(keyArgs) {
    if (keyArgs === void 0) { keyArgs = false; }
    return {
        keyArgs: keyArgs,
        merge: function (existing, incoming) {
            return existing ? (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], existing, true), incoming, true) : incoming;
        },
    };
}
// A basic field policy that uses options.args.{offset,limit} to splice
// the incoming data into the existing array. If your arguments are called
// something different (like args.{start,count}), feel free to copy/paste
// this implementation and make the appropriate changes.
function offsetLimitPagination(keyArgs) {
    if (keyArgs === void 0) { keyArgs = false; }
    return {
        keyArgs: keyArgs,
        merge: function (existing, incoming, _a) {
            var args = _a.args;
            var merged = existing ? existing.slice(0) : [];
            if (incoming) {
                if (args) {
                    // Assume an offset of 0 if args.offset omitted.
                    var _b = args.offset, offset = _b === void 0 ? 0 : _b;
                    for (var i = 0; i < incoming.length; ++i) {
                        merged[offset + i] = incoming[i];
                    }
                }
                else {
                    // It's unusual (probably a mistake) for a paginated field not
                    // to receive any arguments, so you might prefer to throw an
                    // exception here, instead of recovering by appending incoming
                    // onto the existing array.
                    merged.push.apply(merged, incoming);
                }
            }
            return merged;
        },
    };
}
// As proof of the flexibility of field policies, this function generates
// one that handles Relay-style pagination, without Apollo Client knowing
// anything about connections, edges, cursors, or pageInfo objects.
function relayStylePagination(keyArgs) {
    if (keyArgs === void 0) { keyArgs = false; }
    return {
        keyArgs: keyArgs,
        read: function (existing, _a) {
            var canRead = _a.canRead, readField = _a.readField;
            if (!existing)
                return existing;
            var edges = [];
            var firstEdgeCursor = "";
            var lastEdgeCursor = "";
            existing.edges.forEach(function (edge) {
                // Edges themselves could be Reference objects, so it's important
                // to use readField to access the edge.edge.node property.
                if (canRead(readField("node", edge))) {
                    edges.push(edge);
                    if (edge.cursor) {
                        firstEdgeCursor = firstEdgeCursor || edge.cursor || "";
                        lastEdgeCursor = edge.cursor || lastEdgeCursor;
                    }
                }
            });
            if (edges.length > 1 && firstEdgeCursor === lastEdgeCursor) {
                firstEdgeCursor = "";
            }
            var _b = existing.pageInfo || {}, startCursor = _b.startCursor, endCursor = _b.endCursor;
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, getExtras(existing)), { edges: edges, pageInfo: (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, existing.pageInfo), { 
                    // If existing.pageInfo.{start,end}Cursor are undefined or "", default
                    // to firstEdgeCursor and/or lastEdgeCursor.
                    startCursor: startCursor || firstEdgeCursor, endCursor: endCursor || lastEdgeCursor }) });
        },
        merge: function (existing, incoming, _a) {
            var args = _a.args, isReference = _a.isReference, readField = _a.readField;
            if (!existing) {
                existing = makeEmptyData();
            }
            if (!incoming) {
                return existing;
            }
            var incomingEdges = incoming.edges ?
                incoming.edges.map(function (edge) {
                    if (isReference((edge = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, edge)))) {
                        // In case edge is a Reference, we read out its cursor field and
                        // store it as an extra property of the Reference object.
                        edge.cursor = readField("cursor", edge);
                    }
                    return edge;
                })
                : [];
            if (incoming.pageInfo) {
                var pageInfo_1 = incoming.pageInfo;
                var startCursor = pageInfo_1.startCursor, endCursor = pageInfo_1.endCursor;
                var firstEdge = incomingEdges[0];
                var lastEdge = incomingEdges[incomingEdges.length - 1];
                // In case we did not request the cursor field for edges in this
                // query, we can still infer cursors from pageInfo.
                if (firstEdge && startCursor) {
                    firstEdge.cursor = startCursor;
                }
                if (lastEdge && endCursor) {
                    lastEdge.cursor = endCursor;
                }
                // Cursors can also come from edges, so we default
                // pageInfo.{start,end}Cursor to {first,last}Edge.cursor.
                var firstCursor = firstEdge && firstEdge.cursor;
                if (firstCursor && !startCursor) {
                    incoming = (0,_common_mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(incoming, {
                        pageInfo: {
                            startCursor: firstCursor,
                        },
                    });
                }
                var lastCursor = lastEdge && lastEdge.cursor;
                if (lastCursor && !endCursor) {
                    incoming = (0,_common_mergeDeep_js__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(incoming, {
                        pageInfo: {
                            endCursor: lastCursor,
                        },
                    });
                }
            }
            var prefix = existing.edges;
            var suffix = [];
            if (args && args.after) {
                // This comparison does not need to use readField("cursor", edge),
                // because we stored the cursor field of any Reference edges as an
                // extra property of the Reference object.
                var index = prefix.findIndex(function (edge) { return edge.cursor === args.after; });
                if (index >= 0) {
                    prefix = prefix.slice(0, index + 1);
                    // suffix = []; // already true
                }
            }
            else if (args && args.before) {
                var index = prefix.findIndex(function (edge) { return edge.cursor === args.before; });
                suffix = index < 0 ? prefix : prefix.slice(index);
                prefix = [];
            }
            else if (incoming.edges) {
                // If we have neither args.after nor args.before, the incoming
                // edges cannot be spliced into the existing edges, so they must
                // replace the existing edges. See #6592 for a motivating example.
                prefix = [];
            }
            var edges = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__spreadArray)([], prefix, true), incomingEdges, true), suffix, true);
            var pageInfo = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, incoming.pageInfo), existing.pageInfo);
            if (incoming.pageInfo) {
                var _b = incoming.pageInfo, hasPreviousPage = _b.hasPreviousPage, hasNextPage = _b.hasNextPage, startCursor = _b.startCursor, endCursor = _b.endCursor, extras = (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__rest)(_b, ["hasPreviousPage", "hasNextPage", "startCursor", "endCursor"]);
                // If incoming.pageInfo had any extra non-standard properties,
                // assume they should take precedence over any existing properties
                // of the same name, regardless of where this page falls with
                // respect to the existing data.
                Object.assign(pageInfo, extras);
                // Keep existing.pageInfo.has{Previous,Next}Page unless the
                // placement of the incoming edges means incoming.hasPreviousPage
                // or incoming.hasNextPage should become the new values for those
                // properties in existing.pageInfo. Note that these updates are
                // only permitted when the beginning or end of the incoming page
                // coincides with the beginning or end of the existing data, as
                // determined using prefix.length and suffix.length.
                if (!prefix.length) {
                    if (void 0 !== hasPreviousPage)
                        pageInfo.hasPreviousPage = hasPreviousPage;
                    if (void 0 !== startCursor)
                        pageInfo.startCursor = startCursor;
                }
                if (!suffix.length) {
                    if (void 0 !== hasNextPage)
                        pageInfo.hasNextPage = hasNextPage;
                    if (void 0 !== endCursor)
                        pageInfo.endCursor = endCursor;
                }
            }
            return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_0__.__assign)({}, getExtras(existing)), getExtras(incoming)), { edges: edges, pageInfo: pageInfo });
        },
    };
}
// Returns any unrecognized properties of the given object.
var getExtras = function (obj) { return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__rest)(obj, notExtras); };
var notExtras = ["edges", "pageInfo"];
function makeEmptyData() {
    return {
        edges: [],
        pageInfo: {
            hasPreviousPage: false,
            hasNextPage: true,
            startCursor: "",
            endCursor: "",
        },
    };
}
//# sourceMappingURL=pagination.js.map

}),
"../../node_modules/.pnpm/@apollo+client@3.14.0_@types+react@19.2.2_graphql@16.11.0_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@apollo/client/version.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  version: () => (version)
});
var version = "3.14.0";
//# sourceMappingURL=version.js.map

}),
"../../node_modules/.pnpm/@wry+caches@1.0.1/node_modules/@wry/caches/lib/strong.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  StrongCache: () => (StrongCache)
});
function defaultDispose() { }
class StrongCache {
    constructor(max = Infinity, dispose = defaultDispose) {
        this.max = max;
        this.dispose = dispose;
        this.map = new Map();
        this.newest = null;
        this.oldest = null;
    }
    has(key) {
        return this.map.has(key);
    }
    get(key) {
        const node = this.getNode(key);
        return node && node.value;
    }
    get size() {
        return this.map.size;
    }
    getNode(key) {
        const node = this.map.get(key);
        if (node && node !== this.newest) {
            const { older, newer } = node;
            if (newer) {
                newer.older = older;
            }
            if (older) {
                older.newer = newer;
            }
            node.older = this.newest;
            node.older.newer = node;
            node.newer = null;
            this.newest = node;
            if (node === this.oldest) {
                this.oldest = newer;
            }
        }
        return node;
    }
    set(key, value) {
        let node = this.getNode(key);
        if (node) {
            return node.value = value;
        }
        node = {
            key,
            value,
            newer: null,
            older: this.newest
        };
        if (this.newest) {
            this.newest.newer = node;
        }
        this.newest = node;
        this.oldest = this.oldest || node;
        this.map.set(key, node);
        return node.value;
    }
    clean() {
        while (this.oldest && this.map.size > this.max) {
            this.delete(this.oldest.key);
        }
    }
    delete(key) {
        const node = this.map.get(key);
        if (node) {
            if (node === this.newest) {
                this.newest = node.older;
            }
            if (node === this.oldest) {
                this.oldest = node.newer;
            }
            if (node.newer) {
                node.newer.older = node.older;
            }
            if (node.older) {
                node.older.newer = node.newer;
            }
            this.map.delete(key);
            this.dispose(node.value, key);
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=strong.js.map

}),
"../../node_modules/.pnpm/@wry+caches@1.0.1/node_modules/@wry/caches/lib/weak.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  WeakCache: () => (WeakCache)
});
function noop() { }
const defaultDispose = noop;
const _WeakRef = typeof WeakRef !== "undefined"
    ? WeakRef
    : function (value) {
        return { deref: () => value };
    };
const _WeakMap = typeof WeakMap !== "undefined" ? WeakMap : Map;
const _FinalizationRegistry = typeof FinalizationRegistry !== "undefined"
    ? FinalizationRegistry
    : function () {
        return {
            register: noop,
            unregister: noop,
        };
    };
const finalizationBatchSize = 10024;
class WeakCache {
    constructor(max = Infinity, dispose = defaultDispose) {
        this.max = max;
        this.dispose = dispose;
        this.map = new _WeakMap();
        this.newest = null;
        this.oldest = null;
        this.unfinalizedNodes = new Set();
        this.finalizationScheduled = false;
        this.size = 0;
        this.finalize = () => {
            const iterator = this.unfinalizedNodes.values();
            for (let i = 0; i < finalizationBatchSize; i++) {
                const node = iterator.next().value;
                if (!node)
                    break;
                this.unfinalizedNodes.delete(node);
                const key = node.key;
                delete node.key;
                node.keyRef = new _WeakRef(key);
                this.registry.register(key, node, node);
            }
            if (this.unfinalizedNodes.size > 0) {
                queueMicrotask(this.finalize);
            }
            else {
                this.finalizationScheduled = false;
            }
        };
        this.registry = new _FinalizationRegistry(this.deleteNode.bind(this));
    }
    has(key) {
        return this.map.has(key);
    }
    get(key) {
        const node = this.getNode(key);
        return node && node.value;
    }
    getNode(key) {
        const node = this.map.get(key);
        if (node && node !== this.newest) {
            const { older, newer } = node;
            if (newer) {
                newer.older = older;
            }
            if (older) {
                older.newer = newer;
            }
            node.older = this.newest;
            node.older.newer = node;
            node.newer = null;
            this.newest = node;
            if (node === this.oldest) {
                this.oldest = newer;
            }
        }
        return node;
    }
    set(key, value) {
        let node = this.getNode(key);
        if (node) {
            return (node.value = value);
        }
        node = {
            key,
            value,
            newer: null,
            older: this.newest,
        };
        if (this.newest) {
            this.newest.newer = node;
        }
        this.newest = node;
        this.oldest = this.oldest || node;
        this.scheduleFinalization(node);
        this.map.set(key, node);
        this.size++;
        return node.value;
    }
    clean() {
        while (this.oldest && this.size > this.max) {
            this.deleteNode(this.oldest);
        }
    }
    deleteNode(node) {
        if (node === this.newest) {
            this.newest = node.older;
        }
        if (node === this.oldest) {
            this.oldest = node.newer;
        }
        if (node.newer) {
            node.newer.older = node.older;
        }
        if (node.older) {
            node.older.newer = node.newer;
        }
        this.size--;
        const key = node.key || (node.keyRef && node.keyRef.deref());
        this.dispose(node.value, key);
        if (!node.keyRef) {
            this.unfinalizedNodes.delete(node);
        }
        else {
            this.registry.unregister(node);
        }
        if (key)
            this.map.delete(key);
    }
    delete(key) {
        const node = this.map.get(key);
        if (node) {
            this.deleteNode(node);
            return true;
        }
        return false;
    }
    scheduleFinalization(node) {
        this.unfinalizedNodes.add(node);
        if (!this.finalizationScheduled) {
            this.finalizationScheduled = true;
            queueMicrotask(this.finalize);
        }
    }
}
//# sourceMappingURL=weak.js.map

}),
"../../node_modules/.pnpm/@wry+context@0.7.4/node_modules/@wry/context/lib/index.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Slot: () => (/* reexport safe */ _slot_js__WEBPACK_IMPORTED_MODULE_0__.Slot),
  asyncFromGen: () => (asyncFromGen),
  bind: () => (bind),
  noContext: () => (noContext),
  setTimeout: () => (setTimeoutWithContext),
  wrapYieldingFiberMethods: () => (wrapYieldingFiberMethods)
});
/* ESM import */var _slot_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@wry+context@0.7.4/node_modules/@wry/context/lib/slot.js");


const { bind, noContext } = _slot_js__WEBPACK_IMPORTED_MODULE_0__.Slot;
// Like global.setTimeout, except the callback runs with captured context.

function setTimeoutWithContext(callback, delay) {
    return setTimeout(bind(callback), delay);
}
// Turn any generator function into an async function (using yield instead
// of await), with context automatically preserved across yields.
function asyncFromGen(genFn) {
    return function () {
        const gen = genFn.apply(this, arguments);
        const boundNext = bind(gen.next);
        const boundThrow = bind(gen.throw);
        return new Promise((resolve, reject) => {
            function invoke(method, argument) {
                try {
                    var result = method.call(gen, argument);
                }
                catch (error) {
                    return reject(error);
                }
                const next = result.done ? resolve : invokeNext;
                if (isPromiseLike(result.value)) {
                    result.value.then(next, result.done ? reject : invokeThrow);
                }
                else {
                    next(result.value);
                }
            }
            const invokeNext = (value) => invoke(boundNext, value);
            const invokeThrow = (error) => invoke(boundThrow, error);
            invokeNext();
        });
    };
}
function isPromiseLike(value) {
    return value && typeof value.then === "function";
}
// If you use the fibers npm package to implement coroutines in Node.js,
// you should call this function at least once to ensure context management
// remains coherent across any yields.
const wrappedFibers = [];
function wrapYieldingFiberMethods(Fiber) {
    // There can be only one implementation of Fiber per process, so this array
    // should never grow longer than one element.
    if (wrappedFibers.indexOf(Fiber) < 0) {
        const wrap = (obj, method) => {
            const fn = obj[method];
            obj[method] = function () {
                return noContext(fn, arguments, this);
            };
        };
        // These methods can yield, according to
        // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100
        wrap(Fiber, "yield");
        wrap(Fiber.prototype, "run");
        wrap(Fiber.prototype, "throwInto");
        wrappedFibers.push(Fiber);
    }
    return Fiber;
}
//# sourceMappingURL=index.js.map

}),
"../../node_modules/.pnpm/@wry+context@0.7.4/node_modules/@wry/context/lib/slot.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Slot: () => (Slot)
});
// This currentContext variable will only be used if the makeSlotClass
// function is called, which happens only if this is the first copy of the
// @wry/context package to be imported.
let currentContext = null;
// This unique internal object is used to denote the absence of a value
// for a given Slot, and is never exposed to outside code.
const MISSING_VALUE = {};
let idCounter = 1;
// Although we can't do anything about the cost of duplicated code from
// accidentally bundling multiple copies of the @wry/context package, we can
// avoid creating the Slot class more than once using makeSlotClass.
const makeSlotClass = () => class Slot {
    constructor() {
        // If you have a Slot object, you can find out its slot.id, but you cannot
        // guess the slot.id of a Slot you don't have access to, thanks to the
        // randomized suffix.
        this.id = [
            "slot",
            idCounter++,
            Date.now(),
            Math.random().toString(36).slice(2),
        ].join(":");
    }
    hasValue() {
        for (let context = currentContext; context; context = context.parent) {
            // We use the Slot object iself as a key to its value, which means the
            // value cannot be obtained without a reference to the Slot object.
            if (this.id in context.slots) {
                const value = context.slots[this.id];
                if (value === MISSING_VALUE)
                    break;
                if (context !== currentContext) {
                    // Cache the value in currentContext.slots so the next lookup will
                    // be faster. This caching is safe because the tree of contexts and
                    // the values of the slots are logically immutable.
                    currentContext.slots[this.id] = value;
                }
                return true;
            }
        }
        if (currentContext) {
            // If a value was not found for this Slot, it's never going to be found
            // no matter how many times we look it up, so we might as well cache
            // the absence of the value, too.
            currentContext.slots[this.id] = MISSING_VALUE;
        }
        return false;
    }
    getValue() {
        if (this.hasValue()) {
            return currentContext.slots[this.id];
        }
    }
    withValue(value, callback, 
    // Given the prevalence of arrow functions, specifying arguments is likely
    // to be much more common than specifying `this`, hence this ordering:
    args, thisArg) {
        const slots = {
            __proto__: null,
            [this.id]: value,
        };
        const parent = currentContext;
        currentContext = { parent, slots };
        try {
            // Function.prototype.apply allows the arguments array argument to be
            // omitted or undefined, so args! is fine here.
            return callback.apply(thisArg, args);
        }
        finally {
            currentContext = parent;
        }
    }
    // Capture the current context and wrap a callback function so that it
    // reestablishes the captured context when called.
    static bind(callback) {
        const context = currentContext;
        return function () {
            const saved = currentContext;
            try {
                currentContext = context;
                return callback.apply(this, arguments);
            }
            finally {
                currentContext = saved;
            }
        };
    }
    // Immediately run a callback function without any captured context.
    static noContext(callback, 
    // Given the prevalence of arrow functions, specifying arguments is likely
    // to be much more common than specifying `this`, hence this ordering:
    args, thisArg) {
        if (currentContext) {
            const saved = currentContext;
            try {
                currentContext = null;
                // Function.prototype.apply allows the arguments array argument to be
                // omitted or undefined, so args! is fine here.
                return callback.apply(thisArg, args);
            }
            finally {
                currentContext = saved;
            }
        }
        else {
            return callback.apply(thisArg, args);
        }
    }
};
function maybe(fn) {
    try {
        return fn();
    }
    catch (ignored) { }
}
// We store a single global implementation of the Slot class as a permanent
// non-enumerable property of the globalThis object. This obfuscation does
// nothing to prevent access to the Slot class, but at least it ensures the
// implementation (i.e. currentContext) cannot be tampered with, and all copies
// of the @wry/context package (hopefully just one) will share the same Slot
// implementation. Since the first copy of the @wry/context package to be
// imported wins, this technique imposes a steep cost for any future breaking
// changes to the Slot class.
const globalKey = "@wry/context:Slot";
const host = 
// Prefer globalThis when available.
// https://github.com/benjamn/wryware/issues/347
maybe(() => globalThis) ||
    // Fall back to global, which works in Node.js and may be converted by some
    // bundlers to the appropriate identifier (window, self, ...) depending on the
    // bundling target. https://github.com/endojs/endo/issues/576#issuecomment-1178515224
    maybe(() => global) ||
    // Otherwise, use a dummy host that's local to this module. We used to fall
    // back to using the Array constructor as a namespace, but that was flagged in
    // https://github.com/benjamn/wryware/issues/347, and can be avoided.
    Object.create(null);
// Whichever globalHost we're using, make TypeScript happy about the additional
// globalKey property.
const globalHost = host;
const Slot = globalHost[globalKey] ||
    // Earlier versions of this package stored the globalKey property on the Array
    // constructor, so we check there as well, to prevent Slot class duplication.
    Array[globalKey] ||
    (function (Slot) {
        try {
            Object.defineProperty(globalHost, globalKey, {
                value: Slot,
                enumerable: false,
                writable: false,
                // When it was possible for globalHost to be the Array constructor (a
                // legacy Slot dedup strategy), it was important for the property to be
                // configurable:true so it could be deleted. That does not seem to be as
                // important when globalHost is the global object, but I don't want to
                // cause similar problems again, and configurable:true seems safest.
                // https://github.com/endojs/endo/issues/576#issuecomment-1178274008
                configurable: true
            });
        }
        finally {
            return Slot;
        }
    })(makeSlotClass());
//# sourceMappingURL=slot.js.map

}),
"../../node_modules/.pnpm/@wry+equality@0.5.7/node_modules/@wry/equality/lib/index.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  "default": () => (__WEBPACK_DEFAULT_EXPORT__),
  equal: () => (equal)
});
const { toString, hasOwnProperty } = Object.prototype;
const fnToStr = Function.prototype.toString;
const previousComparisons = new Map();
/**
 * Performs a deep equality check on two JavaScript values, tolerating cycles.
 */
function equal(a, b) {
    try {
        return check(a, b);
    }
    finally {
        previousComparisons.clear();
    }
}
// Allow default imports as well.
/* ESM default export */ const __WEBPACK_DEFAULT_EXPORT__ = (equal);
function check(a, b) {
    // If the two values are strictly equal, our job is easy.
    if (a === b) {
        return true;
    }
    // Object.prototype.toString returns a representation of the runtime type of
    // the given value that is considerably more precise than typeof.
    const aTag = toString.call(a);
    const bTag = toString.call(b);
    // If the runtime types of a and b are different, they could maybe be equal
    // under some interpretation of equality, but for simplicity and performance
    // we just return false instead.
    if (aTag !== bTag) {
        return false;
    }
    switch (aTag) {
        case '[object Array]':
            // Arrays are a lot like other objects, but we can cheaply compare their
            // lengths as a short-cut before comparing their elements.
            if (a.length !== b.length)
                return false;
        // Fall through to object case...
        case '[object Object]': {
            if (previouslyCompared(a, b))
                return true;
            const aKeys = definedKeys(a);
            const bKeys = definedKeys(b);
            // If `a` and `b` have a different number of enumerable keys, they
            // must be different.
            const keyCount = aKeys.length;
            if (keyCount !== bKeys.length)
                return false;
            // Now make sure they have the same keys.
            for (let k = 0; k < keyCount; ++k) {
                if (!hasOwnProperty.call(b, aKeys[k])) {
                    return false;
                }
            }
            // Finally, check deep equality of all child properties.
            for (let k = 0; k < keyCount; ++k) {
                const key = aKeys[k];
                if (!check(a[key], b[key])) {
                    return false;
                }
            }
            return true;
        }
        case '[object Error]':
            return a.name === b.name && a.message === b.message;
        case '[object Number]':
            // Handle NaN, which is !== itself.
            if (a !== a)
                return b !== b;
        // Fall through to shared +a === +b case...
        case '[object Boolean]':
        case '[object Date]':
            return +a === +b;
        case '[object RegExp]':
        case '[object String]':
            return a == `${b}`;
        case '[object Map]':
        case '[object Set]': {
            if (a.size !== b.size)
                return false;
            if (previouslyCompared(a, b))
                return true;
            const aIterator = a.entries();
            const isMap = aTag === '[object Map]';
            while (true) {
                const info = aIterator.next();
                if (info.done)
                    break;
                // If a instanceof Set, aValue === aKey.
                const [aKey, aValue] = info.value;
                // So this works the same way for both Set and Map.
                if (!b.has(aKey)) {
                    return false;
                }
                // However, we care about deep equality of values only when dealing
                // with Map structures.
                if (isMap && !check(aValue, b.get(aKey))) {
                    return false;
                }
            }
            return true;
        }
        case '[object Uint16Array]':
        case '[object Uint8Array]': // Buffer, in Node.js.
        case '[object Uint32Array]':
        case '[object Int32Array]':
        case '[object Int8Array]':
        case '[object Int16Array]':
        case '[object ArrayBuffer]':
            // DataView doesn't need these conversions, but the equality check is
            // otherwise the same.
            a = new Uint8Array(a);
            b = new Uint8Array(b);
        // Fall through...
        case '[object DataView]': {
            let len = a.byteLength;
            if (len === b.byteLength) {
                while (len-- && a[len] === b[len]) {
                    // Keep looping as long as the bytes are equal.
                }
            }
            return len === -1;
        }
        case '[object AsyncFunction]':
        case '[object GeneratorFunction]':
        case '[object AsyncGeneratorFunction]':
        case '[object Function]': {
            const aCode = fnToStr.call(a);
            if (aCode !== fnToStr.call(b)) {
                return false;
            }
            // We consider non-native functions equal if they have the same code
            // (native functions require === because their code is censored).
            // Note that this behavior is not entirely sound, since !== function
            // objects with the same code can behave differently depending on
            // their closure scope. However, any function can behave differently
            // depending on the values of its input arguments (including this)
            // and its calling context (including its closure scope), even
            // though the function object is === to itself; and it is entirely
            // possible for functions that are not === to behave exactly the
            // same under all conceivable circumstances. Because none of these
            // factors are statically decidable in JavaScript, JS function
            // equality is not well-defined. This ambiguity allows us to
            // consider the best possible heuristic among various imperfect
            // options, and equating non-native functions that have the same
            // code has enormous practical benefits, such as when comparing
            // functions that are repeatedly passed as fresh function
            // expressions within objects that are otherwise deeply equal. Since
            // any function created from the same syntactic expression (in the
            // same code location) will always stringify to the same code
            // according to fnToStr.call, we can reasonably expect these
            // repeatedly passed function expressions to have the same code, and
            // thus behave "the same" (with all the caveats mentioned above),
            // even though the runtime function objects are !== to one another.
            return !endsWith(aCode, nativeCodeSuffix);
        }
    }
    // Otherwise the values are not equal.
    return false;
}
function definedKeys(obj) {
    // Remember that the second argument to Array.prototype.filter will be
    // used as `this` within the callback function.
    return Object.keys(obj).filter(isDefinedKey, obj);
}
function isDefinedKey(key) {
    return this[key] !== void 0;
}
const nativeCodeSuffix = "{ [native code] }";
function endsWith(full, suffix) {
    const fromIndex = full.length - suffix.length;
    return fromIndex >= 0 &&
        full.indexOf(suffix, fromIndex) === fromIndex;
}
function previouslyCompared(a, b) {
    // Though cyclic references can make an object graph appear infinite from the
    // perspective of a depth-first traversal, the graph still contains a finite
    // number of distinct object references. We use the previousComparisons cache
    // to avoid comparing the same pair of object references more than once, which
    // guarantees termination (even if we end up comparing every object in one
    // graph to every object in the other graph, which is extremely unlikely),
    // while still allowing weird isomorphic structures (like rings with different
    // lengths) a chance to pass the equality test.
    let bSet = previousComparisons.get(a);
    if (bSet) {
        // Return true here because we can be sure false will be returned somewhere
        // else if the objects are not equivalent.
        if (bSet.has(b))
            return true;
    }
    else {
        previousComparisons.set(a, bSet = new Set);
    }
    bSet.add(b);
    return false;
}
//# sourceMappingURL=index.js.map

}),
"../../node_modules/.pnpm/@wry+trie@0.5.0/node_modules/@wry/trie/lib/index.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Trie: () => (Trie)
});
// A [trie](https://en.wikipedia.org/wiki/Trie) data structure that holds
// object keys weakly, yet can also hold non-object keys, unlike the
// native `WeakMap`.
// If no makeData function is supplied, the looked-up data will be an empty,
// null-prototype Object.
const defaultMakeData = () => Object.create(null);
// Useful for processing arguments objects as well as arrays.
const { forEach, slice } = Array.prototype;
const { hasOwnProperty } = Object.prototype;
class Trie {
    constructor(weakness = true, makeData = defaultMakeData) {
        this.weakness = weakness;
        this.makeData = makeData;
    }
    lookup() {
        return this.lookupArray(arguments);
    }
    lookupArray(array) {
        let node = this;
        forEach.call(array, key => node = node.getChildTrie(key));
        return hasOwnProperty.call(node, "data")
            ? node.data
            : node.data = this.makeData(slice.call(array));
    }
    peek() {
        return this.peekArray(arguments);
    }
    peekArray(array) {
        let node = this;
        for (let i = 0, len = array.length; node && i < len; ++i) {
            const map = node.mapFor(array[i], false);
            node = map && map.get(array[i]);
        }
        return node && node.data;
    }
    remove() {
        return this.removeArray(arguments);
    }
    removeArray(array) {
        let data;
        if (array.length) {
            const head = array[0];
            const map = this.mapFor(head, false);
            const child = map && map.get(head);
            if (child) {
                data = child.removeArray(slice.call(array, 1));
                if (!child.data && !child.weak && !(child.strong && child.strong.size)) {
                    map.delete(head);
                }
            }
        }
        else {
            data = this.data;
            delete this.data;
        }
        return data;
    }
    getChildTrie(key) {
        const map = this.mapFor(key, true);
        let child = map.get(key);
        if (!child)
            map.set(key, child = new Trie(this.weakness, this.makeData));
        return child;
    }
    mapFor(key, create) {
        return this.weakness && isObjRef(key)
            ? this.weak || (create ? this.weak = new WeakMap : void 0)
            : this.strong || (create ? this.strong = new Map : void 0);
    }
}
function isObjRef(value) {
    switch (typeof value) {
        case "object":
            if (value === null)
                break;
        // Fall through to return true...
        case "function":
            return true;
    }
    return false;
}
//# sourceMappingURL=index.js.map

}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/GraphQLError.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  GraphQLError: () => (GraphQLError),
  formatError: () => (formatError),
  printError: () => (printError)
});
/* ESM import */var _jsutils_isObjectLike_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/isObjectLike.mjs");
/* ESM import */var _language_location_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/location.mjs");
/* ESM import */var _language_printLocation_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printLocation.mjs");




function toNormalizedOptions(args) {
  const firstArg = args[0];

  if (firstArg == null || 'kind' in firstArg || 'length' in firstArg) {
    return {
      nodes: firstArg,
      source: args[1],
      positions: args[2],
      path: args[3],
      originalError: args[4],
      extensions: args[5],
    };
  }

  return firstArg;
}
/**
 * A GraphQLError describes an Error found during the parse, validate, or
 * execute phases of performing a GraphQL operation. In addition to a message
 * and stack trace, it also includes information about the locations in a
 * GraphQL document and/or execution result that correspond to the Error.
 */

class GraphQLError extends Error {
  /**
   * An array of `{ line, column }` locations within the source GraphQL document
   * which correspond to this error.
   *
   * Errors during validation often contain multiple locations, for example to
   * point out two things with the same name. Errors during execution include a
   * single location, the field which produced the error.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */

  /**
   * An array describing the JSON-path into the execution response which
   * corresponds to this error. Only included for errors during execution.
   *
   * Enumerable, and appears in the result of JSON.stringify().
   */

  /**
   * An array of GraphQL AST Nodes corresponding to this error.
   */

  /**
   * The source GraphQL document for the first location of this error.
   *
   * Note that if this Error represents more than one node, the source may not
   * represent nodes after the first node.
   */

  /**
   * An array of character offsets within the source GraphQL document
   * which correspond to this error.
   */

  /**
   * The original error thrown from a field resolver during execution.
   */

  /**
   * Extension fields to add to the formatted error.
   */

  /**
   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.
   */
  constructor(message, ...rawArgs) {
    var _this$nodes, _nodeLocations$, _ref;

    const { nodes, source, positions, path, originalError, extensions } =
      toNormalizedOptions(rawArgs);
    super(message);
    this.name = 'GraphQLError';
    this.path = path !== null && path !== void 0 ? path : undefined;
    this.originalError =
      originalError !== null && originalError !== void 0
        ? originalError
        : undefined; // Compute list of blame nodes.

    this.nodes = undefinedIfEmpty(
      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,
    );
    const nodeLocations = undefinedIfEmpty(
      (_this$nodes = this.nodes) === null || _this$nodes === void 0
        ? void 0
        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),
    ); // Compute locations in the source for the given nodes/positions.

    this.source =
      source !== null && source !== void 0
        ? source
        : nodeLocations === null || nodeLocations === void 0
        ? void 0
        : (_nodeLocations$ = nodeLocations[0]) === null ||
          _nodeLocations$ === void 0
        ? void 0
        : _nodeLocations$.source;
    this.positions =
      positions !== null && positions !== void 0
        ? positions
        : nodeLocations === null || nodeLocations === void 0
        ? void 0
        : nodeLocations.map((loc) => loc.start);
    this.locations =
      positions && source
        ? positions.map((pos) => (0,_language_location_mjs__WEBPACK_IMPORTED_MODULE_0__.getLocation)(source, pos))
        : nodeLocations === null || nodeLocations === void 0
        ? void 0
        : nodeLocations.map((loc) => (0,_language_location_mjs__WEBPACK_IMPORTED_MODULE_0__.getLocation)(loc.source, loc.start));
    const originalExtensions = (0,_jsutils_isObjectLike_mjs__WEBPACK_IMPORTED_MODULE_1__.isObjectLike)(
      originalError === null || originalError === void 0
        ? void 0
        : originalError.extensions,
    )
      ? originalError === null || originalError === void 0
        ? void 0
        : originalError.extensions
      : undefined;
    this.extensions =
      (_ref =
        extensions !== null && extensions !== void 0
          ? extensions
          : originalExtensions) !== null && _ref !== void 0
        ? _ref
        : Object.create(null); // Only properties prescribed by the spec should be enumerable.
    // Keep the rest as non-enumerable.

    Object.defineProperties(this, {
      message: {
        writable: true,
        enumerable: true,
      },
      name: {
        enumerable: false,
      },
      nodes: {
        enumerable: false,
      },
      source: {
        enumerable: false,
      },
      positions: {
        enumerable: false,
      },
      originalError: {
        enumerable: false,
      },
    }); // Include (non-enumerable) stack trace.

    /* c8 ignore start */
    // FIXME: https://github.com/graphql/graphql-js/issues/2317

    if (
      originalError !== null &&
      originalError !== void 0 &&
      originalError.stack
    ) {
      Object.defineProperty(this, 'stack', {
        value: originalError.stack,
        writable: true,
        configurable: true,
      });
    } else if (Error.captureStackTrace) {
      Error.captureStackTrace(this, GraphQLError);
    } else {
      Object.defineProperty(this, 'stack', {
        value: Error().stack,
        writable: true,
        configurable: true,
      });
    }
    /* c8 ignore stop */
  }

  get [Symbol.toStringTag]() {
    return 'GraphQLError';
  }

  toString() {
    let output = this.message;

    if (this.nodes) {
      for (const node of this.nodes) {
        if (node.loc) {
          output += '\n\n' + (0,_language_printLocation_mjs__WEBPACK_IMPORTED_MODULE_2__.printLocation)(node.loc);
        }
      }
    } else if (this.source && this.locations) {
      for (const location of this.locations) {
        output += '\n\n' + (0,_language_printLocation_mjs__WEBPACK_IMPORTED_MODULE_2__.printSourceLocation)(this.source, location);
      }
    }

    return output;
  }

  toJSON() {
    const formattedError = {
      message: this.message,
    };

    if (this.locations != null) {
      formattedError.locations = this.locations;
    }

    if (this.path != null) {
      formattedError.path = this.path;
    }

    if (this.extensions != null && Object.keys(this.extensions).length > 0) {
      formattedError.extensions = this.extensions;
    }

    return formattedError;
  }
}

function undefinedIfEmpty(array) {
  return array === undefined || array.length === 0 ? undefined : array;
}
/**
 * See: https://spec.graphql.org/draft/#sec-Errors
 */

/**
 * Prints a GraphQLError to a string, representing useful location information
 * about the error's position in the source.
 *
 * @deprecated Please use `error.toString` instead. Will be removed in v17
 */
function printError(error) {
  return error.toString();
}
/**
 * Given a GraphQLError, format it according to the rules described by the
 * Response Format, Errors section of the GraphQL Specification.
 *
 * @deprecated Please use `error.toJSON` instead. Will be removed in v17
 */

function formatError(error) {
  return error.toJSON();
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/syntaxError.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  syntaxError: () => (syntaxError)
});
/* ESM import */var _GraphQLError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/GraphQLError.mjs");

/**
 * Produces a GraphQLError representing a syntax error, containing useful
 * descriptive information about the syntax error's position in the source.
 */

function syntaxError(source, position, description) {
  return new _GraphQLError_mjs__WEBPACK_IMPORTED_MODULE_0__.GraphQLError(`Syntax Error: ${description}`, {
    source,
    positions: [position],
  });
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/devAssert.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  devAssert: () => (devAssert)
});
function devAssert(condition, message) {
  const booleanCondition = Boolean(condition);

  if (!booleanCondition) {
    throw new Error(message);
  }
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/inspect.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  inspect: () => (inspect)
});
const MAX_ARRAY_LENGTH = 10;
const MAX_RECURSIVE_DEPTH = 2;
/**
 * Used to print values in error messages.
 */

function inspect(value) {
  return formatValue(value, []);
}

function formatValue(value, seenValues) {
  switch (typeof value) {
    case 'string':
      return JSON.stringify(value);

    case 'function':
      return value.name ? `[function ${value.name}]` : '[function]';

    case 'object':
      return formatObjectValue(value, seenValues);

    default:
      return String(value);
  }
}

function formatObjectValue(value, previouslySeenValues) {
  if (value === null) {
    return 'null';
  }

  if (previouslySeenValues.includes(value)) {
    return '[Circular]';
  }

  const seenValues = [...previouslySeenValues, value];

  if (isJSONable(value)) {
    const jsonValue = value.toJSON(); // check for infinite recursion

    if (jsonValue !== value) {
      return typeof jsonValue === 'string'
        ? jsonValue
        : formatValue(jsonValue, seenValues);
    }
  } else if (Array.isArray(value)) {
    return formatArray(value, seenValues);
  }

  return formatObject(value, seenValues);
}

function isJSONable(value) {
  return typeof value.toJSON === 'function';
}

function formatObject(object, seenValues) {
  const entries = Object.entries(object);

  if (entries.length === 0) {
    return '{}';
  }

  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return '[' + getObjectTag(object) + ']';
  }

  const properties = entries.map(
    ([key, value]) => key + ': ' + formatValue(value, seenValues),
  );
  return '{ ' + properties.join(', ') + ' }';
}

function formatArray(array, seenValues) {
  if (array.length === 0) {
    return '[]';
  }

  if (seenValues.length > MAX_RECURSIVE_DEPTH) {
    return '[Array]';
  }

  const len = Math.min(MAX_ARRAY_LENGTH, array.length);
  const remaining = array.length - len;
  const items = [];

  for (let i = 0; i < len; ++i) {
    items.push(formatValue(array[i], seenValues));
  }

  if (remaining === 1) {
    items.push('... 1 more item');
  } else if (remaining > 1) {
    items.push(`... ${remaining} more items`);
  }

  return '[' + items.join(', ') + ']';
}

function getObjectTag(object) {
  const tag = Object.prototype.toString
    .call(object)
    .replace(/^\[object /, '')
    .replace(/]$/, '');

  if (tag === 'Object' && typeof object.constructor === 'function') {
    const name = object.constructor.name;

    if (typeof name === 'string' && name !== '') {
      return name;
    }
  }

  return tag;
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/instanceOf.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  instanceOf: () => (instanceOf)
});
/* ESM import */var _inspect_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/inspect.mjs");

/* c8 ignore next 3 */

const isProduction =
  globalThis.process && // eslint-disable-next-line no-undef
  "development" === 'production';
/**
 * A replacement for instanceof which includes an error warning when multi-realm
 * constructors are detected.
 * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production
 * See: https://webpack.js.org/guides/production/
 */

const instanceOf =
  /* c8 ignore next 6 */
  // FIXME: https://github.com/graphql/graphql-js/issues/2317
  isProduction
    ? function instanceOf(value, constructor) {
        return value instanceof constructor;
      }
    : function instanceOf(value, constructor) {
        if (value instanceof constructor) {
          return true;
        }

        if (typeof value === 'object' && value !== null) {
          var _value$constructor;

          // Prefer Symbol.toStringTag since it is immune to minification.
          const className = constructor.prototype[Symbol.toStringTag];
          const valueClassName = // We still need to support constructor's name to detect conflicts with older versions of this library.
            Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009
              ? value[Symbol.toStringTag]
              : (_value$constructor = value.constructor) === null ||
                _value$constructor === void 0
              ? void 0
              : _value$constructor.name;

          if (className === valueClassName) {
            const stringifiedValue = (0,_inspect_mjs__WEBPACK_IMPORTED_MODULE_0__.inspect)(value);
            throw new Error(`Cannot use ${className} "${stringifiedValue}" from another module or realm.

Ensure that there is only one instance of "graphql" in the node_modules
directory. If different versions of "graphql" are the dependencies of other
relied on modules, use "resolutions" to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate "graphql" modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.`);
          }
        }

        return false;
      };


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/invariant.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  invariant: () => (invariant)
});
function invariant(condition, message) {
  const booleanCondition = Boolean(condition);

  if (!booleanCondition) {
    throw new Error(
      message != null ? message : 'Unexpected invariant triggered.',
    );
  }
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/isObjectLike.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isObjectLike: () => (isObjectLike)
});
/**
 * Return true if `value` is object-like. A value is object-like if it's not
 * `null` and has a `typeof` result of "object".
 */
function isObjectLike(value) {
  return typeof value == 'object' && value !== null;
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/ast.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Location: () => (Location),
  OperationTypeNode: () => (OperationTypeNode),
  QueryDocumentKeys: () => (QueryDocumentKeys),
  Token: () => (Token),
  isNode: () => (isNode)
});
/**
 * Contains a range of UTF-8 character offsets and token references that
 * identify the region of the source from which the AST derived.
 */
class Location {
  /**
   * The character offset at which this Node begins.
   */

  /**
   * The character offset at which this Node ends.
   */

  /**
   * The Token at which this Node begins.
   */

  /**
   * The Token at which this Node ends.
   */

  /**
   * The Source document the AST represents.
   */
  constructor(startToken, endToken, source) {
    this.start = startToken.start;
    this.end = endToken.end;
    this.startToken = startToken;
    this.endToken = endToken;
    this.source = source;
  }

  get [Symbol.toStringTag]() {
    return 'Location';
  }

  toJSON() {
    return {
      start: this.start,
      end: this.end,
    };
  }
}
/**
 * Represents a range of characters represented by a lexical token
 * within a Source.
 */

class Token {
  /**
   * The kind of Token.
   */

  /**
   * The character offset at which this Node begins.
   */

  /**
   * The character offset at which this Node ends.
   */

  /**
   * The 1-indexed line number on which this Token appears.
   */

  /**
   * The 1-indexed column number at which this Token begins.
   */

  /**
   * For non-punctuation tokens, represents the interpreted value of the token.
   *
   * Note: is undefined for punctuation tokens, but typed as string for
   * convenience in the parser.
   */

  /**
   * Tokens exist as nodes in a double-linked-list amongst all tokens
   * including ignored tokens. <SOF> is always the first node and <EOF>
   * the last.
   */
  constructor(kind, start, end, line, column, value) {
    this.kind = kind;
    this.start = start;
    this.end = end;
    this.line = line;
    this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

    this.value = value;
    this.prev = null;
    this.next = null;
  }

  get [Symbol.toStringTag]() {
    return 'Token';
  }

  toJSON() {
    return {
      kind: this.kind,
      value: this.value,
      line: this.line,
      column: this.column,
    };
  }
}
/**
 * The list of all possible AST node types.
 */

/**
 * @internal
 */
const QueryDocumentKeys = {
  Name: [],
  Document: ['definitions'],
  OperationDefinition: [
    'name',
    'variableDefinitions',
    'directives',
    'selectionSet',
  ],
  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],
  Variable: ['name'],
  SelectionSet: ['selections'],
  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],
  Argument: ['name', 'value'],
  FragmentSpread: ['name', 'directives'],
  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],
  FragmentDefinition: [
    'name', // Note: fragment variable definitions are deprecated and will removed in v17.0.0
    'variableDefinitions',
    'typeCondition',
    'directives',
    'selectionSet',
  ],
  IntValue: [],
  FloatValue: [],
  StringValue: [],
  BooleanValue: [],
  NullValue: [],
  EnumValue: [],
  ListValue: ['values'],
  ObjectValue: ['fields'],
  ObjectField: ['name', 'value'],
  Directive: ['name', 'arguments'],
  NamedType: ['name'],
  ListType: ['type'],
  NonNullType: ['type'],
  SchemaDefinition: ['description', 'directives', 'operationTypes'],
  OperationTypeDefinition: ['type'],
  ScalarTypeDefinition: ['description', 'name', 'directives'],
  ObjectTypeDefinition: [
    'description',
    'name',
    'interfaces',
    'directives',
    'fields',
  ],
  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],
  InputValueDefinition: [
    'description',
    'name',
    'type',
    'defaultValue',
    'directives',
  ],
  InterfaceTypeDefinition: [
    'description',
    'name',
    'interfaces',
    'directives',
    'fields',
  ],
  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],
  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],
  EnumValueDefinition: ['description', 'name', 'directives'],
  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],
  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],
  SchemaExtension: ['directives', 'operationTypes'],
  ScalarTypeExtension: ['name', 'directives'],
  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],
  UnionTypeExtension: ['name', 'directives', 'types'],
  EnumTypeExtension: ['name', 'directives', 'values'],
  InputObjectTypeExtension: ['name', 'directives', 'fields'],
};
const kindValues = new Set(Object.keys(QueryDocumentKeys));
/**
 * @internal
 */

function isNode(maybeNode) {
  const maybeKind =
    maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;
  return typeof maybeKind === 'string' && kindValues.has(maybeKind);
}
/** Name */

var OperationTypeNode;

(function (OperationTypeNode) {
  OperationTypeNode['QUERY'] = 'query';
  OperationTypeNode['MUTATION'] = 'mutation';
  OperationTypeNode['SUBSCRIPTION'] = 'subscription';
})(OperationTypeNode || (OperationTypeNode = {}));




}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/blockString.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  dedentBlockStringLines: () => (dedentBlockStringLines),
  isPrintableAsBlockString: () => (isPrintableAsBlockString),
  printBlockString: () => (printBlockString)
});
/* ESM import */var _characterClasses_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/characterClasses.mjs");

/**
 * Produces the value of a block string from its parsed raw value, similar to
 * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.
 *
 * This implements the GraphQL spec's BlockStringValue() static algorithm.
 *
 * @internal
 */

function dedentBlockStringLines(lines) {
  var _firstNonEmptyLine2;

  let commonIndent = Number.MAX_SAFE_INTEGER;
  let firstNonEmptyLine = null;
  let lastNonEmptyLine = -1;

  for (let i = 0; i < lines.length; ++i) {
    var _firstNonEmptyLine;

    const line = lines[i];
    const indent = leadingWhitespace(line);

    if (indent === line.length) {
      continue; // skip empty lines
    }

    firstNonEmptyLine =
      (_firstNonEmptyLine = firstNonEmptyLine) !== null &&
      _firstNonEmptyLine !== void 0
        ? _firstNonEmptyLine
        : i;
    lastNonEmptyLine = i;

    if (i !== 0 && indent < commonIndent) {
      commonIndent = indent;
    }
  }

  return lines // Remove common indentation from all lines but first.
    .map((line, i) => (i === 0 ? line : line.slice(commonIndent))) // Remove leading and trailing blank lines.
    .slice(
      (_firstNonEmptyLine2 = firstNonEmptyLine) !== null &&
        _firstNonEmptyLine2 !== void 0
        ? _firstNonEmptyLine2
        : 0,
      lastNonEmptyLine + 1,
    );
}

function leadingWhitespace(str) {
  let i = 0;

  while (i < str.length && (0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_0__.isWhiteSpace)(str.charCodeAt(i))) {
    ++i;
  }

  return i;
}
/**
 * @internal
 */

function isPrintableAsBlockString(value) {
  if (value === '') {
    return true; // empty string is printable
  }

  let isEmptyLine = true;
  let hasIndent = false;
  let hasCommonIndent = true;
  let seenNonEmptyLine = false;

  for (let i = 0; i < value.length; ++i) {
    switch (value.codePointAt(i)) {
      case 0x0000:
      case 0x0001:
      case 0x0002:
      case 0x0003:
      case 0x0004:
      case 0x0005:
      case 0x0006:
      case 0x0007:
      case 0x0008:
      case 0x000b:
      case 0x000c:
      case 0x000e:
      case 0x000f:
        return false;
      // Has non-printable characters

      case 0x000d:
        //  \r
        return false;
      // Has \r or \r\n which will be replaced as \n

      case 10:
        //  \n
        if (isEmptyLine && !seenNonEmptyLine) {
          return false; // Has leading new line
        }

        seenNonEmptyLine = true;
        isEmptyLine = true;
        hasIndent = false;
        break;

      case 9: //   \t

      case 32:
        //  <space>
        hasIndent || (hasIndent = isEmptyLine);
        break;

      default:
        hasCommonIndent && (hasCommonIndent = hasIndent);
        isEmptyLine = false;
    }
  }

  if (isEmptyLine) {
    return false; // Has trailing empty lines
  }

  if (hasCommonIndent && seenNonEmptyLine) {
    return false; // Has internal indent
  }

  return true;
}
/**
 * Print a block string in the indented block form by adding a leading and
 * trailing blank line. However, if a block string starts with whitespace and is
 * a single-line, adding a leading blank line would strip that whitespace.
 *
 * @internal
 */

function printBlockString(value, options) {
  const escapedValue = value.replace(/"""/g, '\\"""'); // Expand a block string's raw value into independent lines.

  const lines = escapedValue.split(/\r\n|[\n\r]/g);
  const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line

  const forceLeadingNewLine =
    lines.length > 1 &&
    lines
      .slice(1)
      .every((line) => line.length === 0 || (0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_0__.isWhiteSpace)(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line

  const hasTrailingTripleQuotes = escapedValue.endsWith('\\"""'); // Trailing quote (single or double) or slash forces trailing new line

  const hasTrailingQuote = value.endsWith('"') && !hasTrailingTripleQuotes;
  const hasTrailingSlash = value.endsWith('\\');
  const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;
  const printAsMultipleLines =
    !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability
    (!isSingleLine ||
      value.length > 70 ||
      forceTrailingNewline ||
      forceLeadingNewLine ||
      hasTrailingTripleQuotes);
  let result = ''; // Format a multi-line block quote to account for leading space.

  const skipLeadingNewLine = isSingleLine && (0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_0__.isWhiteSpace)(value.charCodeAt(0));

  if ((printAsMultipleLines && !skipLeadingNewLine) || forceLeadingNewLine) {
    result += '\n';
  }

  result += escapedValue;

  if (printAsMultipleLines || forceTrailingNewline) {
    result += '\n';
  }

  return '"""' + result + '"""';
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/characterClasses.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  isDigit: () => (isDigit),
  isLetter: () => (isLetter),
  isNameContinue: () => (isNameContinue),
  isNameStart: () => (isNameStart),
  isWhiteSpace: () => (isWhiteSpace)
});
/**
 * ```
 * WhiteSpace ::
 *   - "Horizontal Tab (U+0009)"
 *   - "Space (U+0020)"
 * ```
 * @internal
 */
function isWhiteSpace(code) {
  return code === 0x0009 || code === 0x0020;
}
/**
 * ```
 * Digit :: one of
 *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`
 * ```
 * @internal
 */

function isDigit(code) {
  return code >= 0x0030 && code <= 0x0039;
}
/**
 * ```
 * Letter :: one of
 *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`
 *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`
 *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`
 *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`
 * ```
 * @internal
 */

function isLetter(code) {
  return (
    (code >= 0x0061 && code <= 0x007a) || // A-Z
    (code >= 0x0041 && code <= 0x005a) // a-z
  );
}
/**
 * ```
 * NameStart ::
 *   - Letter
 *   - `_`
 * ```
 * @internal
 */

function isNameStart(code) {
  return isLetter(code) || code === 0x005f;
}
/**
 * ```
 * NameContinue ::
 *   - Letter
 *   - Digit
 *   - `_`
 * ```
 * @internal
 */

function isNameContinue(code) {
  return isLetter(code) || isDigit(code) || code === 0x005f;
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/directiveLocation.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  DirectiveLocation: () => (DirectiveLocation)
});
/**
 * The set of allowed directive location values.
 */
var DirectiveLocation;

(function (DirectiveLocation) {
  DirectiveLocation['QUERY'] = 'QUERY';
  DirectiveLocation['MUTATION'] = 'MUTATION';
  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';
  DirectiveLocation['FIELD'] = 'FIELD';
  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';
  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';
  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';
  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';
  DirectiveLocation['SCHEMA'] = 'SCHEMA';
  DirectiveLocation['SCALAR'] = 'SCALAR';
  DirectiveLocation['OBJECT'] = 'OBJECT';
  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';
  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';
  DirectiveLocation['INTERFACE'] = 'INTERFACE';
  DirectiveLocation['UNION'] = 'UNION';
  DirectiveLocation['ENUM'] = 'ENUM';
  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';
  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';
  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';
})(DirectiveLocation || (DirectiveLocation = {}));


/**
 * The enum type representing the directive location values.
 *
 * @deprecated Please use `DirectiveLocation`. Will be remove in v17.
 */


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Kind: () => (Kind)
});
/**
 * The set of allowed kind values for AST nodes.
 */
var Kind;

(function (Kind) {
  Kind['NAME'] = 'Name';
  Kind['DOCUMENT'] = 'Document';
  Kind['OPERATION_DEFINITION'] = 'OperationDefinition';
  Kind['VARIABLE_DEFINITION'] = 'VariableDefinition';
  Kind['SELECTION_SET'] = 'SelectionSet';
  Kind['FIELD'] = 'Field';
  Kind['ARGUMENT'] = 'Argument';
  Kind['FRAGMENT_SPREAD'] = 'FragmentSpread';
  Kind['INLINE_FRAGMENT'] = 'InlineFragment';
  Kind['FRAGMENT_DEFINITION'] = 'FragmentDefinition';
  Kind['VARIABLE'] = 'Variable';
  Kind['INT'] = 'IntValue';
  Kind['FLOAT'] = 'FloatValue';
  Kind['STRING'] = 'StringValue';
  Kind['BOOLEAN'] = 'BooleanValue';
  Kind['NULL'] = 'NullValue';
  Kind['ENUM'] = 'EnumValue';
  Kind['LIST'] = 'ListValue';
  Kind['OBJECT'] = 'ObjectValue';
  Kind['OBJECT_FIELD'] = 'ObjectField';
  Kind['DIRECTIVE'] = 'Directive';
  Kind['NAMED_TYPE'] = 'NamedType';
  Kind['LIST_TYPE'] = 'ListType';
  Kind['NON_NULL_TYPE'] = 'NonNullType';
  Kind['SCHEMA_DEFINITION'] = 'SchemaDefinition';
  Kind['OPERATION_TYPE_DEFINITION'] = 'OperationTypeDefinition';
  Kind['SCALAR_TYPE_DEFINITION'] = 'ScalarTypeDefinition';
  Kind['OBJECT_TYPE_DEFINITION'] = 'ObjectTypeDefinition';
  Kind['FIELD_DEFINITION'] = 'FieldDefinition';
  Kind['INPUT_VALUE_DEFINITION'] = 'InputValueDefinition';
  Kind['INTERFACE_TYPE_DEFINITION'] = 'InterfaceTypeDefinition';
  Kind['UNION_TYPE_DEFINITION'] = 'UnionTypeDefinition';
  Kind['ENUM_TYPE_DEFINITION'] = 'EnumTypeDefinition';
  Kind['ENUM_VALUE_DEFINITION'] = 'EnumValueDefinition';
  Kind['INPUT_OBJECT_TYPE_DEFINITION'] = 'InputObjectTypeDefinition';
  Kind['DIRECTIVE_DEFINITION'] = 'DirectiveDefinition';
  Kind['SCHEMA_EXTENSION'] = 'SchemaExtension';
  Kind['SCALAR_TYPE_EXTENSION'] = 'ScalarTypeExtension';
  Kind['OBJECT_TYPE_EXTENSION'] = 'ObjectTypeExtension';
  Kind['INTERFACE_TYPE_EXTENSION'] = 'InterfaceTypeExtension';
  Kind['UNION_TYPE_EXTENSION'] = 'UnionTypeExtension';
  Kind['ENUM_TYPE_EXTENSION'] = 'EnumTypeExtension';
  Kind['INPUT_OBJECT_TYPE_EXTENSION'] = 'InputObjectTypeExtension';
})(Kind || (Kind = {}));


/**
 * The enum type representing the possible kind values of AST nodes.
 *
 * @deprecated Please use `Kind`. Will be remove in v17.
 */


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/lexer.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Lexer: () => (Lexer),
  isPunctuatorTokenKind: () => (isPunctuatorTokenKind)
});
/* ESM import */var _error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/syntaxError.mjs");
/* ESM import */var _ast_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/ast.mjs");
/* ESM import */var _blockString_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/blockString.mjs");
/* ESM import */var _characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/characterClasses.mjs");
/* ESM import */var _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/tokenKind.mjs");





/**
 * Given a Source object, creates a Lexer for that source.
 * A Lexer is a stateful stream generator in that every time
 * it is advanced, it returns the next token in the Source. Assuming the
 * source lexes, the final Token emitted by the lexer will be of kind
 * EOF, after which the lexer will repeatedly return the same EOF token
 * whenever called.
 */

class Lexer {
  /**
   * The previously focused non-ignored token.
   */

  /**
   * The currently focused non-ignored token.
   */

  /**
   * The (1-indexed) line containing the current token.
   */

  /**
   * The character offset at which the current line begins.
   */
  constructor(source) {
    const startOfFileToken = new _ast_mjs__WEBPACK_IMPORTED_MODULE_0__.Token(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.SOF, 0, 0, 0, 0);
    this.source = source;
    this.lastToken = startOfFileToken;
    this.token = startOfFileToken;
    this.line = 1;
    this.lineStart = 0;
  }

  get [Symbol.toStringTag]() {
    return 'Lexer';
  }
  /**
   * Advances the token stream to the next non-ignored token.
   */

  advance() {
    this.lastToken = this.token;
    const token = (this.token = this.lookahead());
    return token;
  }
  /**
   * Looks ahead and returns the next non-ignored token, but does not change
   * the state of Lexer.
   */

  lookahead() {
    let token = this.token;

    if (token.kind !== _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EOF) {
      do {
        if (token.next) {
          token = token.next;
        } else {
          // Read the next token and form a link in the token linked-list.
          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.

          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.

          nextToken.prev = token;
          token = nextToken;
        }
      } while (token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.COMMENT);
    }

    return token;
  }
}
/**
 * @internal
 */

function isPunctuatorTokenKind(kind) {
  return (
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BANG ||
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.DOLLAR ||
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.AMP ||
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PAREN_L ||
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PAREN_R ||
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.SPREAD ||
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.COLON ||
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EQUALS ||
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.AT ||
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACKET_L ||
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACKET_R ||
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACE_L ||
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PIPE ||
    kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACE_R
  );
}
/**
 * A Unicode scalar value is any Unicode code point except surrogate code
 * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and
 * 0xE000 to 0x10FFFF.
 *
 * SourceCharacter ::
 *   - "Any Unicode scalar value"
 */

function isUnicodeScalarValue(code) {
  return (
    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)
  );
}
/**
 * The GraphQL specification defines source text as a sequence of unicode scalar
 * values (which Unicode defines to exclude surrogate code points). However
 * JavaScript defines strings as a sequence of UTF-16 code units which may
 * include surrogates. A surrogate pair is a valid source character as it
 * encodes a supplementary code point (above U+FFFF), but unpaired surrogate
 * code points are not valid source characters.
 */

function isSupplementaryCodePoint(body, location) {
  return (
    isLeadingSurrogate(body.charCodeAt(location)) &&
    isTrailingSurrogate(body.charCodeAt(location + 1))
  );
}

function isLeadingSurrogate(code) {
  return code >= 0xd800 && code <= 0xdbff;
}

function isTrailingSurrogate(code) {
  return code >= 0xdc00 && code <= 0xdfff;
}
/**
 * Prints the code point (or end of file reference) at a given location in a
 * source for use in error messages.
 *
 * Printable ASCII is printed quoted, while other points are printed in Unicode
 * code point form (ie. U+1234).
 */

function printCodePointAt(lexer, location) {
  const code = lexer.source.body.codePointAt(location);

  if (code === undefined) {
    return _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EOF;
  } else if (code >= 0x0020 && code <= 0x007e) {
    // Printable ASCII
    const char = String.fromCodePoint(code);
    return char === '"' ? "'\"'" : `"${char}"`;
  } // Unicode code point

  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');
}
/**
 * Create a token with line and column location information.
 */

function createToken(lexer, kind, start, end, value) {
  const line = lexer.line;
  const col = 1 + start - lexer.lineStart;
  return new _ast_mjs__WEBPACK_IMPORTED_MODULE_0__.Token(kind, start, end, line, col, value);
}
/**
 * Gets the next token from the source starting at the given position.
 *
 * This skips over whitespace until it finds the next lexable token, then lexes
 * punctuators immediately or calls the appropriate helper function for more
 * complicated tokens.
 */

function readNextToken(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start;

  while (position < bodyLength) {
    const code = body.charCodeAt(position); // SourceCharacter

    switch (code) {
      // Ignored ::
      //   - UnicodeBOM
      //   - WhiteSpace
      //   - LineTerminator
      //   - Comment
      //   - Comma
      //
      // UnicodeBOM :: "Byte Order Mark (U+FEFF)"
      //
      // WhiteSpace ::
      //   - "Horizontal Tab (U+0009)"
      //   - "Space (U+0020)"
      //
      // Comma :: ,
      case 0xfeff: // <BOM>

      case 0x0009: // \t

      case 0x0020: // <space>

      case 0x002c:
        // ,
        ++position;
        continue;
      // LineTerminator ::
      //   - "New Line (U+000A)"
      //   - "Carriage Return (U+000D)" [lookahead != "New Line (U+000A)"]
      //   - "Carriage Return (U+000D)" "New Line (U+000A)"

      case 0x000a:
        // \n
        ++position;
        ++lexer.line;
        lexer.lineStart = position;
        continue;

      case 0x000d:
        // \r
        if (body.charCodeAt(position + 1) === 0x000a) {
          position += 2;
        } else {
          ++position;
        }

        ++lexer.line;
        lexer.lineStart = position;
        continue;
      // Comment

      case 0x0023:
        // #
        return readComment(lexer, position);
      // Token ::
      //   - Punctuator
      //   - Name
      //   - IntValue
      //   - FloatValue
      //   - StringValue
      //
      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }

      case 0x0021:
        // !
        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BANG, position, position + 1);

      case 0x0024:
        // $
        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.DOLLAR, position, position + 1);

      case 0x0026:
        // &
        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.AMP, position, position + 1);

      case 0x0028:
        // (
        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PAREN_L, position, position + 1);

      case 0x0029:
        // )
        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PAREN_R, position, position + 1);

      case 0x002e:
        // .
        if (
          body.charCodeAt(position + 1) === 0x002e &&
          body.charCodeAt(position + 2) === 0x002e
        ) {
          return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.SPREAD, position, position + 3);
        }

        break;

      case 0x003a:
        // :
        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.COLON, position, position + 1);

      case 0x003d:
        // =
        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EQUALS, position, position + 1);

      case 0x0040:
        // @
        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.AT, position, position + 1);

      case 0x005b:
        // [
        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACKET_L, position, position + 1);

      case 0x005d:
        // ]
        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACKET_R, position, position + 1);

      case 0x007b:
        // {
        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACE_L, position, position + 1);

      case 0x007c:
        // |
        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PIPE, position, position + 1);

      case 0x007d:
        // }
        return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACE_R, position, position + 1);
      // StringValue

      case 0x0022:
        // "
        if (
          body.charCodeAt(position + 1) === 0x0022 &&
          body.charCodeAt(position + 2) === 0x0022
        ) {
          return readBlockString(lexer, position);
        }

        return readString(lexer, position);
    } // IntValue | FloatValue (Digit | -)

    if ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isDigit)(code) || code === 0x002d) {
      return readNumber(lexer, position, code);
    } // Name

    if ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isNameStart)(code)) {
      return readName(lexer, position);
    }

    throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(
      lexer.source,
      position,
      code === 0x0027
        ? 'Unexpected single quote character (\'), did you mean to use a double quote (")?'
        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)
        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`
        : `Invalid character: ${printCodePointAt(lexer, position)}.`,
    );
  }

  return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EOF, bodyLength, bodyLength);
}
/**
 * Reads a comment token from the source file.
 *
 * ```
 * Comment :: # CommentChar* [lookahead != CommentChar]
 *
 * CommentChar :: SourceCharacter but not LineTerminator
 * ```
 */

function readComment(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;

  while (position < bodyLength) {
    const code = body.charCodeAt(position); // LineTerminator (\n | \r)

    if (code === 0x000a || code === 0x000d) {
      break;
    } // SourceCharacter

    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      break;
    }
  }

  return createToken(
    lexer,
    _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.COMMENT,
    start,
    position,
    body.slice(start + 1, position),
  );
}
/**
 * Reads a number token from the source file, either a FloatValue or an IntValue
 * depending on whether a FractionalPart or ExponentPart is encountered.
 *
 * ```
 * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]
 *
 * IntegerPart ::
 *   - NegativeSign? 0
 *   - NegativeSign? NonZeroDigit Digit*
 *
 * NegativeSign :: -
 *
 * NonZeroDigit :: Digit but not `0`
 *
 * FloatValue ::
 *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]
 *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]
 *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]
 *
 * FractionalPart :: . Digit+
 *
 * ExponentPart :: ExponentIndicator Sign? Digit+
 *
 * ExponentIndicator :: one of `e` `E`
 *
 * Sign :: one of + -
 * ```
 */

function readNumber(lexer, start, firstCode) {
  const body = lexer.source.body;
  let position = start;
  let code = firstCode;
  let isFloat = false; // NegativeSign (-)

  if (code === 0x002d) {
    code = body.charCodeAt(++position);
  } // Zero (0)

  if (code === 0x0030) {
    code = body.charCodeAt(++position);

    if ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isDigit)(code)) {
      throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(
        lexer.source,
        position,
        `Invalid number, unexpected digit after 0: ${printCodePointAt(
          lexer,
          position,
        )}.`,
      );
    }
  } else {
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  } // Full stop (.)

  if (code === 0x002e) {
    isFloat = true;
    code = body.charCodeAt(++position);
    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  } // E e

  if (code === 0x0045 || code === 0x0065) {
    isFloat = true;
    code = body.charCodeAt(++position); // + -

    if (code === 0x002b || code === 0x002d) {
      code = body.charCodeAt(++position);
    }

    position = readDigits(lexer, position, code);
    code = body.charCodeAt(position);
  } // Numbers cannot be followed by . or NameStart

  if (code === 0x002e || (0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isNameStart)(code)) {
    throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(
      lexer.source,
      position,
      `Invalid number, expected digit but got: ${printCodePointAt(
        lexer,
        position,
      )}.`,
    );
  }

  return createToken(
    lexer,
    isFloat ? _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.FLOAT : _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.INT,
    start,
    position,
    body.slice(start, position),
  );
}
/**
 * Returns the new position in the source after reading one or more digits.
 */

function readDigits(lexer, start, firstCode) {
  if (!(0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isDigit)(firstCode)) {
    throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(
      lexer.source,
      start,
      `Invalid number, expected digit but got: ${printCodePointAt(
        lexer,
        start,
      )}.`,
    );
  }

  const body = lexer.source.body;
  let position = start + 1; // +1 to skip first firstCode

  while ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isDigit)(body.charCodeAt(position))) {
    ++position;
  }

  return position;
}
/**
 * Reads a single-quote string token from the source file.
 *
 * ```
 * StringValue ::
 *   - `""` [lookahead != `"`]
 *   - `"` StringCharacter+ `"`
 *
 * StringCharacter ::
 *   - SourceCharacter but not `"` or `\` or LineTerminator
 *   - `\u` EscapedUnicode
 *   - `\` EscapedCharacter
 *
 * EscapedUnicode ::
 *   - `{` HexDigit+ `}`
 *   - HexDigit HexDigit HexDigit HexDigit
 *
 * EscapedCharacter :: one of `"` `\` `/` `b` `f` `n` `r` `t`
 * ```
 */

function readString(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;
  let chunkStart = position;
  let value = '';

  while (position < bodyLength) {
    const code = body.charCodeAt(position); // Closing Quote (")

    if (code === 0x0022) {
      value += body.slice(chunkStart, position);
      return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.STRING, start, position + 1, value);
    } // Escape Sequence (\)

    if (code === 0x005c) {
      value += body.slice(chunkStart, position);
      const escape =
        body.charCodeAt(position + 1) === 0x0075 // u
          ? body.charCodeAt(position + 2) === 0x007b // {
            ? readEscapedUnicodeVariableWidth(lexer, position)
            : readEscapedUnicodeFixedWidth(lexer, position)
          : readEscapedCharacter(lexer, position);
      value += escape.value;
      position += escape.size;
      chunkStart = position;
      continue;
    } // LineTerminator (\n | \r)

    if (code === 0x000a || code === 0x000d) {
      break;
    } // SourceCharacter

    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(
        lexer.source,
        position,
        `Invalid character within String: ${printCodePointAt(
          lexer,
          position,
        )}.`,
      );
    }
  }

  throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, 'Unterminated string.');
} // The string value and lexed size of an escape sequence.

function readEscapedUnicodeVariableWidth(lexer, position) {
  const body = lexer.source.body;
  let point = 0;
  let size = 3; // Cannot be larger than 12 chars (\u{00000000}).

  while (size < 12) {
    const code = body.charCodeAt(position + size++); // Closing Brace (})

    if (code === 0x007d) {
      // Must be at least 5 chars (\u{0}) and encode a Unicode scalar value.
      if (size < 5 || !isUnicodeScalarValue(point)) {
        break;
      }

      return {
        value: String.fromCodePoint(point),
        size,
      };
    } // Append this hex digit to the code point.

    point = (point << 4) | readHexDigit(code);

    if (point < 0) {
      break;
    }
  }

  throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(
    lexer.source,
    position,
    `Invalid Unicode escape sequence: "${body.slice(
      position,
      position + size,
    )}".`,
  );
}

function readEscapedUnicodeFixedWidth(lexer, position) {
  const body = lexer.source.body;
  const code = read16BitHexCode(body, position + 2);

  if (isUnicodeScalarValue(code)) {
    return {
      value: String.fromCodePoint(code),
      size: 6,
    };
  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when
  // a valid pair is formed.

  if (isLeadingSurrogate(code)) {
    // \u
    if (
      body.charCodeAt(position + 6) === 0x005c &&
      body.charCodeAt(position + 7) === 0x0075
    ) {
      const trailingCode = read16BitHexCode(body, position + 8);

      if (isTrailingSurrogate(trailingCode)) {
        // JavaScript defines strings as a sequence of UTF-16 code units and
        // encodes Unicode code points above U+FFFF using a surrogate pair of
        // code units. Since this is a surrogate pair escape sequence, just
        // include both codes into the JavaScript string value. Had JavaScript
        // not been internally based on UTF-16, then this surrogate pair would
        // be decoded to retrieve the supplementary code point.
        return {
          value: String.fromCodePoint(code, trailingCode),
          size: 12,
        };
      }
    }
  }

  throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(
    lexer.source,
    position,
    `Invalid Unicode escape sequence: "${body.slice(position, position + 6)}".`,
  );
}
/**
 * Reads four hexadecimal characters and returns the positive integer that 16bit
 * hexadecimal string represents. For example, "000f" will return 15, and "dead"
 * will return 57005.
 *
 * Returns a negative number if any char was not a valid hexadecimal digit.
 */

function read16BitHexCode(body, position) {
  // readHexDigit() returns -1 on error. ORing a negative value with any other
  // value always produces a negative value.
  return (
    (readHexDigit(body.charCodeAt(position)) << 12) |
    (readHexDigit(body.charCodeAt(position + 1)) << 8) |
    (readHexDigit(body.charCodeAt(position + 2)) << 4) |
    readHexDigit(body.charCodeAt(position + 3))
  );
}
/**
 * Reads a hexadecimal character and returns its positive integer value (0-15).
 *
 * '0' becomes 0, '9' becomes 9
 * 'A' becomes 10, 'F' becomes 15
 * 'a' becomes 10, 'f' becomes 15
 *
 * Returns -1 if the provided character code was not a valid hexadecimal digit.
 *
 * HexDigit :: one of
 *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`
 *   - `A` `B` `C` `D` `E` `F`
 *   - `a` `b` `c` `d` `e` `f`
 */

function readHexDigit(code) {
  return code >= 0x0030 && code <= 0x0039 // 0-9
    ? code - 0x0030
    : code >= 0x0041 && code <= 0x0046 // A-F
    ? code - 0x0037
    : code >= 0x0061 && code <= 0x0066 // a-f
    ? code - 0x0057
    : -1;
}
/**
 * | Escaped Character | Code Point | Character Name               |
 * | ----------------- | ---------- | ---------------------------- |
 * | `"`               | U+0022     | double quote                 |
 * | `\`               | U+005C     | reverse solidus (back slash) |
 * | `/`               | U+002F     | solidus (forward slash)      |
 * | `b`               | U+0008     | backspace                    |
 * | `f`               | U+000C     | form feed                    |
 * | `n`               | U+000A     | line feed (new line)         |
 * | `r`               | U+000D     | carriage return              |
 * | `t`               | U+0009     | horizontal tab               |
 */

function readEscapedCharacter(lexer, position) {
  const body = lexer.source.body;
  const code = body.charCodeAt(position + 1);

  switch (code) {
    case 0x0022:
      // "
      return {
        value: '\u0022',
        size: 2,
      };

    case 0x005c:
      // \
      return {
        value: '\u005c',
        size: 2,
      };

    case 0x002f:
      // /
      return {
        value: '\u002f',
        size: 2,
      };

    case 0x0062:
      // b
      return {
        value: '\u0008',
        size: 2,
      };

    case 0x0066:
      // f
      return {
        value: '\u000c',
        size: 2,
      };

    case 0x006e:
      // n
      return {
        value: '\u000a',
        size: 2,
      };

    case 0x0072:
      // r
      return {
        value: '\u000d',
        size: 2,
      };

    case 0x0074:
      // t
      return {
        value: '\u0009',
        size: 2,
      };
  }

  throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(
    lexer.source,
    position,
    `Invalid character escape sequence: "${body.slice(
      position,
      position + 2,
    )}".`,
  );
}
/**
 * Reads a block string token from the source file.
 *
 * ```
 * StringValue ::
 *   - `"""` BlockStringCharacter* `"""`
 *
 * BlockStringCharacter ::
 *   - SourceCharacter but not `"""` or `\"""`
 *   - `\"""`
 * ```
 */

function readBlockString(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let lineStart = lexer.lineStart;
  let position = start + 3;
  let chunkStart = position;
  let currentLine = '';
  const blockLines = [];

  while (position < bodyLength) {
    const code = body.charCodeAt(position); // Closing Triple-Quote (""")

    if (
      code === 0x0022 &&
      body.charCodeAt(position + 1) === 0x0022 &&
      body.charCodeAt(position + 2) === 0x0022
    ) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);
      const token = createToken(
        lexer,
        _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BLOCK_STRING,
        start,
        position + 3, // Return a string of the lines joined with U+000A.
        (0,_blockString_mjs__WEBPACK_IMPORTED_MODULE_4__.dedentBlockStringLines)(blockLines).join('\n'),
      );
      lexer.line += blockLines.length - 1;
      lexer.lineStart = lineStart;
      return token;
    } // Escaped Triple-Quote (\""")

    if (
      code === 0x005c &&
      body.charCodeAt(position + 1) === 0x0022 &&
      body.charCodeAt(position + 2) === 0x0022 &&
      body.charCodeAt(position + 3) === 0x0022
    ) {
      currentLine += body.slice(chunkStart, position);
      chunkStart = position + 1; // skip only slash

      position += 4;
      continue;
    } // LineTerminator

    if (code === 0x000a || code === 0x000d) {
      currentLine += body.slice(chunkStart, position);
      blockLines.push(currentLine);

      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {
        position += 2;
      } else {
        ++position;
      }

      currentLine = '';
      chunkStart = position;
      lineStart = position;
      continue;
    } // SourceCharacter

    if (isUnicodeScalarValue(code)) {
      ++position;
    } else if (isSupplementaryCodePoint(body, position)) {
      position += 2;
    } else {
      throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(
        lexer.source,
        position,
        `Invalid character within String: ${printCodePointAt(
          lexer,
          position,
        )}.`,
      );
    }
  }

  throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, 'Unterminated string.');
}
/**
 * Reads an alphanumeric + underscore name from the source.
 *
 * ```
 * Name ::
 *   - NameStart NameContinue* [lookahead != NameContinue]
 * ```
 */

function readName(lexer, start) {
  const body = lexer.source.body;
  const bodyLength = body.length;
  let position = start + 1;

  while (position < bodyLength) {
    const code = body.charCodeAt(position);

    if ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isNameContinue)(code)) {
      ++position;
    } else {
      break;
    }
  }

  return createToken(
    lexer,
    _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.NAME,
    start,
    position,
    body.slice(start, position),
  );
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/location.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  getLocation: () => (getLocation)
});
/* ESM import */var _jsutils_invariant_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/invariant.mjs");

const LineRegExp = /\r\n|[\n\r]/g;
/**
 * Represents a location in a Source.
 */

/**
 * Takes a Source and a UTF-8 character offset, and returns the corresponding
 * line and column as a SourceLocation.
 */
function getLocation(source, position) {
  let lastLineStart = 0;
  let line = 1;

  for (const match of source.body.matchAll(LineRegExp)) {
    typeof match.index === 'number' || (0,_jsutils_invariant_mjs__WEBPACK_IMPORTED_MODULE_0__.invariant)(false);

    if (match.index >= position) {
      break;
    }

    lastLineStart = match.index + match[0].length;
    line += 1;
  }

  return {
    line,
    column: position + 1 - lastLineStart,
  };
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/parser.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Parser: () => (Parser),
  parse: () => (parse),
  parseConstValue: () => (parseConstValue),
  parseType: () => (parseType),
  parseValue: () => (parseValue)
});
/* ESM import */var _error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/error/syntaxError.mjs");
/* ESM import */var _ast_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/ast.mjs");
/* ESM import */var _directiveLocation_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/directiveLocation.mjs");
/* ESM import */var _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs");
/* ESM import */var _lexer_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/lexer.mjs");
/* ESM import */var _source_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/source.mjs");
/* ESM import */var _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/tokenKind.mjs");







/**
 * Configuration options to control parser behavior
 */

/**
 * Given a GraphQL source, parses it into a Document.
 * Throws GraphQLError if a syntax error is encountered.
 */
function parse(source, options) {
  const parser = new Parser(source, options);
  const document = parser.parseDocument();
  Object.defineProperty(document, 'tokenCount', {
    enumerable: false,
    value: parser.tokenCount,
  });
  return document;
}
/**
 * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for
 * that value.
 * Throws GraphQLError if a syntax error is encountered.
 *
 * This is useful within tools that operate upon GraphQL Values directly and
 * in isolation of complete GraphQL documents.
 *
 * Consider providing the results to the utility function: valueFromAST().
 */

function parseValue(source, options) {
  const parser = new Parser(source, options);
  parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SOF);
  const value = parser.parseValueLiteral(false);
  parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF);
  return value;
}
/**
 * Similar to parseValue(), but raises a parse error if it encounters a
 * variable. The return type will be a constant value.
 */

function parseConstValue(source, options) {
  const parser = new Parser(source, options);
  parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SOF);
  const value = parser.parseConstValueLiteral();
  parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF);
  return value;
}
/**
 * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for
 * that type.
 * Throws GraphQLError if a syntax error is encountered.
 *
 * This is useful within tools that operate upon GraphQL Types directly and
 * in isolation of complete GraphQL documents.
 *
 * Consider providing the results to the utility function: typeFromAST().
 */

function parseType(source, options) {
  const parser = new Parser(source, options);
  parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SOF);
  const type = parser.parseTypeReference();
  parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF);
  return type;
}
/**
 * This class is exported only to assist people in implementing their own parsers
 * without duplicating too much code and should be used only as last resort for cases
 * such as experimental syntax or if certain features could not be contributed upstream.
 *
 * It is still part of the internal API and is versioned, so any changes to it are never
 * considered breaking changes. If you still need to support multiple versions of the
 * library, please use the `versionInfo` variable for version detection.
 *
 * @internal
 */

class Parser {
  constructor(source, options = {}) {
    const sourceObj = (0,_source_mjs__WEBPACK_IMPORTED_MODULE_1__.isSource)(source) ? source : new _source_mjs__WEBPACK_IMPORTED_MODULE_1__.Source(source);
    this._lexer = new _lexer_mjs__WEBPACK_IMPORTED_MODULE_2__.Lexer(sourceObj);
    this._options = options;
    this._tokenCounter = 0;
  }

  get tokenCount() {
    return this._tokenCounter;
  }
  /**
   * Converts a name lex token into a name parse node.
   */

  parseName() {
    const token = this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME);
    return this.node(token, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.NAME,
      value: token.value,
    });
  } // Implements the parsing rules in the Document section.

  /**
   * Document : Definition+
   */

  parseDocument() {
    return this.node(this._lexer.token, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.DOCUMENT,
      definitions: this.many(
        _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SOF,
        this.parseDefinition,
        _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF,
      ),
    });
  }
  /**
   * Definition :
   *   - ExecutableDefinition
   *   - TypeSystemDefinition
   *   - TypeSystemExtension
   *
   * ExecutableDefinition :
   *   - OperationDefinition
   *   - FragmentDefinition
   *
   * TypeSystemDefinition :
   *   - SchemaDefinition
   *   - TypeDefinition
   *   - DirectiveDefinition
   *
   * TypeDefinition :
   *   - ScalarTypeDefinition
   *   - ObjectTypeDefinition
   *   - InterfaceTypeDefinition
   *   - UnionTypeDefinition
   *   - EnumTypeDefinition
   *   - InputObjectTypeDefinition
   */

  parseDefinition() {
    if (this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L)) {
      return this.parseOperationDefinition();
    } // Many definitions begin with a description and require a lookahead.

    const hasDescription = this.peekDescription();
    const keywordToken = hasDescription
      ? this._lexer.lookahead()
      : this._lexer.token;

    if (keywordToken.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME) {
      switch (keywordToken.value) {
        case 'schema':
          return this.parseSchemaDefinition();

        case 'scalar':
          return this.parseScalarTypeDefinition();

        case 'type':
          return this.parseObjectTypeDefinition();

        case 'interface':
          return this.parseInterfaceTypeDefinition();

        case 'union':
          return this.parseUnionTypeDefinition();

        case 'enum':
          return this.parseEnumTypeDefinition();

        case 'input':
          return this.parseInputObjectTypeDefinition();

        case 'directive':
          return this.parseDirectiveDefinition();
      }

      if (hasDescription) {
        throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(
          this._lexer.source,
          this._lexer.token.start,
          'Unexpected description, descriptions are supported only on type definitions.',
        );
      }

      switch (keywordToken.value) {
        case 'query':
        case 'mutation':
        case 'subscription':
          return this.parseOperationDefinition();

        case 'fragment':
          return this.parseFragmentDefinition();

        case 'extend':
          return this.parseTypeSystemExtension();
      }
    }

    throw this.unexpected(keywordToken);
  } // Implements the parsing rules in the Operations section.

  /**
   * OperationDefinition :
   *  - SelectionSet
   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet
   */

  parseOperationDefinition() {
    const start = this._lexer.token;

    if (this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L)) {
      return this.node(start, {
        kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OPERATION_DEFINITION,
        operation: _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.OperationTypeNode.QUERY,
        name: undefined,
        variableDefinitions: [],
        directives: [],
        selectionSet: this.parseSelectionSet(),
      });
    }

    const operation = this.parseOperationType();
    let name;

    if (this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME)) {
      name = this.parseName();
    }

    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OPERATION_DEFINITION,
      operation,
      name,
      variableDefinitions: this.parseVariableDefinitions(),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
    });
  }
  /**
   * OperationType : one of query mutation subscription
   */

  parseOperationType() {
    const operationToken = this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME);

    switch (operationToken.value) {
      case 'query':
        return _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.OperationTypeNode.QUERY;

      case 'mutation':
        return _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.OperationTypeNode.MUTATION;

      case 'subscription':
        return _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.OperationTypeNode.SUBSCRIPTION;
    }

    throw this.unexpected(operationToken);
  }
  /**
   * VariableDefinitions : ( VariableDefinition+ )
   */

  parseVariableDefinitions() {
    return this.optionalMany(
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_L,
      this.parseVariableDefinition,
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_R,
    );
  }
  /**
   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?
   */

  parseVariableDefinition() {
    return this.node(this._lexer.token, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.VARIABLE_DEFINITION,
      variable: this.parseVariable(),
      type: (this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON), this.parseTypeReference()),
      defaultValue: this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EQUALS)
        ? this.parseConstValueLiteral()
        : undefined,
      directives: this.parseConstDirectives(),
    });
  }
  /**
   * Variable : $ Name
   */

  parseVariable() {
    const start = this._lexer.token;
    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.DOLLAR);
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.VARIABLE,
      name: this.parseName(),
    });
  }
  /**
   * ```
   * SelectionSet : { Selection+ }
   * ```
   */

  parseSelectionSet() {
    return this.node(this._lexer.token, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SELECTION_SET,
      selections: this.many(
        _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L,
        this.parseSelection,
        _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R,
      ),
    });
  }
  /**
   * Selection :
   *   - Field
   *   - FragmentSpread
   *   - InlineFragment
   */

  parseSelection() {
    return this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SPREAD)
      ? this.parseFragment()
      : this.parseField();
  }
  /**
   * Field : Alias? Name Arguments? Directives? SelectionSet?
   *
   * Alias : Name :
   */

  parseField() {
    const start = this._lexer.token;
    const nameOrAlias = this.parseName();
    let alias;
    let name;

    if (this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON)) {
      alias = nameOrAlias;
      name = this.parseName();
    } else {
      name = nameOrAlias;
    }

    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FIELD,
      alias,
      name,
      arguments: this.parseArguments(false),
      directives: this.parseDirectives(false),
      selectionSet: this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L)
        ? this.parseSelectionSet()
        : undefined,
    });
  }
  /**
   * Arguments[Const] : ( Argument[?Const]+ )
   */

  parseArguments(isConst) {
    const item = isConst ? this.parseConstArgument : this.parseArgument;
    return this.optionalMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_L, item, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_R);
  }
  /**
   * Argument[Const] : Name : Value[?Const]
   */

  parseArgument(isConst = false) {
    const start = this._lexer.token;
    const name = this.parseName();
    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ARGUMENT,
      name,
      value: this.parseValueLiteral(isConst),
    });
  }

  parseConstArgument() {
    return this.parseArgument(true);
  } // Implements the parsing rules in the Fragments section.

  /**
   * Corresponds to both FragmentSpread and InlineFragment in the spec.
   *
   * FragmentSpread : ... FragmentName Directives?
   *
   * InlineFragment : ... TypeCondition? Directives? SelectionSet
   */

  parseFragment() {
    const start = this._lexer.token;
    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SPREAD);
    const hasTypeCondition = this.expectOptionalKeyword('on');

    if (!hasTypeCondition && this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME)) {
      return this.node(start, {
        kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_SPREAD,
        name: this.parseFragmentName(),
        directives: this.parseDirectives(false),
      });
    }

    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INLINE_FRAGMENT,
      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
    });
  }
  /**
   * FragmentDefinition :
   *   - fragment FragmentName on TypeCondition Directives? SelectionSet
   *
   * TypeCondition : NamedType
   */

  parseFragmentDefinition() {
    const start = this._lexer.token;
    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes
    // the grammar of FragmentDefinition:
    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet

    if (this._options.allowLegacyFragmentVariables === true) {
      return this.node(start, {
        kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_DEFINITION,
        name: this.parseFragmentName(),
        variableDefinitions: this.parseVariableDefinitions(),
        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
        directives: this.parseDirectives(false),
        selectionSet: this.parseSelectionSet(),
      });
    }

    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_DEFINITION,
      name: this.parseFragmentName(),
      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),
      directives: this.parseDirectives(false),
      selectionSet: this.parseSelectionSet(),
    });
  }
  /**
   * FragmentName : Name but not `on`
   */

  parseFragmentName() {
    if (this._lexer.token.value === 'on') {
      throw this.unexpected();
    }

    return this.parseName();
  } // Implements the parsing rules in the Values section.

  /**
   * Value[Const] :
   *   - [~Const] Variable
   *   - IntValue
   *   - FloatValue
   *   - StringValue
   *   - BooleanValue
   *   - NullValue
   *   - EnumValue
   *   - ListValue[?Const]
   *   - ObjectValue[?Const]
   *
   * BooleanValue : one of `true` `false`
   *
   * NullValue : `null`
   *
   * EnumValue : Name but not `true`, `false` or `null`
   */

  parseValueLiteral(isConst) {
    const token = this._lexer.token;

    switch (token.kind) {
      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_L:
        return this.parseList(isConst);

      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L:
        return this.parseObject(isConst);

      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.INT:
        this.advanceLexer();
        return this.node(token, {
          kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INT,
          value: token.value,
        });

      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.FLOAT:
        this.advanceLexer();
        return this.node(token, {
          kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FLOAT,
          value: token.value,
        });

      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.STRING:
      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BLOCK_STRING:
        return this.parseStringLiteral();

      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME:
        this.advanceLexer();

        switch (token.value) {
          case 'true':
            return this.node(token, {
              kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.BOOLEAN,
              value: true,
            });

          case 'false':
            return this.node(token, {
              kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.BOOLEAN,
              value: false,
            });

          case 'null':
            return this.node(token, {
              kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.NULL,
            });

          default:
            return this.node(token, {
              kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ENUM,
              value: token.value,
            });
        }

      case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.DOLLAR:
        if (isConst) {
          this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.DOLLAR);

          if (this._lexer.token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME) {
            const varName = this._lexer.token.value;
            throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(
              this._lexer.source,
              token.start,
              `Unexpected variable "$${varName}" in constant value.`,
            );
          } else {
            throw this.unexpected(token);
          }
        }

        return this.parseVariable();

      default:
        throw this.unexpected();
    }
  }

  parseConstValueLiteral() {
    return this.parseValueLiteral(true);
  }

  parseStringLiteral() {
    const token = this._lexer.token;
    this.advanceLexer();
    return this.node(token, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.STRING,
      value: token.value,
      block: token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BLOCK_STRING,
    });
  }
  /**
   * ListValue[Const] :
   *   - [ ]
   *   - [ Value[?Const]+ ]
   */

  parseList(isConst) {
    const item = () => this.parseValueLiteral(isConst);

    return this.node(this._lexer.token, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.LIST,
      values: this.any(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_L, item, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_R),
    });
  }
  /**
   * ```
   * ObjectValue[Const] :
   *   - { }
   *   - { ObjectField[?Const]+ }
   * ```
   */

  parseObject(isConst) {
    const item = () => this.parseObjectField(isConst);

    return this.node(this._lexer.token, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT,
      fields: this.any(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L, item, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R),
    });
  }
  /**
   * ObjectField[Const] : Name : Value[?Const]
   */

  parseObjectField(isConst) {
    const start = this._lexer.token;
    const name = this.parseName();
    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT_FIELD,
      name,
      value: this.parseValueLiteral(isConst),
    });
  } // Implements the parsing rules in the Directives section.

  /**
   * Directives[Const] : Directive[?Const]+
   */

  parseDirectives(isConst) {
    const directives = [];

    while (this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.AT)) {
      directives.push(this.parseDirective(isConst));
    }

    return directives;
  }

  parseConstDirectives() {
    return this.parseDirectives(true);
  }
  /**
   * ```
   * Directive[Const] : @ Name Arguments[?Const]?
   * ```
   */

  parseDirective(isConst) {
    const start = this._lexer.token;
    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.AT);
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.DIRECTIVE,
      name: this.parseName(),
      arguments: this.parseArguments(isConst),
    });
  } // Implements the parsing rules in the Types section.

  /**
   * Type :
   *   - NamedType
   *   - ListType
   *   - NonNullType
   */

  parseTypeReference() {
    const start = this._lexer.token;
    let type;

    if (this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_L)) {
      const innerType = this.parseTypeReference();
      this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_R);
      type = this.node(start, {
        kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.LIST_TYPE,
        type: innerType,
      });
    } else {
      type = this.parseNamedType();
    }

    if (this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BANG)) {
      return this.node(start, {
        kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.NON_NULL_TYPE,
        type,
      });
    }

    return type;
  }
  /**
   * NamedType : Name
   */

  parseNamedType() {
    return this.node(this._lexer.token, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.NAMED_TYPE,
      name: this.parseName(),
    });
  } // Implements the parsing rules in the Type Definition section.

  peekDescription() {
    return this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.STRING) || this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BLOCK_STRING);
  }
  /**
   * Description : StringValue
   */

  parseDescription() {
    if (this.peekDescription()) {
      return this.parseStringLiteral();
    }
  }
  /**
   * ```
   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }
   * ```
   */

  parseSchemaDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword('schema');
    const directives = this.parseConstDirectives();
    const operationTypes = this.many(
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L,
      this.parseOperationTypeDefinition,
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R,
    );
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SCHEMA_DEFINITION,
      description,
      directives,
      operationTypes,
    });
  }
  /**
   * OperationTypeDefinition : OperationType : NamedType
   */

  parseOperationTypeDefinition() {
    const start = this._lexer.token;
    const operation = this.parseOperationType();
    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);
    const type = this.parseNamedType();
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OPERATION_TYPE_DEFINITION,
      operation,
      type,
    });
  }
  /**
   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?
   */

  parseScalarTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword('scalar');
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SCALAR_TYPE_DEFINITION,
      description,
      name,
      directives,
    });
  }
  /**
   * ObjectTypeDefinition :
   *   Description?
   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?
   */

  parseObjectTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword('type');
    const name = this.parseName();
    const interfaces = this.parseImplementsInterfaces();
    const directives = this.parseConstDirectives();
    const fields = this.parseFieldsDefinition();
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT_TYPE_DEFINITION,
      description,
      name,
      interfaces,
      directives,
      fields,
    });
  }
  /**
   * ImplementsInterfaces :
   *   - implements `&`? NamedType
   *   - ImplementsInterfaces & NamedType
   */

  parseImplementsInterfaces() {
    return this.expectOptionalKeyword('implements')
      ? this.delimitedMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.AMP, this.parseNamedType)
      : [];
  }
  /**
   * ```
   * FieldsDefinition : { FieldDefinition+ }
   * ```
   */

  parseFieldsDefinition() {
    return this.optionalMany(
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L,
      this.parseFieldDefinition,
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R,
    );
  }
  /**
   * FieldDefinition :
   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?
   */

  parseFieldDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    const name = this.parseName();
    const args = this.parseArgumentDefs();
    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);
    const type = this.parseTypeReference();
    const directives = this.parseConstDirectives();
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FIELD_DEFINITION,
      description,
      name,
      arguments: args,
      type,
      directives,
    });
  }
  /**
   * ArgumentsDefinition : ( InputValueDefinition+ )
   */

  parseArgumentDefs() {
    return this.optionalMany(
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_L,
      this.parseInputValueDef,
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_R,
    );
  }
  /**
   * InputValueDefinition :
   *   - Description? Name : Type DefaultValue? Directives[Const]?
   */

  parseInputValueDef() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    const name = this.parseName();
    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);
    const type = this.parseTypeReference();
    let defaultValue;

    if (this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EQUALS)) {
      defaultValue = this.parseConstValueLiteral();
    }

    const directives = this.parseConstDirectives();
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INPUT_VALUE_DEFINITION,
      description,
      name,
      type,
      defaultValue,
      directives,
    });
  }
  /**
   * InterfaceTypeDefinition :
   *   - Description? interface Name Directives[Const]? FieldsDefinition?
   */

  parseInterfaceTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword('interface');
    const name = this.parseName();
    const interfaces = this.parseImplementsInterfaces();
    const directives = this.parseConstDirectives();
    const fields = this.parseFieldsDefinition();
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INTERFACE_TYPE_DEFINITION,
      description,
      name,
      interfaces,
      directives,
      fields,
    });
  }
  /**
   * UnionTypeDefinition :
   *   - Description? union Name Directives[Const]? UnionMemberTypes?
   */

  parseUnionTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword('union');
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const types = this.parseUnionMemberTypes();
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.UNION_TYPE_DEFINITION,
      description,
      name,
      directives,
      types,
    });
  }
  /**
   * UnionMemberTypes :
   *   - = `|`? NamedType
   *   - UnionMemberTypes | NamedType
   */

  parseUnionMemberTypes() {
    return this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EQUALS)
      ? this.delimitedMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PIPE, this.parseNamedType)
      : [];
  }
  /**
   * EnumTypeDefinition :
   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?
   */

  parseEnumTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword('enum');
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const values = this.parseEnumValuesDefinition();
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ENUM_TYPE_DEFINITION,
      description,
      name,
      directives,
      values,
    });
  }
  /**
   * ```
   * EnumValuesDefinition : { EnumValueDefinition+ }
   * ```
   */

  parseEnumValuesDefinition() {
    return this.optionalMany(
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L,
      this.parseEnumValueDefinition,
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R,
    );
  }
  /**
   * EnumValueDefinition : Description? EnumValue Directives[Const]?
   */

  parseEnumValueDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    const name = this.parseEnumValueName();
    const directives = this.parseConstDirectives();
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ENUM_VALUE_DEFINITION,
      description,
      name,
      directives,
    });
  }
  /**
   * EnumValue : Name but not `true`, `false` or `null`
   */

  parseEnumValueName() {
    if (
      this._lexer.token.value === 'true' ||
      this._lexer.token.value === 'false' ||
      this._lexer.token.value === 'null'
    ) {
      throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(
        this._lexer.source,
        this._lexer.token.start,
        `${getTokenDesc(
          this._lexer.token,
        )} is reserved and cannot be used for an enum value.`,
      );
    }

    return this.parseName();
  }
  /**
   * InputObjectTypeDefinition :
   *   - Description? input Name Directives[Const]? InputFieldsDefinition?
   */

  parseInputObjectTypeDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword('input');
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const fields = this.parseInputFieldsDefinition();
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INPUT_OBJECT_TYPE_DEFINITION,
      description,
      name,
      directives,
      fields,
    });
  }
  /**
   * ```
   * InputFieldsDefinition : { InputValueDefinition+ }
   * ```
   */

  parseInputFieldsDefinition() {
    return this.optionalMany(
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L,
      this.parseInputValueDef,
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R,
    );
  }
  /**
   * TypeSystemExtension :
   *   - SchemaExtension
   *   - TypeExtension
   *
   * TypeExtension :
   *   - ScalarTypeExtension
   *   - ObjectTypeExtension
   *   - InterfaceTypeExtension
   *   - UnionTypeExtension
   *   - EnumTypeExtension
   *   - InputObjectTypeDefinition
   */

  parseTypeSystemExtension() {
    const keywordToken = this._lexer.lookahead();

    if (keywordToken.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME) {
      switch (keywordToken.value) {
        case 'schema':
          return this.parseSchemaExtension();

        case 'scalar':
          return this.parseScalarTypeExtension();

        case 'type':
          return this.parseObjectTypeExtension();

        case 'interface':
          return this.parseInterfaceTypeExtension();

        case 'union':
          return this.parseUnionTypeExtension();

        case 'enum':
          return this.parseEnumTypeExtension();

        case 'input':
          return this.parseInputObjectTypeExtension();
      }
    }

    throw this.unexpected(keywordToken);
  }
  /**
   * ```
   * SchemaExtension :
   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }
   *  - extend schema Directives[Const]
   * ```
   */

  parseSchemaExtension() {
    const start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('schema');
    const directives = this.parseConstDirectives();
    const operationTypes = this.optionalMany(
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L,
      this.parseOperationTypeDefinition,
      _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R,
    );

    if (directives.length === 0 && operationTypes.length === 0) {
      throw this.unexpected();
    }

    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SCHEMA_EXTENSION,
      directives,
      operationTypes,
    });
  }
  /**
   * ScalarTypeExtension :
   *   - extend scalar Name Directives[Const]
   */

  parseScalarTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('scalar');
    const name = this.parseName();
    const directives = this.parseConstDirectives();

    if (directives.length === 0) {
      throw this.unexpected();
    }

    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SCALAR_TYPE_EXTENSION,
      name,
      directives,
    });
  }
  /**
   * ObjectTypeExtension :
   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend type Name ImplementsInterfaces? Directives[Const]
   *  - extend type Name ImplementsInterfaces
   */

  parseObjectTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('type');
    const name = this.parseName();
    const interfaces = this.parseImplementsInterfaces();
    const directives = this.parseConstDirectives();
    const fields = this.parseFieldsDefinition();

    if (
      interfaces.length === 0 &&
      directives.length === 0 &&
      fields.length === 0
    ) {
      throw this.unexpected();
    }

    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT_TYPE_EXTENSION,
      name,
      interfaces,
      directives,
      fields,
    });
  }
  /**
   * InterfaceTypeExtension :
   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition
   *  - extend interface Name ImplementsInterfaces? Directives[Const]
   *  - extend interface Name ImplementsInterfaces
   */

  parseInterfaceTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('interface');
    const name = this.parseName();
    const interfaces = this.parseImplementsInterfaces();
    const directives = this.parseConstDirectives();
    const fields = this.parseFieldsDefinition();

    if (
      interfaces.length === 0 &&
      directives.length === 0 &&
      fields.length === 0
    ) {
      throw this.unexpected();
    }

    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INTERFACE_TYPE_EXTENSION,
      name,
      interfaces,
      directives,
      fields,
    });
  }
  /**
   * UnionTypeExtension :
   *   - extend union Name Directives[Const]? UnionMemberTypes
   *   - extend union Name Directives[Const]
   */

  parseUnionTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('union');
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const types = this.parseUnionMemberTypes();

    if (directives.length === 0 && types.length === 0) {
      throw this.unexpected();
    }

    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.UNION_TYPE_EXTENSION,
      name,
      directives,
      types,
    });
  }
  /**
   * EnumTypeExtension :
   *   - extend enum Name Directives[Const]? EnumValuesDefinition
   *   - extend enum Name Directives[Const]
   */

  parseEnumTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('enum');
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const values = this.parseEnumValuesDefinition();

    if (directives.length === 0 && values.length === 0) {
      throw this.unexpected();
    }

    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ENUM_TYPE_EXTENSION,
      name,
      directives,
      values,
    });
  }
  /**
   * InputObjectTypeExtension :
   *   - extend input Name Directives[Const]? InputFieldsDefinition
   *   - extend input Name Directives[Const]
   */

  parseInputObjectTypeExtension() {
    const start = this._lexer.token;
    this.expectKeyword('extend');
    this.expectKeyword('input');
    const name = this.parseName();
    const directives = this.parseConstDirectives();
    const fields = this.parseInputFieldsDefinition();

    if (directives.length === 0 && fields.length === 0) {
      throw this.unexpected();
    }

    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INPUT_OBJECT_TYPE_EXTENSION,
      name,
      directives,
      fields,
    });
  }
  /**
   * ```
   * DirectiveDefinition :
   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations
   * ```
   */

  parseDirectiveDefinition() {
    const start = this._lexer.token;
    const description = this.parseDescription();
    this.expectKeyword('directive');
    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.AT);
    const name = this.parseName();
    const args = this.parseArgumentDefs();
    const repeatable = this.expectOptionalKeyword('repeatable');
    this.expectKeyword('on');
    const locations = this.parseDirectiveLocations();
    return this.node(start, {
      kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.DIRECTIVE_DEFINITION,
      description,
      name,
      arguments: args,
      repeatable,
      locations,
    });
  }
  /**
   * DirectiveLocations :
   *   - `|`? DirectiveLocation
   *   - DirectiveLocations | DirectiveLocation
   */

  parseDirectiveLocations() {
    return this.delimitedMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PIPE, this.parseDirectiveLocation);
  }
  /*
   * DirectiveLocation :
   *   - ExecutableDirectiveLocation
   *   - TypeSystemDirectiveLocation
   *
   * ExecutableDirectiveLocation : one of
   *   `QUERY`
   *   `MUTATION`
   *   `SUBSCRIPTION`
   *   `FIELD`
   *   `FRAGMENT_DEFINITION`
   *   `FRAGMENT_SPREAD`
   *   `INLINE_FRAGMENT`
   *
   * TypeSystemDirectiveLocation : one of
   *   `SCHEMA`
   *   `SCALAR`
   *   `OBJECT`
   *   `FIELD_DEFINITION`
   *   `ARGUMENT_DEFINITION`
   *   `INTERFACE`
   *   `UNION`
   *   `ENUM`
   *   `ENUM_VALUE`
   *   `INPUT_OBJECT`
   *   `INPUT_FIELD_DEFINITION`
   */

  parseDirectiveLocation() {
    const start = this._lexer.token;
    const name = this.parseName();

    if (Object.prototype.hasOwnProperty.call(_directiveLocation_mjs__WEBPACK_IMPORTED_MODULE_6__.DirectiveLocation, name.value)) {
      return name;
    }

    throw this.unexpected(start);
  } // Core parsing utility functions

  /**
   * Returns a node that, if configured to do so, sets a "loc" field as a
   * location object, used to identify the place in the source that created a
   * given parsed object.
   */

  node(startToken, node) {
    if (this._options.noLocation !== true) {
      node.loc = new _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.Location(
        startToken,
        this._lexer.lastToken,
        this._lexer.source,
      );
    }

    return node;
  }
  /**
   * Determines if the next token is of a given kind
   */

  peek(kind) {
    return this._lexer.token.kind === kind;
  }
  /**
   * If the next token is of the given kind, return that token after advancing the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */

  expectToken(kind) {
    const token = this._lexer.token;

    if (token.kind === kind) {
      this.advanceLexer();
      return token;
    }

    throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(
      this._lexer.source,
      token.start,
      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,
    );
  }
  /**
   * If the next token is of the given kind, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */

  expectOptionalToken(kind) {
    const token = this._lexer.token;

    if (token.kind === kind) {
      this.advanceLexer();
      return true;
    }

    return false;
  }
  /**
   * If the next token is a given keyword, advance the lexer.
   * Otherwise, do not change the parser state and throw an error.
   */

  expectKeyword(value) {
    const token = this._lexer.token;

    if (token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME && token.value === value) {
      this.advanceLexer();
    } else {
      throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(
        this._lexer.source,
        token.start,
        `Expected "${value}", found ${getTokenDesc(token)}.`,
      );
    }
  }
  /**
   * If the next token is a given keyword, return "true" after advancing the lexer.
   * Otherwise, do not change the parser state and return "false".
   */

  expectOptionalKeyword(value) {
    const token = this._lexer.token;

    if (token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME && token.value === value) {
      this.advanceLexer();
      return true;
    }

    return false;
  }
  /**
   * Helper function for creating an error when an unexpected lexed token is encountered.
   */

  unexpected(atToken) {
    const token =
      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
    return (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(
      this._lexer.source,
      token.start,
      `Unexpected ${getTokenDesc(token)}.`,
    );
  }
  /**
   * Returns a possibly empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */

  any(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    const nodes = [];

    while (!this.expectOptionalToken(closeKind)) {
      nodes.push(parseFn.call(this));
    }

    return nodes;
  }
  /**
   * Returns a list of parse nodes, determined by the parseFn.
   * It can be empty only if open token is missing otherwise it will always return non-empty list
   * that begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */

  optionalMany(openKind, parseFn, closeKind) {
    if (this.expectOptionalToken(openKind)) {
      const nodes = [];

      do {
        nodes.push(parseFn.call(this));
      } while (!this.expectOptionalToken(closeKind));

      return nodes;
    }

    return [];
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list begins with a lex token of openKind and ends with a lex token of closeKind.
   * Advances the parser to the next lex token after the closing token.
   */

  many(openKind, parseFn, closeKind) {
    this.expectToken(openKind);
    const nodes = [];

    do {
      nodes.push(parseFn.call(this));
    } while (!this.expectOptionalToken(closeKind));

    return nodes;
  }
  /**
   * Returns a non-empty list of parse nodes, determined by the parseFn.
   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.
   * Advances the parser to the next lex token after last item in the list.
   */

  delimitedMany(delimiterKind, parseFn) {
    this.expectOptionalToken(delimiterKind);
    const nodes = [];

    do {
      nodes.push(parseFn.call(this));
    } while (this.expectOptionalToken(delimiterKind));

    return nodes;
  }

  advanceLexer() {
    const { maxTokens } = this._options;

    const token = this._lexer.advance();

    if (token.kind !== _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF) {
      ++this._tokenCounter;

      if (maxTokens !== undefined && this._tokenCounter > maxTokens) {
        throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(
          this._lexer.source,
          token.start,
          `Document contains more that ${maxTokens} tokens. Parsing aborted.`,
        );
      }
    }
  }
}
/**
 * A helper function to describe a token as a string for debugging.
 */

function getTokenDesc(token) {
  const value = token.value;
  return getTokenKindDesc(token.kind) + (value != null ? ` "${value}"` : '');
}
/**
 * A helper function to describe a token kind as a string for debugging.
 */

function getTokenKindDesc(kind) {
  return (0,_lexer_mjs__WEBPACK_IMPORTED_MODULE_2__.isPunctuatorTokenKind)(kind) ? `"${kind}"` : kind;
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printLocation.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  printLocation: () => (printLocation),
  printSourceLocation: () => (printSourceLocation)
});
/* ESM import */var _location_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/location.mjs");


/**
 * Render a helpful description of the location in the GraphQL Source document.
 */
function printLocation(location) {
  return printSourceLocation(
    location.source,
    (0,_location_mjs__WEBPACK_IMPORTED_MODULE_0__.getLocation)(location.source, location.start),
  );
}
/**
 * Render a helpful description of the location in the GraphQL Source document.
 */

function printSourceLocation(source, sourceLocation) {
  const firstLineColumnOffset = source.locationOffset.column - 1;
  const body = ''.padStart(firstLineColumnOffset) + source.body;
  const lineIndex = sourceLocation.line - 1;
  const lineOffset = source.locationOffset.line - 1;
  const lineNum = sourceLocation.line + lineOffset;
  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
  const columnNum = sourceLocation.column + columnOffset;
  const locationStr = `${source.name}:${lineNum}:${columnNum}\n`;
  const lines = body.split(/\r\n|[\n\r]/g);
  const locationLine = lines[lineIndex]; // Special case for minified documents

  if (locationLine.length > 120) {
    const subLineIndex = Math.floor(columnNum / 80);
    const subLineColumnNum = columnNum % 80;
    const subLines = [];

    for (let i = 0; i < locationLine.length; i += 80) {
      subLines.push(locationLine.slice(i, i + 80));
    }

    return (
      locationStr +
      printPrefixedLines([
        [`${lineNum} |`, subLines[0]],
        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),
        ['|', '^'.padStart(subLineColumnNum)],
        ['|', subLines[subLineIndex + 1]],
      ])
    );
  }

  return (
    locationStr +
    printPrefixedLines([
      // Lines specified like this: ["prefix", "string"],
      [`${lineNum - 1} |`, lines[lineIndex - 1]],
      [`${lineNum} |`, locationLine],
      ['|', '^'.padStart(columnNum)],
      [`${lineNum + 1} |`, lines[lineIndex + 1]],
    ])
  );
}

function printPrefixedLines(lines) {
  const existingLines = lines.filter(([_, line]) => line !== undefined);
  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));
  return existingLines
    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))
    .join('\n');
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printString.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  printString: () => (printString)
});
/**
 * Prints a string as a GraphQL StringValue literal. Replaces control characters
 * and excluded characters (" U+0022 and \\ U+005C) with escape sequences.
 */
function printString(str) {
  return `"${str.replace(escapedRegExp, escapedReplacer)}"`;
} // eslint-disable-next-line no-control-regex

const escapedRegExp = /[\x00-\x1f\x22\x5c\x7f-\x9f]/g;

function escapedReplacer(str) {
  return escapeSequences[str.charCodeAt(0)];
} // prettier-ignore

const escapeSequences = [
  '\\u0000',
  '\\u0001',
  '\\u0002',
  '\\u0003',
  '\\u0004',
  '\\u0005',
  '\\u0006',
  '\\u0007',
  '\\b',
  '\\t',
  '\\n',
  '\\u000B',
  '\\f',
  '\\r',
  '\\u000E',
  '\\u000F',
  '\\u0010',
  '\\u0011',
  '\\u0012',
  '\\u0013',
  '\\u0014',
  '\\u0015',
  '\\u0016',
  '\\u0017',
  '\\u0018',
  '\\u0019',
  '\\u001A',
  '\\u001B',
  '\\u001C',
  '\\u001D',
  '\\u001E',
  '\\u001F',
  '',
  '',
  '\\"',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '', // 2F
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '', // 3F
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '', // 4F
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '\\\\',
  '',
  '',
  '', // 5F
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '', // 6F
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '',
  '\\u007F',
  '\\u0080',
  '\\u0081',
  '\\u0082',
  '\\u0083',
  '\\u0084',
  '\\u0085',
  '\\u0086',
  '\\u0087',
  '\\u0088',
  '\\u0089',
  '\\u008A',
  '\\u008B',
  '\\u008C',
  '\\u008D',
  '\\u008E',
  '\\u008F',
  '\\u0090',
  '\\u0091',
  '\\u0092',
  '\\u0093',
  '\\u0094',
  '\\u0095',
  '\\u0096',
  '\\u0097',
  '\\u0098',
  '\\u0099',
  '\\u009A',
  '\\u009B',
  '\\u009C',
  '\\u009D',
  '\\u009E',
  '\\u009F',
];


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printer.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  print: () => (print)
});
/* ESM import */var _blockString_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/blockString.mjs");
/* ESM import */var _printString_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/printString.mjs");
/* ESM import */var _visitor_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs");



/**
 * Converts an AST into a string, using one set of reasonable
 * formatting rules.
 */

function print(ast) {
  return (0,_visitor_mjs__WEBPACK_IMPORTED_MODULE_0__.visit)(ast, printDocASTReducer);
}
const MAX_LINE_LENGTH = 80;
const printDocASTReducer = {
  Name: {
    leave: (node) => node.value,
  },
  Variable: {
    leave: (node) => '$' + node.name,
  },
  // Document
  Document: {
    leave: (node) => join(node.definitions, '\n\n'),
  },
  OperationDefinition: {
    leave(node) {
      const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');
      const prefix = join(
        [
          node.operation,
          join([node.name, varDefs]),
          join(node.directives, ' '),
        ],
        ' ',
      ); // Anonymous queries with no directives or variable definitions can use
      // the query short form.

      return (prefix === 'query' ? '' : prefix + ' ') + node.selectionSet;
    },
  },
  VariableDefinition: {
    leave: ({ variable, type, defaultValue, directives }) =>
      variable +
      ': ' +
      type +
      wrap(' = ', defaultValue) +
      wrap(' ', join(directives, ' ')),
  },
  SelectionSet: {
    leave: ({ selections }) => block(selections),
  },
  Field: {
    leave({ alias, name, arguments: args, directives, selectionSet }) {
      const prefix = wrap('', alias, ': ') + name;
      let argsLine = prefix + wrap('(', join(args, ', '), ')');

      if (argsLine.length > MAX_LINE_LENGTH) {
        argsLine = prefix + wrap('(\n', indent(join(args, '\n')), '\n)');
      }

      return join([argsLine, join(directives, ' '), selectionSet], ' ');
    },
  },
  Argument: {
    leave: ({ name, value }) => name + ': ' + value,
  },
  // Fragments
  FragmentSpread: {
    leave: ({ name, directives }) =>
      '...' + name + wrap(' ', join(directives, ' ')),
  },
  InlineFragment: {
    leave: ({ typeCondition, directives, selectionSet }) =>
      join(
        [
          '...',
          wrap('on ', typeCondition),
          join(directives, ' '),
          selectionSet,
        ],
        ' ',
      ),
  },
  FragmentDefinition: {
    leave: (
      { name, typeCondition, variableDefinitions, directives, selectionSet }, // Note: fragment variable definitions are experimental and may be changed
    ) =>
      // or removed in the future.
      `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` +
      `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` +
      selectionSet,
  },
  // Value
  IntValue: {
    leave: ({ value }) => value,
  },
  FloatValue: {
    leave: ({ value }) => value,
  },
  StringValue: {
    leave: ({ value, block: isBlockString }) =>
      isBlockString ? (0,_blockString_mjs__WEBPACK_IMPORTED_MODULE_1__.printBlockString)(value) : (0,_printString_mjs__WEBPACK_IMPORTED_MODULE_2__.printString)(value),
  },
  BooleanValue: {
    leave: ({ value }) => (value ? 'true' : 'false'),
  },
  NullValue: {
    leave: () => 'null',
  },
  EnumValue: {
    leave: ({ value }) => value,
  },
  ListValue: {
    leave: ({ values }) => '[' + join(values, ', ') + ']',
  },
  ObjectValue: {
    leave: ({ fields }) => '{' + join(fields, ', ') + '}',
  },
  ObjectField: {
    leave: ({ name, value }) => name + ': ' + value,
  },
  // Directive
  Directive: {
    leave: ({ name, arguments: args }) =>
      '@' + name + wrap('(', join(args, ', '), ')'),
  },
  // Type
  NamedType: {
    leave: ({ name }) => name,
  },
  ListType: {
    leave: ({ type }) => '[' + type + ']',
  },
  NonNullType: {
    leave: ({ type }) => type + '!',
  },
  // Type System Definitions
  SchemaDefinition: {
    leave: ({ description, directives, operationTypes }) =>
      wrap('', description, '\n') +
      join(['schema', join(directives, ' '), block(operationTypes)], ' '),
  },
  OperationTypeDefinition: {
    leave: ({ operation, type }) => operation + ': ' + type,
  },
  ScalarTypeDefinition: {
    leave: ({ description, name, directives }) =>
      wrap('', description, '\n') +
      join(['scalar', name, join(directives, ' ')], ' '),
  },
  ObjectTypeDefinition: {
    leave: ({ description, name, interfaces, directives, fields }) =>
      wrap('', description, '\n') +
      join(
        [
          'type',
          name,
          wrap('implements ', join(interfaces, ' & ')),
          join(directives, ' '),
          block(fields),
        ],
        ' ',
      ),
  },
  FieldDefinition: {
    leave: ({ description, name, arguments: args, type, directives }) =>
      wrap('', description, '\n') +
      name +
      (hasMultilineItems(args)
        ? wrap('(\n', indent(join(args, '\n')), '\n)')
        : wrap('(', join(args, ', '), ')')) +
      ': ' +
      type +
      wrap(' ', join(directives, ' ')),
  },
  InputValueDefinition: {
    leave: ({ description, name, type, defaultValue, directives }) =>
      wrap('', description, '\n') +
      join(
        [name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')],
        ' ',
      ),
  },
  InterfaceTypeDefinition: {
    leave: ({ description, name, interfaces, directives, fields }) =>
      wrap('', description, '\n') +
      join(
        [
          'interface',
          name,
          wrap('implements ', join(interfaces, ' & ')),
          join(directives, ' '),
          block(fields),
        ],
        ' ',
      ),
  },
  UnionTypeDefinition: {
    leave: ({ description, name, directives, types }) =>
      wrap('', description, '\n') +
      join(
        ['union', name, join(directives, ' '), wrap('= ', join(types, ' | '))],
        ' ',
      ),
  },
  EnumTypeDefinition: {
    leave: ({ description, name, directives, values }) =>
      wrap('', description, '\n') +
      join(['enum', name, join(directives, ' '), block(values)], ' '),
  },
  EnumValueDefinition: {
    leave: ({ description, name, directives }) =>
      wrap('', description, '\n') + join([name, join(directives, ' ')], ' '),
  },
  InputObjectTypeDefinition: {
    leave: ({ description, name, directives, fields }) =>
      wrap('', description, '\n') +
      join(['input', name, join(directives, ' '), block(fields)], ' '),
  },
  DirectiveDefinition: {
    leave: ({ description, name, arguments: args, repeatable, locations }) =>
      wrap('', description, '\n') +
      'directive @' +
      name +
      (hasMultilineItems(args)
        ? wrap('(\n', indent(join(args, '\n')), '\n)')
        : wrap('(', join(args, ', '), ')')) +
      (repeatable ? ' repeatable' : '') +
      ' on ' +
      join(locations, ' | '),
  },
  SchemaExtension: {
    leave: ({ directives, operationTypes }) =>
      join(
        ['extend schema', join(directives, ' '), block(operationTypes)],
        ' ',
      ),
  },
  ScalarTypeExtension: {
    leave: ({ name, directives }) =>
      join(['extend scalar', name, join(directives, ' ')], ' '),
  },
  ObjectTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) =>
      join(
        [
          'extend type',
          name,
          wrap('implements ', join(interfaces, ' & ')),
          join(directives, ' '),
          block(fields),
        ],
        ' ',
      ),
  },
  InterfaceTypeExtension: {
    leave: ({ name, interfaces, directives, fields }) =>
      join(
        [
          'extend interface',
          name,
          wrap('implements ', join(interfaces, ' & ')),
          join(directives, ' '),
          block(fields),
        ],
        ' ',
      ),
  },
  UnionTypeExtension: {
    leave: ({ name, directives, types }) =>
      join(
        [
          'extend union',
          name,
          join(directives, ' '),
          wrap('= ', join(types, ' | ')),
        ],
        ' ',
      ),
  },
  EnumTypeExtension: {
    leave: ({ name, directives, values }) =>
      join(['extend enum', name, join(directives, ' '), block(values)], ' '),
  },
  InputObjectTypeExtension: {
    leave: ({ name, directives, fields }) =>
      join(['extend input', name, join(directives, ' '), block(fields)], ' '),
  },
};
/**
 * Given maybeArray, print an empty string if it is null or empty, otherwise
 * print all items together separated by separator if provided
 */

function join(maybeArray, separator = '') {
  var _maybeArray$filter$jo;

  return (_maybeArray$filter$jo =
    maybeArray === null || maybeArray === void 0
      ? void 0
      : maybeArray.filter((x) => x).join(separator)) !== null &&
    _maybeArray$filter$jo !== void 0
    ? _maybeArray$filter$jo
    : '';
}
/**
 * Given array, print each item on its own line, wrapped in an indented `{ }` block.
 */

function block(array) {
  return wrap('{\n', indent(join(array, '\n')), '\n}');
}
/**
 * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.
 */

function wrap(start, maybeString, end = '') {
  return maybeString != null && maybeString !== ''
    ? start + maybeString + end
    : '';
}

function indent(str) {
  return wrap('  ', str.replace(/\n/g, '\n  '));
}

function hasMultilineItems(maybeArray) {
  var _maybeArray$some;

  // FIXME: https://github.com/graphql/graphql-js/issues/2203

  /* c8 ignore next */
  return (_maybeArray$some =
    maybeArray === null || maybeArray === void 0
      ? void 0
      : maybeArray.some((str) => str.includes('\n'))) !== null &&
    _maybeArray$some !== void 0
    ? _maybeArray$some
    : false;
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/source.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Source: () => (Source),
  isSource: () => (isSource)
});
/* ESM import */var _jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/devAssert.mjs");
/* ESM import */var _jsutils_inspect_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/inspect.mjs");
/* ESM import */var _jsutils_instanceOf_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/instanceOf.mjs");




/**
 * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are
 * optional, but they are useful for clients who store GraphQL documents in source files.
 * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might
 * be useful for `name` to be `"Foo.graphql"` and location to be `{ line: 40, column: 1 }`.
 * The `line` and `column` properties in `locationOffset` are 1-indexed.
 */
class Source {
  constructor(
    body,
    name = 'GraphQL request',
    locationOffset = {
      line: 1,
      column: 1,
    },
  ) {
    typeof body === 'string' ||
      (0,_jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_0__.devAssert)(false, `Body must be a string. Received: ${(0,_jsutils_inspect_mjs__WEBPACK_IMPORTED_MODULE_1__.inspect)(body)}.`);
    this.body = body;
    this.name = name;
    this.locationOffset = locationOffset;
    this.locationOffset.line > 0 ||
      (0,_jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_0__.devAssert)(
        false,
        'line in locationOffset is 1-indexed and must be positive.',
      );
    this.locationOffset.column > 0 ||
      (0,_jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_0__.devAssert)(
        false,
        'column in locationOffset is 1-indexed and must be positive.',
      );
  }

  get [Symbol.toStringTag]() {
    return 'Source';
  }
}
/**
 * Test if the given value is a Source object.
 *
 * @internal
 */

function isSource(source) {
  return (0,_jsutils_instanceOf_mjs__WEBPACK_IMPORTED_MODULE_2__.instanceOf)(source, Source);
}


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/tokenKind.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  TokenKind: () => (TokenKind)
});
/**
 * An exported enum describing the different kinds of tokens that the
 * lexer emits.
 */
var TokenKind;

(function (TokenKind) {
  TokenKind['SOF'] = '<SOF>';
  TokenKind['EOF'] = '<EOF>';
  TokenKind['BANG'] = '!';
  TokenKind['DOLLAR'] = '$';
  TokenKind['AMP'] = '&';
  TokenKind['PAREN_L'] = '(';
  TokenKind['PAREN_R'] = ')';
  TokenKind['SPREAD'] = '...';
  TokenKind['COLON'] = ':';
  TokenKind['EQUALS'] = '=';
  TokenKind['AT'] = '@';
  TokenKind['BRACKET_L'] = '[';
  TokenKind['BRACKET_R'] = ']';
  TokenKind['BRACE_L'] = '{';
  TokenKind['PIPE'] = '|';
  TokenKind['BRACE_R'] = '}';
  TokenKind['NAME'] = 'Name';
  TokenKind['INT'] = 'Int';
  TokenKind['FLOAT'] = 'Float';
  TokenKind['STRING'] = 'String';
  TokenKind['BLOCK_STRING'] = 'BlockString';
  TokenKind['COMMENT'] = 'Comment';
})(TokenKind || (TokenKind = {}));


/**
 * The enum type representing the token kinds values.
 *
 * @deprecated Please use `TokenKind`. Will be remove in v17.
 */


}),
"../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/visitor.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  BREAK: () => (BREAK),
  getEnterLeaveForKind: () => (getEnterLeaveForKind),
  getVisitFn: () => (getVisitFn),
  visit: () => (visit),
  visitInParallel: () => (visitInParallel)
});
/* ESM import */var _jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/devAssert.mjs");
/* ESM import */var _jsutils_inspect_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/jsutils/inspect.mjs");
/* ESM import */var _ast_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/ast.mjs");
/* ESM import */var _kinds_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/graphql@16.11.0/node_modules/graphql/language/kinds.mjs");




/**
 * A visitor is provided to visit, it contains the collection of
 * relevant functions to be called during the visitor's traversal.
 */

const BREAK = Object.freeze({});
/**
 * visit() will walk through an AST using a depth-first traversal, calling
 * the visitor's enter function at each node in the traversal, and calling the
 * leave function after visiting that node and all of its child nodes.
 *
 * By returning different values from the enter and leave functions, the
 * behavior of the visitor can be altered, including skipping over a sub-tree of
 * the AST (by returning false), editing the AST by returning a value or null
 * to remove the value, or to stop the whole traversal by returning BREAK.
 *
 * When using visit() to edit an AST, the original AST will not be modified, and
 * a new version of the AST with the changes applied will be returned from the
 * visit function.
 *
 * ```ts
 * const editedAST = visit(ast, {
 *   enter(node, key, parent, path, ancestors) {
 *     // @return
 *     //   undefined: no action
 *     //   false: skip visiting this node
 *     //   visitor.BREAK: stop visiting altogether
 *     //   null: delete this node
 *     //   any value: replace this node with the returned value
 *   },
 *   leave(node, key, parent, path, ancestors) {
 *     // @return
 *     //   undefined: no action
 *     //   false: no action
 *     //   visitor.BREAK: stop visiting altogether
 *     //   null: delete this node
 *     //   any value: replace this node with the returned value
 *   }
 * });
 * ```
 *
 * Alternatively to providing enter() and leave() functions, a visitor can
 * instead provide functions named the same as the kinds of AST nodes, or
 * enter/leave visitors at a named key, leading to three permutations of the
 * visitor API:
 *
 * 1) Named visitors triggered when entering a node of a specific kind.
 *
 * ```ts
 * visit(ast, {
 *   Kind(node) {
 *     // enter the "Kind" node
 *   }
 * })
 * ```
 *
 * 2) Named visitors that trigger upon entering and leaving a node of a specific kind.
 *
 * ```ts
 * visit(ast, {
 *   Kind: {
 *     enter(node) {
 *       // enter the "Kind" node
 *     }
 *     leave(node) {
 *       // leave the "Kind" node
 *     }
 *   }
 * })
 * ```
 *
 * 3) Generic visitors that trigger upon entering and leaving any node.
 *
 * ```ts
 * visit(ast, {
 *   enter(node) {
 *     // enter any node
 *   },
 *   leave(node) {
 *     // leave any node
 *   }
 * })
 * ```
 */

function visit(root, visitor, visitorKeys = _ast_mjs__WEBPACK_IMPORTED_MODULE_0__.QueryDocumentKeys) {
  const enterLeaveMap = new Map();

  for (const kind of Object.values(_kinds_mjs__WEBPACK_IMPORTED_MODULE_1__.Kind)) {
    enterLeaveMap.set(kind, getEnterLeaveForKind(visitor, kind));
  }
  /* eslint-disable no-undef-init */

  let stack = undefined;
  let inArray = Array.isArray(root);
  let keys = [root];
  let index = -1;
  let edits = [];
  let node = root;
  let key = undefined;
  let parent = undefined;
  const path = [];
  const ancestors = [];
  /* eslint-enable no-undef-init */

  do {
    index++;
    const isLeaving = index === keys.length;
    const isEdited = isLeaving && edits.length !== 0;

    if (isLeaving) {
      key = ancestors.length === 0 ? undefined : path[path.length - 1];
      node = parent;
      parent = ancestors.pop();

      if (isEdited) {
        if (inArray) {
          node = node.slice();
          let editOffset = 0;

          for (const [editKey, editValue] of edits) {
            const arrayKey = editKey - editOffset;

            if (editValue === null) {
              node.splice(arrayKey, 1);
              editOffset++;
            } else {
              node[arrayKey] = editValue;
            }
          }
        } else {
          node = { ...node };

          for (const [editKey, editValue] of edits) {
            node[editKey] = editValue;
          }
        }
      }

      index = stack.index;
      keys = stack.keys;
      edits = stack.edits;
      inArray = stack.inArray;
      stack = stack.prev;
    } else if (parent) {
      key = inArray ? index : keys[index];
      node = parent[key];

      if (node === null || node === undefined) {
        continue;
      }

      path.push(key);
    }

    let result;

    if (!Array.isArray(node)) {
      var _enterLeaveMap$get, _enterLeaveMap$get2;

      (0,_ast_mjs__WEBPACK_IMPORTED_MODULE_0__.isNode)(node) || (0,_jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_2__.devAssert)(false, `Invalid AST Node: ${(0,_jsutils_inspect_mjs__WEBPACK_IMPORTED_MODULE_3__.inspect)(node)}.`);
      const visitFn = isLeaving
        ? (_enterLeaveMap$get = enterLeaveMap.get(node.kind)) === null ||
          _enterLeaveMap$get === void 0
          ? void 0
          : _enterLeaveMap$get.leave
        : (_enterLeaveMap$get2 = enterLeaveMap.get(node.kind)) === null ||
          _enterLeaveMap$get2 === void 0
        ? void 0
        : _enterLeaveMap$get2.enter;
      result =
        visitFn === null || visitFn === void 0
          ? void 0
          : visitFn.call(visitor, node, key, parent, path, ancestors);

      if (result === BREAK) {
        break;
      }

      if (result === false) {
        if (!isLeaving) {
          path.pop();
          continue;
        }
      } else if (result !== undefined) {
        edits.push([key, result]);

        if (!isLeaving) {
          if ((0,_ast_mjs__WEBPACK_IMPORTED_MODULE_0__.isNode)(result)) {
            node = result;
          } else {
            path.pop();
            continue;
          }
        }
      }
    }

    if (result === undefined && isEdited) {
      edits.push([key, node]);
    }

    if (isLeaving) {
      path.pop();
    } else {
      var _node$kind;

      stack = {
        inArray,
        index,
        keys,
        edits,
        prev: stack,
      };
      inArray = Array.isArray(node);
      keys = inArray
        ? node
        : (_node$kind = visitorKeys[node.kind]) !== null &&
          _node$kind !== void 0
        ? _node$kind
        : [];
      index = -1;
      edits = [];

      if (parent) {
        ancestors.push(parent);
      }

      parent = node;
    }
  } while (stack !== undefined);

  if (edits.length !== 0) {
    // New root
    return edits[edits.length - 1][1];
  }

  return root;
}
/**
 * Creates a new visitor instance which delegates to many visitors to run in
 * parallel. Each visitor will be visited for each node before moving on.
 *
 * If a prior visitor edits a node, no following visitors will see that node.
 */

function visitInParallel(visitors) {
  const skipping = new Array(visitors.length).fill(null);
  const mergedVisitor = Object.create(null);

  for (const kind of Object.values(_kinds_mjs__WEBPACK_IMPORTED_MODULE_1__.Kind)) {
    let hasVisitor = false;
    const enterList = new Array(visitors.length).fill(undefined);
    const leaveList = new Array(visitors.length).fill(undefined);

    for (let i = 0; i < visitors.length; ++i) {
      const { enter, leave } = getEnterLeaveForKind(visitors[i], kind);
      hasVisitor || (hasVisitor = enter != null || leave != null);
      enterList[i] = enter;
      leaveList[i] = leave;
    }

    if (!hasVisitor) {
      continue;
    }

    const mergedEnterLeave = {
      enter(...args) {
        const node = args[0];

        for (let i = 0; i < visitors.length; i++) {
          if (skipping[i] === null) {
            var _enterList$i;

            const result =
              (_enterList$i = enterList[i]) === null || _enterList$i === void 0
                ? void 0
                : _enterList$i.apply(visitors[i], args);

            if (result === false) {
              skipping[i] = node;
            } else if (result === BREAK) {
              skipping[i] = BREAK;
            } else if (result !== undefined) {
              return result;
            }
          }
        }
      },

      leave(...args) {
        const node = args[0];

        for (let i = 0; i < visitors.length; i++) {
          if (skipping[i] === null) {
            var _leaveList$i;

            const result =
              (_leaveList$i = leaveList[i]) === null || _leaveList$i === void 0
                ? void 0
                : _leaveList$i.apply(visitors[i], args);

            if (result === BREAK) {
              skipping[i] = BREAK;
            } else if (result !== undefined && result !== false) {
              return result;
            }
          } else if (skipping[i] === node) {
            skipping[i] = null;
          }
        }
      },
    };
    mergedVisitor[kind] = mergedEnterLeave;
  }

  return mergedVisitor;
}
/**
 * Given a visitor instance and a node kind, return EnterLeaveVisitor for that kind.
 */

function getEnterLeaveForKind(visitor, kind) {
  const kindVisitor = visitor[kind];

  if (typeof kindVisitor === 'object') {
    // { Kind: { enter() {}, leave() {} } }
    return kindVisitor;
  } else if (typeof kindVisitor === 'function') {
    // { Kind() {} }
    return {
      enter: kindVisitor,
      leave: undefined,
    };
  } // { enter() {}, leave() {} }

  return {
    enter: visitor.enter,
    leave: visitor.leave,
  };
}
/**
 * Given a visitor instance, if it is leaving or not, and a node kind, return
 * the function the visitor runtime should call.
 *
 * @deprecated Please use `getEnterLeaveForKind` instead. Will be removed in v17
 */

/* c8 ignore next 8 */

function getVisitFn(visitor, kind, isLeaving) {
  const { enter, leave } = getEnterLeaveForKind(visitor, kind);
  return isLeaving ? leave : enter;
}


}),
"../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/context.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Slot: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.Slot),
  asyncFromGen: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.asyncFromGen),
  bindContext: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.bind),
  noContext: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.noContext),
  nonReactive: () => (nonReactive),
  parentEntrySlot: () => (parentEntrySlot),
  setTimeout: () => (/* reexport safe */ _wry_context__WEBPACK_IMPORTED_MODULE_0__.setTimeout)
});
/* ESM import */var _wry_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@wry+context@0.7.4/node_modules/@wry/context/lib/index.js");

const parentEntrySlot = new _wry_context__WEBPACK_IMPORTED_MODULE_0__.Slot();
function nonReactive(fn) {
    return parentEntrySlot.withValue(void 0, fn);
}


//# sourceMappingURL=context.js.map

}),
"../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/dep.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  dep: () => (dep)
});
/* ESM import */var _context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/context.js");
/* ESM import */var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/helpers.js");


const EntryMethods = {
    setDirty: true,
    dispose: true,
    forget: true, // Fully remove parent Entry from LRU cache and computation graph
};
function dep(options) {
    const depsByKey = new Map();
    const subscribe = options && options.subscribe;
    function depend(key) {
        const parent = _context_js__WEBPACK_IMPORTED_MODULE_0__.parentEntrySlot.getValue();
        if (parent) {
            let dep = depsByKey.get(key);
            if (!dep) {
                depsByKey.set(key, dep = new Set);
            }
            parent.dependOn(dep);
            if (typeof subscribe === "function") {
                (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(dep);
                dep.unsubscribe = subscribe(key);
            }
        }
    }
    depend.dirty = function dirty(key, entryMethodName) {
        const dep = depsByKey.get(key);
        if (dep) {
            const m = (entryMethodName &&
                _helpers_js__WEBPACK_IMPORTED_MODULE_1__.hasOwnProperty.call(EntryMethods, entryMethodName)) ? entryMethodName : "setDirty";
            // We have to use arrayFromSet(dep).forEach instead of dep.forEach,
            // because modifying a Set while iterating over it can cause elements in
            // the Set to be removed from the Set before they've been iterated over.
            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.arrayFromSet)(dep).forEach(entry => entry[m]());
            depsByKey.delete(key);
            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(dep);
        }
    };
    return depend;
}
//# sourceMappingURL=dep.js.map

}),
"../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/entry.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Entry: () => (Entry)
});
/* ESM import */var _context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/context.js");
/* ESM import */var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/helpers.js");


const emptySetPool = [];
const POOL_TARGET_SIZE = 100;
// Since this package might be used browsers, we should avoid using the
// Node built-in assert module.
function assert(condition, optionalMessage) {
    if (!condition) {
        throw new Error(optionalMessage || "assertion failure");
    }
}
function valueIs(a, b) {
    const len = a.length;
    return (
    // Unknown values are not equal to each other.
    len > 0 &&
        // Both values must be ordinary (or both exceptional) to be equal.
        len === b.length &&
        // The underlying value or exception must be the same.
        a[len - 1] === b[len - 1]);
}
function valueGet(value) {
    switch (value.length) {
        case 0: throw new Error("unknown value");
        case 1: return value[0];
        case 2: throw value[1];
    }
}
function valueCopy(value) {
    return value.slice(0);
}
class Entry {
    constructor(fn) {
        this.fn = fn;
        this.parents = new Set();
        this.childValues = new Map();
        // When this Entry has children that are dirty, this property becomes
        // a Set containing other Entry objects, borrowed from emptySetPool.
        // When the set becomes empty, it gets recycled back to emptySetPool.
        this.dirtyChildren = null;
        this.dirty = true;
        this.recomputing = false;
        this.value = [];
        this.deps = null;
        ++Entry.count;
    }
    peek() {
        if (this.value.length === 1 && !mightBeDirty(this)) {
            rememberParent(this);
            return this.value[0];
        }
    }
    // This is the most important method of the Entry API, because it
    // determines whether the cached this.value can be returned immediately,
    // or must be recomputed. The overall performance of the caching system
    // depends on the truth of the following observations: (1) this.dirty is
    // usually false, (2) this.dirtyChildren is usually null/empty, and thus
    // (3) valueGet(this.value) is usually returned without recomputation.
    recompute(args) {
        assert(!this.recomputing, "already recomputing");
        rememberParent(this);
        return mightBeDirty(this)
            ? reallyRecompute(this, args)
            : valueGet(this.value);
    }
    setDirty() {
        if (this.dirty)
            return;
        this.dirty = true;
        reportDirty(this);
        // We can go ahead and unsubscribe here, since any further dirty
        // notifications we receive will be redundant, and unsubscribing may
        // free up some resources, e.g. file watchers.
        (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(this);
    }
    dispose() {
        this.setDirty();
        // Sever any dependency relationships with our own children, so those
        // children don't retain this parent Entry in their child.parents sets,
        // thereby preventing it from being fully garbage collected.
        forgetChildren(this);
        // Because this entry has been kicked out of the cache (in index.js),
        // we've lost the ability to find out if/when this entry becomes dirty,
        // whether that happens through a subscription, because of a direct call
        // to entry.setDirty(), or because one of its children becomes dirty.
        // Because of this loss of future information, we have to assume the
        // worst (that this entry might have become dirty very soon), so we must
        // immediately mark this entry's parents as dirty. Normally we could
        // just call entry.setDirty() rather than calling parent.setDirty() for
        // each parent, but that would leave this entry in parent.childValues
        // and parent.dirtyChildren, which would prevent the child from being
        // truly forgotten.
        eachParent(this, (parent, child) => {
            parent.setDirty();
            forgetChild(parent, this);
        });
    }
    forget() {
        // The code that creates Entry objects in index.ts will replace this method
        // with one that actually removes the Entry from the cache, which will also
        // trigger the entry.dispose method.
        this.dispose();
    }
    dependOn(dep) {
        dep.add(this);
        if (!this.deps) {
            this.deps = emptySetPool.pop() || new Set();
        }
        this.deps.add(dep);
    }
    forgetDeps() {
        if (this.deps) {
            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.arrayFromSet)(this.deps).forEach(dep => dep.delete(this));
            this.deps.clear();
            emptySetPool.push(this.deps);
            this.deps = null;
        }
    }
}
Entry.count = 0;
function rememberParent(child) {
    const parent = _context_js__WEBPACK_IMPORTED_MODULE_0__.parentEntrySlot.getValue();
    if (parent) {
        child.parents.add(parent);
        if (!parent.childValues.has(child)) {
            parent.childValues.set(child, []);
        }
        if (mightBeDirty(child)) {
            reportDirtyChild(parent, child);
        }
        else {
            reportCleanChild(parent, child);
        }
        return parent;
    }
}
function reallyRecompute(entry, args) {
    forgetChildren(entry);
    // Set entry as the parent entry while calling recomputeNewValue(entry).
    _context_js__WEBPACK_IMPORTED_MODULE_0__.parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);
    if (maybeSubscribe(entry, args)) {
        // If we successfully recomputed entry.value and did not fail to
        // (re)subscribe, then this Entry is no longer explicitly dirty.
        setClean(entry);
    }
    return valueGet(entry.value);
}
function recomputeNewValue(entry, args) {
    entry.recomputing = true;
    const { normalizeResult } = entry;
    let oldValueCopy;
    if (normalizeResult && entry.value.length === 1) {
        oldValueCopy = valueCopy(entry.value);
    }
    // Make entry.value an empty array, representing an unknown value.
    entry.value.length = 0;
    try {
        // If entry.fn succeeds, entry.value will become a normal Value.
        entry.value[0] = entry.fn.apply(null, args);
        // If we have a viable oldValueCopy to compare with the (successfully
        // recomputed) new entry.value, and they are not already === identical, give
        // normalizeResult a chance to pick/choose/reuse parts of oldValueCopy[0]
        // and/or entry.value[0] to determine the final cached entry.value.
        if (normalizeResult && oldValueCopy && !valueIs(oldValueCopy, entry.value)) {
            try {
                entry.value[0] = normalizeResult(entry.value[0], oldValueCopy[0]);
            }
            catch (_a) {
                // If normalizeResult throws, just use the newer value, rather than
                // saving the exception as entry.value[1].
            }
        }
    }
    catch (e) {
        // If entry.fn throws, entry.value will hold that exception.
        entry.value[1] = e;
    }
    // Either way, this line is always reached.
    entry.recomputing = false;
}
function mightBeDirty(entry) {
    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);
}
function setClean(entry) {
    entry.dirty = false;
    if (mightBeDirty(entry)) {
        // This Entry may still have dirty children, in which case we can't
        // let our parents know we're clean just yet.
        return;
    }
    reportClean(entry);
}
function reportDirty(child) {
    eachParent(child, reportDirtyChild);
}
function reportClean(child) {
    eachParent(child, reportCleanChild);
}
function eachParent(child, callback) {
    const parentCount = child.parents.size;
    if (parentCount) {
        const parents = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.arrayFromSet)(child.parents);
        for (let i = 0; i < parentCount; ++i) {
            callback(parents[i], child);
        }
    }
}
// Let a parent Entry know that one of its children may be dirty.
function reportDirtyChild(parent, child) {
    // Must have called rememberParent(child) before calling
    // reportDirtyChild(parent, child).
    assert(parent.childValues.has(child));
    assert(mightBeDirty(child));
    const parentWasClean = !mightBeDirty(parent);
    if (!parent.dirtyChildren) {
        parent.dirtyChildren = emptySetPool.pop() || new Set;
    }
    else if (parent.dirtyChildren.has(child)) {
        // If we already know this child is dirty, then we must have already
        // informed our own parents that we are dirty, so we can terminate
        // the recursion early.
        return;
    }
    parent.dirtyChildren.add(child);
    // If parent was clean before, it just became (possibly) dirty (according to
    // mightBeDirty), since we just added child to parent.dirtyChildren.
    if (parentWasClean) {
        reportDirty(parent);
    }
}
// Let a parent Entry know that one of its children is no longer dirty.
function reportCleanChild(parent, child) {
    // Must have called rememberChild(child) before calling
    // reportCleanChild(parent, child).
    assert(parent.childValues.has(child));
    assert(!mightBeDirty(child));
    const childValue = parent.childValues.get(child);
    if (childValue.length === 0) {
        parent.childValues.set(child, valueCopy(child.value));
    }
    else if (!valueIs(childValue, child.value)) {
        parent.setDirty();
    }
    removeDirtyChild(parent, child);
    if (mightBeDirty(parent)) {
        return;
    }
    reportClean(parent);
}
function removeDirtyChild(parent, child) {
    const dc = parent.dirtyChildren;
    if (dc) {
        dc.delete(child);
        if (dc.size === 0) {
            if (emptySetPool.length < POOL_TARGET_SIZE) {
                emptySetPool.push(dc);
            }
            parent.dirtyChildren = null;
        }
    }
}
// Removes all children from this entry and returns an array of the
// removed children.
function forgetChildren(parent) {
    if (parent.childValues.size > 0) {
        parent.childValues.forEach((_value, child) => {
            forgetChild(parent, child);
        });
    }
    // Remove this parent Entry from any sets to which it was added by the
    // addToSet method.
    parent.forgetDeps();
    // After we forget all our children, this.dirtyChildren must be empty
    // and therefore must have been reset to null.
    assert(parent.dirtyChildren === null);
}
function forgetChild(parent, child) {
    child.parents.delete(parent);
    parent.childValues.delete(child);
    removeDirtyChild(parent, child);
}
function maybeSubscribe(entry, args) {
    if (typeof entry.subscribe === "function") {
        try {
            (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.maybeUnsubscribe)(entry); // Prevent double subscriptions.
            entry.unsubscribe = entry.subscribe.apply(null, args);
        }
        catch (e) {
            // If this Entry has a subscribe function and it threw an exception
            // (or an unsubscribe function it previously returned now throws),
            // return false to indicate that we were not able to subscribe (or
            // unsubscribe), and this Entry should remain dirty.
            entry.setDirty();
            return false;
        }
    }
    // Returning true indicates either that there was no entry.subscribe
    // function or that it succeeded.
    return true;
}
//# sourceMappingURL=entry.js.map

}),
"../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/helpers.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  arrayFromSet: () => (arrayFromSet),
  hasOwnProperty: () => (hasOwnProperty),
  maybeUnsubscribe: () => (maybeUnsubscribe)
});
const { hasOwnProperty, } = Object.prototype;
const arrayFromSet = Array.from ||
    function (set) {
        const array = [];
        set.forEach(item => array.push(item));
        return array;
    };
function maybeUnsubscribe(entryOrDep) {
    const { unsubscribe } = entryOrDep;
    if (typeof unsubscribe === "function") {
        entryOrDep.unsubscribe = void 0;
        unsubscribe();
    }
}
//# sourceMappingURL=helpers.js.map

}),
"../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/index.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  KeyTrie: () => (/* reexport safe */ _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie),
  Slot: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.Slot),
  asyncFromGen: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.asyncFromGen),
  bindContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.bindContext),
  defaultMakeCacheKey: () => (defaultMakeCacheKey),
  dep: () => (/* reexport safe */ _dep_js__WEBPACK_IMPORTED_MODULE_3__.dep),
  noContext: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.noContext),
  nonReactive: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.nonReactive),
  setTimeout: () => (/* reexport safe */ _context_js__WEBPACK_IMPORTED_MODULE_2__.setTimeout),
  wrap: () => (wrap)
});
/* ESM import */var _wry_trie__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/@wry+trie@0.5.0/node_modules/@wry/trie/lib/index.js");
/* ESM import */var _wry_caches__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__("../../node_modules/.pnpm/@wry+caches@1.0.1/node_modules/@wry/caches/lib/strong.js");
/* ESM import */var _entry_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/entry.js");
/* ESM import */var _context_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/context.js");
/* ESM import */var _dep_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__("../../node_modules/.pnpm/optimism@0.18.1/node_modules/optimism/lib/dep.js");




// These helper functions are important for making optimism work with
// asynchronous code. In order to register parent-child dependencies,
// optimism needs to know about any currently active parent computations.
// In ordinary synchronous code, the parent context is implicit in the
// execution stack, but asynchronous code requires some extra guidance in
// order to propagate context from one async task segment to the next.

// A lighter-weight dependency, similar to OptimisticWrapperFunction, except
// with only one argument, no makeCacheKey, no wrapped function to recompute,
// and no result value. Useful for representing dependency leaves in the graph
// of computation. Subscriptions are supported.

// The defaultMakeCacheKey function is remarkably powerful, because it gives
// a unique object for any shallow-identical list of arguments. If you need
// to implement a custom makeCacheKey function, you may find it helpful to
// delegate the final work to defaultMakeCacheKey, which is why we export it
// here. However, you may want to avoid defaultMakeCacheKey if your runtime
// does not support WeakMap, or you have the ability to return a string key.
// In those cases, just write your own custom makeCacheKey functions.
let defaultKeyTrie;
function defaultMakeCacheKey(...args) {
    const trie = defaultKeyTrie || (defaultKeyTrie = new _wry_trie__WEBPACK_IMPORTED_MODULE_0__.Trie(typeof WeakMap === "function"));
    return trie.lookupArray(args);
}
// If you're paranoid about memory leaks, or you want to avoid using WeakMap
// under the hood, but you still need the behavior of defaultMakeCacheKey,
// import this constructor to create your own tries.

;
const caches = new Set();
function wrap(originalFunction, { max = Math.pow(2, 16), keyArgs, makeCacheKey = defaultMakeCacheKey, normalizeResult, subscribe, cache: cacheOption = _wry_caches__WEBPACK_IMPORTED_MODULE_4__.StrongCache, } = Object.create(null)) {
    const cache = typeof cacheOption === "function"
        ? new cacheOption(max, entry => entry.dispose())
        : cacheOption;
    const optimistic = function () {
        const key = makeCacheKey.apply(null, keyArgs ? keyArgs.apply(null, arguments) : arguments);
        if (key === void 0) {
            return originalFunction.apply(null, arguments);
        }
        let entry = cache.get(key);
        if (!entry) {
            cache.set(key, entry = new _entry_js__WEBPACK_IMPORTED_MODULE_1__.Entry(originalFunction));
            entry.normalizeResult = normalizeResult;
            entry.subscribe = subscribe;
            // Give the Entry the ability to trigger cache.delete(key), even though
            // the Entry itself does not know about key or cache.
            entry.forget = () => cache.delete(key);
        }
        const value = entry.recompute(Array.prototype.slice.call(arguments));
        // Move this entry to the front of the least-recently used queue,
        // since we just finished computing its value.
        cache.set(key, entry);
        caches.add(cache);
        // Clean up any excess entries in the cache, but only if there is no
        // active parent entry, meaning we're not in the middle of a larger
        // computation that might be flummoxed by the cleaning.
        if (!_context_js__WEBPACK_IMPORTED_MODULE_2__.parentEntrySlot.hasValue()) {
            caches.forEach(cache => cache.clean());
            caches.clear();
        }
        return value;
    };
    Object.defineProperty(optimistic, "size", {
        get: () => cache.size,
        configurable: false,
        enumerable: false,
    });
    Object.freeze(optimistic.options = {
        max,
        keyArgs,
        makeCacheKey,
        normalizeResult,
        subscribe,
        cache,
    });
    function dirtyKey(key) {
        const entry = key && cache.get(key);
        if (entry) {
            entry.setDirty();
        }
    }
    optimistic.dirtyKey = dirtyKey;
    optimistic.dirty = function dirty() {
        dirtyKey(makeCacheKey.apply(null, arguments));
    };
    function peekKey(key) {
        const entry = key && cache.get(key);
        if (entry) {
            return entry.peek();
        }
    }
    optimistic.peekKey = peekKey;
    optimistic.peek = function peek() {
        return peekKey(makeCacheKey.apply(null, arguments));
    };
    function forgetKey(key) {
        return key ? cache.delete(key) : false;
    }
    optimistic.forgetKey = forgetKey;
    optimistic.forget = function forget() {
        return forgetKey(makeCacheKey.apply(null, arguments));
    };
    optimistic.makeCacheKey = makeCacheKey;
    optimistic.getKey = keyArgs ? function getKey() {
        return makeCacheKey.apply(null, keyArgs.apply(null, arguments));
    } : makeCacheKey;
    return Object.freeze(optimistic);
}
//# sourceMappingURL=index.js.map

}),
"../../node_modules/.pnpm/ts-invariant@0.10.3/node_modules/ts-invariant/lib/invariant.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  InvariantError: () => (InvariantError),
  "default": () => (__WEBPACK_DEFAULT_EXPORT__),
  invariant: () => (invariant),
  setVerbosity: () => (setVerbosity)
});
/* ESM import */var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__("../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs");

var genericMessage = "Invariant Violation";
var _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {
    obj.__proto__ = proto;
    return obj;
} : _a;
var InvariantError = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__extends)(InvariantError, _super);
    function InvariantError(message) {
        if (message === void 0) { message = genericMessage; }
        var _this = _super.call(this, typeof message === "number"
            ? genericMessage + ": " + message + " (see https://github.com/apollographql/invariant-packages)"
            : message) || this;
        _this.framesToPop = 1;
        _this.name = genericMessage;
        setPrototypeOf(_this, InvariantError.prototype);
        return _this;
    }
    return InvariantError;
}(Error));

function invariant(condition, message) {
    if (!condition) {
        throw new InvariantError(message);
    }
}
var verbosityLevels = ["debug", "log", "warn", "error", "silent"];
var verbosityLevel = verbosityLevels.indexOf("log");
function wrapConsoleMethod(name) {
    return function () {
        if (verbosityLevels.indexOf(name) >= verbosityLevel) {
            // Default to console.log if this host environment happens not to provide
            // all the console.* methods we need.
            var method = console[name] || console.log;
            return method.apply(console, arguments);
        }
    };
}
(function (invariant) {
    invariant.debug = wrapConsoleMethod("debug");
    invariant.log = wrapConsoleMethod("log");
    invariant.warn = wrapConsoleMethod("warn");
    invariant.error = wrapConsoleMethod("error");
})(invariant || (invariant = {}));
function setVerbosity(level) {
    var old = verbosityLevels[verbosityLevel];
    verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));
    return old;
}
/* ESM default export */ const __WEBPACK_DEFAULT_EXPORT__ = (invariant);
//# sourceMappingURL=invariant.js.map

}),
"../../node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  __addDisposableResource: () => (__addDisposableResource),
  __assign: () => (__assign),
  __asyncDelegator: () => (__asyncDelegator),
  __asyncGenerator: () => (__asyncGenerator),
  __asyncValues: () => (__asyncValues),
  __await: () => (__await),
  __awaiter: () => (__awaiter),
  __classPrivateFieldGet: () => (__classPrivateFieldGet),
  __classPrivateFieldIn: () => (__classPrivateFieldIn),
  __classPrivateFieldSet: () => (__classPrivateFieldSet),
  __createBinding: () => (__createBinding),
  __decorate: () => (__decorate),
  __disposeResources: () => (__disposeResources),
  __esDecorate: () => (__esDecorate),
  __exportStar: () => (__exportStar),
  __extends: () => (__extends),
  __generator: () => (__generator),
  __importDefault: () => (__importDefault),
  __importStar: () => (__importStar),
  __makeTemplateObject: () => (__makeTemplateObject),
  __metadata: () => (__metadata),
  __param: () => (__param),
  __propKey: () => (__propKey),
  __read: () => (__read),
  __rest: () => (__rest),
  __rewriteRelativeImportExtension: () => (__rewriteRelativeImportExtension),
  __runInitializers: () => (__runInitializers),
  __setFunctionName: () => (__setFunctionName),
  __spread: () => (__spread),
  __spreadArray: () => (__spreadArray),
  __spreadArrays: () => (__spreadArrays),
  __values: () => (__values),
  "default": () => (__WEBPACK_DEFAULT_EXPORT__)
});
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */

var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() { this.constructor = d; }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
  __assign = Object.assign || function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
  }
  return __assign.apply(this, arguments);
}

function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
              t[p[i]] = s[p[i]];
      }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) { decorator(target, key, paramIndex); }
}

function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
      var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
      if (kind === "accessor") {
          if (result === void 0) continue;
          if (result === null || typeof result !== "object") throw new TypeError("Object expected");
          if (_ = accept(result.get)) descriptor.get = _;
          if (_ = accept(result.set)) descriptor.set = _;
          if (_ = accept(result.init)) initializers.unshift(_);
      }
      else if (_ = accept(result)) {
          if (kind === "field") initializers.unshift(_);
          else descriptor[key] = _;
      }
  }
  if (target) Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
};

function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
};

function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
};

function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
  return new (P || (P = Promise))(function (resolve, reject) {
      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
      function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
  function verb(n) { return function (v) { return step([n, v]); }; }
  function step(op) {
      if (f) throw new TypeError("Generator is already executing.");
      while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
              case 0: case 1: t = op; break;
              case 4: _.label++; return { value: op[1], done: false };
              case 5: _.label++; y = op[1]; op = [0]; continue;
              case 7: op = _.ops.pop(); _.trys.pop(); continue;
              default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                  if (t[2]) _.ops.pop();
                  _.trys.pop(); continue;
          }
          op = body.call(thisArg, _);
      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
  }
}

var __createBinding = Object.create ? (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
  }
  Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
      next: function () {
          if (o && i >= o.length) o = void 0;
          return { value: o && o[i++], done: !o };
      }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar = [], e;
  try {
      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  }
  catch (error) { e = { error: error }; }
  finally {
      try {
          if (r && !r.done && (m = i["return"])) m.call(i);
      }
      finally { if (e) throw e.error; }
  }
  return ar;
}

/** @deprecated */
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
      ar = ar.concat(__read(arguments[i]));
  return ar;
}

/** @deprecated */
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
  return r;
}

function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
          if (!ar) ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
      }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;
  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }
  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }
  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
  function fulfill(value) { resume("next", value); }
  function reject(value) { resume("throw", value); }
  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
  return cooked;
};

var __setModuleDefault = Object.create ? (function(o, v) {
  Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
  o["default"] = v;
};

var ownKeys = function(o) {
  ownKeys = Object.getOwnPropertyNames || function (o) {
    var ar = [];
    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
    return ar;
  };
  return ownKeys(o);
};

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
  __setModuleDefault(result, mod);
  return result;
}

function __importDefault(mod) {
  return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}

function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
}

function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function")) throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}

function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
    var dispose, inner;
    if (async) {
      if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async) inner = dispose;
    }
    if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };
    env.stack.push({ value: value, dispose: dispose, async: async });
  }
  else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}

var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
  var e = new Error(message);
  return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  var r, s = 0;
  function next() {
    while (r = env.stack.pop()) {
      try {
        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
        if (r.dispose) {
          var result = r.dispose.call(r.value);
          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });
        }
        else s |= 1;
      }
      catch (e) {
        fail(e);
      }
    }
    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
    if (env.hasError) throw env.error;
  }
  return next();
}

function __rewriteRelativeImportExtension(path, preserveJsx) {
  if (typeof path === "string" && /^\.\.?\//.test(path)) {
      return path.replace(/\.(tsx)$|((?:\.d)?)((?:\.[^./]+?)?)\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {
          return tsx ? preserveJsx ? ".jsx" : ".js" : d && (!ext || !cm) ? m : (d + ext + "." + cm.toLowerCase() + "js");
      });
  }
  return path;
}

/* ESM default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __esDecorate,
  __runInitializers,
  __propKey,
  __setFunctionName,
  __metadata,
  __awaiter,
  __generator,
  __createBinding,
  __exportStar,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  __classPrivateFieldIn,
  __addDisposableResource,
  __disposeResources,
  __rewriteRelativeImportExtension,
});


}),
"../../node_modules/.pnpm/zen-observable-ts@1.2.5/node_modules/zen-observable-ts/module.js": (function (__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {
"use strict";
__webpack_require__.r(__webpack_exports__);
__webpack_require__.d(__webpack_exports__, {
  Observable: () => (Observable)
});
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

// === Symbol Support ===
var hasSymbols = function () {
  return typeof Symbol === 'function';
};

var hasSymbol = function (name) {
  return hasSymbols() && Boolean(Symbol[name]);
};

var getSymbol = function (name) {
  return hasSymbol(name) ? Symbol[name] : '@@' + name;
};

if (hasSymbols() && !hasSymbol('observable')) {
  Symbol.observable = Symbol('observable');
}

var SymbolIterator = getSymbol('iterator');
var SymbolObservable = getSymbol('observable');
var SymbolSpecies = getSymbol('species'); // === Abstract Operations ===

function getMethod(obj, key) {
  var value = obj[key];
  if (value == null) return undefined;
  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');
  return value;
}

function getSpecies(obj) {
  var ctor = obj.constructor;

  if (ctor !== undefined) {
    ctor = ctor[SymbolSpecies];

    if (ctor === null) {
      ctor = undefined;
    }
  }

  return ctor !== undefined ? ctor : Observable;
}

function isObservable(x) {
  return x instanceof Observable; // SPEC: Brand check
}

function hostReportError(e) {
  if (hostReportError.log) {
    hostReportError.log(e);
  } else {
    setTimeout(function () {
      throw e;
    });
  }
}

function enqueue(fn) {
  Promise.resolve().then(function () {
    try {
      fn();
    } catch (e) {
      hostReportError(e);
    }
  });
}

function cleanupSubscription(subscription) {
  var cleanup = subscription._cleanup;
  if (cleanup === undefined) return;
  subscription._cleanup = undefined;

  if (!cleanup) {
    return;
  }

  try {
    if (typeof cleanup === 'function') {
      cleanup();
    } else {
      var unsubscribe = getMethod(cleanup, 'unsubscribe');

      if (unsubscribe) {
        unsubscribe.call(cleanup);
      }
    }
  } catch (e) {
    hostReportError(e);
  }
}

function closeSubscription(subscription) {
  subscription._observer = undefined;
  subscription._queue = undefined;
  subscription._state = 'closed';
}

function flushSubscription(subscription) {
  var queue = subscription._queue;

  if (!queue) {
    return;
  }

  subscription._queue = undefined;
  subscription._state = 'ready';

  for (var i = 0; i < queue.length; ++i) {
    notifySubscription(subscription, queue[i].type, queue[i].value);
    if (subscription._state === 'closed') break;
  }
}

function notifySubscription(subscription, type, value) {
  subscription._state = 'running';
  var observer = subscription._observer;

  try {
    var m = getMethod(observer, type);

    switch (type) {
      case 'next':
        if (m) m.call(observer, value);
        break;

      case 'error':
        closeSubscription(subscription);
        if (m) m.call(observer, value);else throw value;
        break;

      case 'complete':
        closeSubscription(subscription);
        if (m) m.call(observer);
        break;
    }
  } catch (e) {
    hostReportError(e);
  }

  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';
}

function onNotify(subscription, type, value) {
  if (subscription._state === 'closed') return;

  if (subscription._state === 'buffering') {
    subscription._queue.push({
      type: type,
      value: value
    });

    return;
  }

  if (subscription._state !== 'ready') {
    subscription._state = 'buffering';
    subscription._queue = [{
      type: type,
      value: value
    }];
    enqueue(function () {
      return flushSubscription(subscription);
    });
    return;
  }

  notifySubscription(subscription, type, value);
}

var Subscription = /*#__PURE__*/function () {
  function Subscription(observer, subscriber) {
    // ASSERT: observer is an object
    // ASSERT: subscriber is callable
    this._cleanup = undefined;
    this._observer = observer;
    this._queue = undefined;
    this._state = 'initializing';
    var subscriptionObserver = new SubscriptionObserver(this);

    try {
      this._cleanup = subscriber.call(undefined, subscriptionObserver);
    } catch (e) {
      subscriptionObserver.error(e);
    }

    if (this._state === 'initializing') this._state = 'ready';
  }

  var _proto = Subscription.prototype;

  _proto.unsubscribe = function unsubscribe() {
    if (this._state !== 'closed') {
      closeSubscription(this);
      cleanupSubscription(this);
    }
  };

  _createClass(Subscription, [{
    key: "closed",
    get: function () {
      return this._state === 'closed';
    }
  }]);

  return Subscription;
}();

var SubscriptionObserver = /*#__PURE__*/function () {
  function SubscriptionObserver(subscription) {
    this._subscription = subscription;
  }

  var _proto2 = SubscriptionObserver.prototype;

  _proto2.next = function next(value) {
    onNotify(this._subscription, 'next', value);
  };

  _proto2.error = function error(value) {
    onNotify(this._subscription, 'error', value);
  };

  _proto2.complete = function complete() {
    onNotify(this._subscription, 'complete');
  };

  _createClass(SubscriptionObserver, [{
    key: "closed",
    get: function () {
      return this._subscription._state === 'closed';
    }
  }]);

  return SubscriptionObserver;
}();

var Observable = /*#__PURE__*/function () {
  function Observable(subscriber) {
    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');
    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');
    this._subscriber = subscriber;
  }

  var _proto3 = Observable.prototype;

  _proto3.subscribe = function subscribe(observer) {
    if (typeof observer !== 'object' || observer === null) {
      observer = {
        next: observer,
        error: arguments[1],
        complete: arguments[2]
      };
    }

    return new Subscription(observer, this._subscriber);
  };

  _proto3.forEach = function forEach(fn) {
    var _this = this;

    return new Promise(function (resolve, reject) {
      if (typeof fn !== 'function') {
        reject(new TypeError(fn + ' is not a function'));
        return;
      }

      function done() {
        subscription.unsubscribe();
        resolve();
      }

      var subscription = _this.subscribe({
        next: function (value) {
          try {
            fn(value, done);
          } catch (e) {
            reject(e);
            subscription.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
    });
  };

  _proto3.map = function map(fn) {
    var _this2 = this;

    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    return new C(function (observer) {
      return _this2.subscribe({
        next: function (value) {
          try {
            value = fn(value);
          } catch (e) {
            return observer.error(e);
          }

          observer.next(value);
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          observer.complete();
        }
      });
    });
  };

  _proto3.filter = function filter(fn) {
    var _this3 = this;

    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    return new C(function (observer) {
      return _this3.subscribe({
        next: function (value) {
          try {
            if (!fn(value)) return;
          } catch (e) {
            return observer.error(e);
          }

          observer.next(value);
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          observer.complete();
        }
      });
    });
  };

  _proto3.reduce = function reduce(fn) {
    var _this4 = this;

    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    var hasSeed = arguments.length > 1;
    var hasValue = false;
    var seed = arguments[1];
    var acc = seed;
    return new C(function (observer) {
      return _this4.subscribe({
        next: function (value) {
          var first = !hasValue;
          hasValue = true;

          if (!first || hasSeed) {
            try {
              acc = fn(acc, value);
            } catch (e) {
              return observer.error(e);
            }
          } else {
            acc = value;
          }
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));
          observer.next(acc);
          observer.complete();
        }
      });
    });
  };

  _proto3.concat = function concat() {
    var _this5 = this;

    for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
      sources[_key] = arguments[_key];
    }

    var C = getSpecies(this);
    return new C(function (observer) {
      var subscription;
      var index = 0;

      function startNext(next) {
        subscription = next.subscribe({
          next: function (v) {
            observer.next(v);
          },
          error: function (e) {
            observer.error(e);
          },
          complete: function () {
            if (index === sources.length) {
              subscription = undefined;
              observer.complete();
            } else {
              startNext(C.from(sources[index++]));
            }
          }
        });
      }

      startNext(_this5);
      return function () {
        if (subscription) {
          subscription.unsubscribe();
          subscription = undefined;
        }
      };
    });
  };

  _proto3.flatMap = function flatMap(fn) {
    var _this6 = this;

    if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');
    var C = getSpecies(this);
    return new C(function (observer) {
      var subscriptions = [];

      var outer = _this6.subscribe({
        next: function (value) {
          if (fn) {
            try {
              value = fn(value);
            } catch (e) {
              return observer.error(e);
            }
          }

          var inner = C.from(value).subscribe({
            next: function (value) {
              observer.next(value);
            },
            error: function (e) {
              observer.error(e);
            },
            complete: function () {
              var i = subscriptions.indexOf(inner);
              if (i >= 0) subscriptions.splice(i, 1);
              completeIfDone();
            }
          });
          subscriptions.push(inner);
        },
        error: function (e) {
          observer.error(e);
        },
        complete: function () {
          completeIfDone();
        }
      });

      function completeIfDone() {
        if (outer.closed && subscriptions.length === 0) observer.complete();
      }

      return function () {
        subscriptions.forEach(function (s) {
          return s.unsubscribe();
        });
        outer.unsubscribe();
      };
    });
  };

  _proto3[SymbolObservable] = function () {
    return this;
  };

  Observable.from = function from(x) {
    var C = typeof this === 'function' ? this : Observable;
    if (x == null) throw new TypeError(x + ' is not an object');
    var method = getMethod(x, SymbolObservable);

    if (method) {
      var observable = method.call(x);
      if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');
      if (isObservable(observable) && observable.constructor === C) return observable;
      return new C(function (observer) {
        return observable.subscribe(observer);
      });
    }

    if (hasSymbol('iterator')) {
      method = getMethod(x, SymbolIterator);

      if (method) {
        return new C(function (observer) {
          enqueue(function () {
            if (observer.closed) return;

            for (var _iterator = _createForOfIteratorHelperLoose(method.call(x)), _step; !(_step = _iterator()).done;) {
              var item = _step.value;
              observer.next(item);
              if (observer.closed) return;
            }

            observer.complete();
          });
        });
      }
    }

    if (Array.isArray(x)) {
      return new C(function (observer) {
        enqueue(function () {
          if (observer.closed) return;

          for (var i = 0; i < x.length; ++i) {
            observer.next(x[i]);
            if (observer.closed) return;
          }

          observer.complete();
        });
      });
    }

    throw new TypeError(x + ' is not observable');
  };

  Observable.of = function of() {
    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }

    var C = typeof this === 'function' ? this : Observable;
    return new C(function (observer) {
      enqueue(function () {
        if (observer.closed) return;

        for (var i = 0; i < items.length; ++i) {
          observer.next(items[i]);
          if (observer.closed) return;
        }

        observer.complete();
      });
    });
  };

  _createClass(Observable, null, [{
    key: SymbolSpecies,
    get: function () {
      return this;
    }
  }]);

  return Observable;
}();

if (hasSymbols()) {
  Object.defineProperty(Observable, Symbol('extensions'), {
    value: {
      symbol: SymbolObservable,
      hostReportError: hostReportError
    },
    configurable: true
  });
}




}),

});
/************************************************************************/
// The module cache
var __webpack_module_cache__ = {};

// The require function
function __webpack_require__(moduleId) {

// Check if module is in cache
var cachedModule = __webpack_module_cache__[moduleId];
if (cachedModule !== undefined) {
return cachedModule.exports;
}
// Create a new module (and put it into the cache)
var module = (__webpack_module_cache__[moduleId] = {
exports: {}
});
// Execute the module function
__webpack_modules__[moduleId](module, module.exports, __webpack_require__);

// Return the exports of the module
return module.exports;

}

/************************************************************************/
// webpack/runtime/async_module
(() => {
var webpackQueues =
	typeof Symbol === "function"
		? Symbol("webpack queues")
		: "__webpack_queues__";
var webpackExports =
	typeof Symbol === "function"
		? Symbol("webpack exports")
		: "__webpack_exports__";
var webpackError =
	typeof Symbol === "function" ? Symbol("webpack error") : "__webpack_error__";
var resolveQueue = (queue) => {
  if (queue && queue.d < 1) {
    queue.d = 1;
    queue.forEach((fn) => (fn.r--));
		queue.forEach((fn) => (fn.r-- ? fn.r++ : fn()));
	}
}
var wrapDeps = (deps) => {
	return deps.map((dep) => {
		if (dep !== null && typeof dep === "object") {
			if (dep[webpackQueues]) return dep;
			if (dep.then) {
				var queue = [];
				queue.d = 0;
				dep.then((r) => {
					obj[webpackExports] = r;
					resolveQueue(queue);
				},(e) => {
					obj[webpackError] = e;
					resolveQueue(queue);
				});
				var obj = {};
				obj[webpackQueues] = (fn) => (fn(queue));
				return obj;
			}
		}
		var ret = {};
		ret[webpackQueues] = function() {};
		ret[webpackExports] = dep;
		return ret;
	});
};
__webpack_require__.a = (module, body, hasAwait) => {
	var queue;
	hasAwait && ((queue = []).d = -1);
	var depQueues = new Set();
	var exports = module.exports;
	var currentDeps;
	var outerResolve;
	var reject;
	var promise = new Promise((resolve, rej) => {
		reject = rej;
		outerResolve = resolve;
	});
	promise[webpackExports] = exports;
	promise[webpackQueues] = (fn) => { queue && fn(queue), depQueues.forEach(fn), promise["catch"](function() {}); };
	module.exports = promise;
	body((deps) => {
		currentDeps = wrapDeps(deps);
		var fn;
		var getResult = () => {
			return currentDeps.map((d) => {
				if (d[webpackError]) throw d[webpackError];
				return d[webpackExports];
			});
		}
		var promise = new Promise((resolve) => {
			fn = () => (resolve(getResult));
			fn.r = 0;
			var fnQueue = (q) => (q !== queue && !depQueues.has(q) && (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn))));
			currentDeps.map((dep) => (dep[webpackQueues](fnQueue)));
		});
		return fn.r ? promise : getResult();
	}, (err) => ((err ? reject(promise[webpackError] = err) : outerResolve(exports)), resolveQueue(queue)));
	queue && queue.d < 0 && (queue.d = 0);
};
})();
// webpack/runtime/compat_get_default_export
(() => {
// getDefaultExport function for compatibility with non-ESM modules
__webpack_require__.n = (module) => {
	var getter = module && module.__esModule ?
		() => (module['default']) :
		() => (module);
	__webpack_require__.d(getter, { a: getter });
	return getter;
};

})();
// webpack/runtime/define_property_getters
(() => {
__webpack_require__.d = (exports, definition) => {
	for(var key in definition) {
        if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
            Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
        }
    }
};
})();
// webpack/runtime/has_own_property
(() => {
__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
})();
// webpack/runtime/make_namespace_object
(() => {
// define __esModule on exports
__webpack_require__.r = (exports) => {
	if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
		Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
	}
	Object.defineProperty(exports, '__esModule', { value: true });
};
})();
/************************************************************************/
// startup
// Load entry module and return exports
// This entry module used 'module' so it can't be inlined
var __webpack_exports__ = __webpack_require__("./api/materializeDocument.bench.ts");
module.exports = __webpack_exports__;
})()
;
//# sourceMappingURL=bench.cjs.map